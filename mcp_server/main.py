# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:48:26+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query

from models import (
    AnalyticsDataLinkInterface,
    AsynchronousOperationsDataBulkOperationsStatusInterface,
    AsynchronousOperationsDataDetailedBulkOperationsStatusInterface,
    AttachmentIds,
    BundleDataOptionInterface,
    CatalogDataCategoryAttributeInterface,
    CatalogDataCategoryAttributeSearchResultsInterface,
    CatalogDataCategoryInterface,
    CatalogDataCategorySearchResultsInterface,
    CatalogDataCategoryTreeInterface,
    CatalogDataProductAttributeInterface,
    CatalogDataProductAttributeMediaGalleryEntryInterface,
    CatalogDataProductAttributeSearchResultsInterface,
    CatalogDataProductCustomOptionInterface,
    CatalogDataProductInterface,
    CatalogDataProductRenderSearchResultsInterface,
    CatalogDataProductSearchResultsInterface,
    CatalogInventoryDataStockItemCollectionInterface,
    CatalogInventoryDataStockItemInterface,
    CatalogInventoryDataStockStatusInterface,
    CheckoutDataPaymentDetailsInterface,
    CmsDataBlockInterface,
    CmsDataBlockSearchResultsInterface,
    CmsDataPageInterface,
    CmsDataPageSearchResultsInterface,
    CompanyCreditDataCreditLimitInterface,
    CompanyCreditDataCreditLimitSearchResultsInterface,
    CompanyCreditDataHistorySearchResultsInterface,
    CompanyDataCompanyInterface,
    CompanyDataCompanySearchResultsInterface,
    CompanyDataRoleInterface,
    CompanyDataRoleSearchResultsInterface,
    CompanyDataTeamInterface,
    CompanyDataTeamSearchResultsInterface,
    ConfigurableProductDataOptionInterface,
    CustomerDataAddressInterface,
    CustomerDataAttributeMetadataInterface,
    CustomerDataCustomerInterface,
    CustomerDataCustomerSearchResultsInterface,
    CustomerDataGroupInterface,
    CustomerDataGroupSearchResultsInterface,
    CustomerDataValidationResultsInterface,
    DirectoryDataCountryInformationInterface,
    DirectoryDataCurrencyInformationInterface,
    EavDataAttributeGroupInterface,
    EavDataAttributeGroupSearchResultsInterface,
    EavDataAttributeSetInterface,
    EavDataAttributeSetSearchResultsInterface,
    ErrorResponse,
    FrameworkSearchSearchResultInterface,
    GiftCardAccountDataGiftCardAccountInterface,
    GiftMessageDataMessageInterface,
    GiftWrappingDataWrappingInterface,
    GiftWrappingDataWrappingSearchResultsInterface,
    QuoteDataAddressInterface,
    QuoteDataCartInterface,
    QuoteDataCartItemInterface,
    QuoteDataCartSearchResultsInterface,
    QuoteDataPaymentInterface,
    QuoteDataTotalsInterface,
    RequisitionListDataRequisitionListInterface,
    RmaDataCommentSearchResultInterface,
    RmaDataRmaInterface,
    RmaDataRmaSearchResultInterface,
    RmaDataTrackSearchResultInterface,
    SalesDataCreditmemoCommentInterface,
    SalesDataCreditmemoCommentSearchResultInterface,
    SalesDataCreditmemoInterface,
    SalesDataCreditmemoSearchResultInterface,
    SalesDataInvoiceCommentInterface,
    SalesDataInvoiceCommentSearchResultInterface,
    SalesDataInvoiceInterface,
    SalesDataInvoiceSearchResultInterface,
    SalesDataOrderAddressInterface,
    SalesDataOrderInterface,
    SalesDataOrderItemInterface,
    SalesDataOrderItemSearchResultInterface,
    SalesDataOrderSearchResultInterface,
    SalesDataOrderStatusHistorySearchResultInterface,
    SalesDataShipmentCommentInterface,
    SalesDataShipmentCommentSearchResultInterface,
    SalesDataShipmentInterface,
    SalesDataShipmentSearchResultInterface,
    SalesDataShipmentTrackInterface,
    SalesDataTransactionInterface,
    SalesDataTransactionSearchResultInterface,
    SalesRuleDataCouponInterface,
    SalesRuleDataCouponMassDeleteResultInterface,
    SalesRuleDataCouponSearchResultInterface,
    SalesRuleDataRuleInterface,
    SalesRuleDataRuleSearchResultInterface,
    SharedCatalogDataSearchResultsInterface,
    SharedCatalogDataSharedCatalogInterface,
    StoreCodes,
    TaxDataTaxClassInterface,
    TaxDataTaxClassSearchResultsInterface,
    TaxDataTaxRateInterface,
    TaxDataTaxRateSearchResultsInterface,
    TaxDataTaxRuleInterface,
    TaxDataTaxRuleSearchResultsInterface,
    TemandoShippingDataCollectionPointSearchRequestInterface,
    V1AmazonBillingAddressAmazonOrderReferenceIdPutRequest,
    V1AmazonShippingAddressAmazonOrderReferenceIdPutRequest,
    V1AttributeMetadataCustomerAddressCustomGetResponse,
    V1AttributeMetadataCustomerAddressFormFormCodeGetResponse,
    V1AttributeMetadataCustomerAddressGetResponse,
    V1AttributeMetadataCustomerCustomGetResponse,
    V1AttributeMetadataCustomerFormFormCodeGetResponse,
    V1AttributeMetadataCustomerGetResponse,
    V1BundleProductsOptionsAddPostRequest,
    V1BundleProductsOptionsOptionIdPutRequest,
    V1BundleProductsOptionsTypesGetResponse,
    V1BundleProductsProductSkuChildrenGetResponse,
    V1BundleProductsSkuLinksIdPutRequest,
    V1BundleProductsSkuLinksOptionIdPostRequest,
    V1BundleProductsSkuOptionsAllGetResponse,
    V1CartsCartIdBillingAddressPostRequest,
    V1CartsCartIdEstimateShippingMethodsByAddressIdPostRequest,
    V1CartsCartIdEstimateShippingMethodsByAddressIdPostResponse,
    V1CartsCartIdEstimateShippingMethodsPostRequest,
    V1CartsCartIdEstimateShippingMethodsPostResponse,
    V1CartsCartIdGiftCardsPutRequest,
    V1CartsCartIdGiftMessageItemIdPostRequest,
    V1CartsCartIdGiftMessagePostRequest,
    V1CartsCartIdItemsGetResponse,
    V1CartsCartIdItemsItemIdPutRequest,
    V1CartsCartIdOrderPutRequest,
    V1CartsCartIdPaymentMethodsGetResponse,
    V1CartsCartIdPutRequest,
    V1CartsCartIdSelectedPaymentMethodPutRequest,
    V1CartsCartIdShippingInformationPostRequest,
    V1CartsCartIdShippingMethodsGetResponse,
    V1CartsCartIdTotalsInformationPostRequest,
    V1CartsGuestCartsCartIdGiftCardsPostRequest,
    V1CartsLicenceGetResponse,
    V1CartsMineBillingAddressPostRequest,
    V1CartsMineCheckoutFieldsPostRequest,
    V1CartsMineCollectionPointSearchRequestPutRequest,
    V1CartsMineCollectionPointSearchResultGetResponse,
    V1CartsMineCollectionPointSelectPostRequest,
    V1CartsMineCollectTotalsPutRequest,
    V1CartsMineDeliveryOptionPostRequest,
    V1CartsMineEstimateShippingMethodsByAddressIdPostRequest,
    V1CartsMineEstimateShippingMethodsByAddressIdPostResponse,
    V1CartsMineEstimateShippingMethodsPostRequest,
    V1CartsMineEstimateShippingMethodsPostResponse,
    V1CartsMineGiftCardsPostRequest,
    V1CartsMineGiftMessageItemIdPostRequest,
    V1CartsMineGiftMessagePostRequest,
    V1CartsMineItemsGetResponse,
    V1CartsMineItemsItemIdPutRequest,
    V1CartsMineItemsPostRequest,
    V1CartsMineOrderPutRequest,
    V1CartsMinePaymentInformationPostRequest,
    V1CartsMinePaymentMethodsGetResponse,
    V1CartsMinePutRequest,
    V1CartsMineSelectedPaymentMethodPutRequest,
    V1CartsMineSetPaymentInformationPostRequest,
    V1CartsMineShippingInformationPostRequest,
    V1CartsMineShippingMethodsGetResponse,
    V1CartsMineTotalsInformationPostRequest,
    V1CartsQuoteIdItemsPostRequest,
    V1CategoriesAttributesAttributeCodeOptionsGetResponse,
    V1CategoriesCategoryIdMovePutRequest,
    V1CategoriesCategoryIdProductsGetResponse,
    V1CategoriesCategoryIdProductsPostRequest,
    V1CategoriesCategoryIdProductsPutRequest,
    V1CategoriesIdPutRequest,
    V1CategoriesPostRequest,
    V1CmsBlockIdPutRequest,
    V1CmsBlockPostRequest,
    V1CmsPageIdPutRequest,
    V1CmsPagePostRequest,
    V1CompanyAssignRolesPutRequest,
    V1CompanyCompanyIdPutRequest,
    V1CompanyCreditsCreditIdDecreaseBalancePostRequest,
    V1CompanyCreditsCreditIdIncreaseBalancePostRequest,
    V1CompanyCreditsHistoryHistoryIdPutRequest,
    V1CompanyCreditsIdPutRequest,
    V1CompanyPostRequest,
    V1CompanyRoleIdPutRequest,
    V1CompanyRolePostRequest,
    V1CompanyRoleRoleIdUsersGetResponse,
    V1ConfigurableProductsSkuChildPostRequest,
    V1ConfigurableProductsSkuChildrenGetResponse,
    V1ConfigurableProductsSkuOptionsAllGetResponse,
    V1ConfigurableProductsSkuOptionsIdPutRequest,
    V1ConfigurableProductsSkuOptionsPostRequest,
    V1ConfigurableProductsVariationPutRequest,
    V1ConfigurableProductsVariationPutResponse,
    V1CouponsCouponIdPutRequest,
    V1CouponsDeleteByCodesPostRequest,
    V1CouponsDeleteByIdsPostRequest,
    V1CouponsGeneratePostRequest,
    V1CouponsGeneratePostResponse,
    V1CouponsPostRequest,
    V1CreditmemoIdCommentsPostRequest,
    V1CreditmemoPostRequest,
    V1CreditmemoRefundPostRequest,
    V1CustomerGroupsIdPutRequest,
    V1CustomerGroupsPostRequest,
    V1CustomersConfirmPostRequest,
    V1CustomersCustomerIdPutRequest,
    V1CustomersEmailActivatePutRequest,
    V1CustomersIsEmailAvailablePostRequest,
    V1CustomersMeActivatePutRequest,
    V1CustomersMePasswordPutRequest,
    V1CustomersMePutRequest,
    V1CustomersPasswordPutRequest,
    V1CustomersPostRequest,
    V1CustomersResetPasswordPostRequest,
    V1CustomersValidatePutRequest,
    V1DirectoryCountriesGetResponse,
    V1EavAttributeSetsAttributeSetIdPutRequest,
    V1EavAttributeSetsPostRequest,
    V1GiftregistryMineEstimateShippingMethodsPostRequest,
    V1GiftregistryMineEstimateShippingMethodsPostResponse,
    V1GiftWrappingsPostRequest,
    V1GiftWrappingsWrappingIdPutRequest,
    V1GuestCartsCartIdBillingAddressPostRequest,
    V1GuestCartsCartIdCheckoutFieldsPostRequest,
    V1GuestCartsCartIdCollectionPointSearchRequestPutRequest,
    V1GuestCartsCartIdCollectionPointSearchResultGetResponse,
    V1GuestCartsCartIdCollectionPointSelectPostRequest,
    V1GuestCartsCartIdCollectTotalsPutRequest,
    V1GuestCartsCartIdDeliveryOptionPostRequest,
    V1GuestCartsCartIdEstimateShippingMethodsPostRequest,
    V1GuestCartsCartIdEstimateShippingMethodsPostResponse,
    V1GuestCartsCartIdGiftMessageItemIdPostRequest,
    V1GuestCartsCartIdGiftMessagePostRequest,
    V1GuestCartsCartIdItemsGetResponse,
    V1GuestCartsCartIdItemsItemIdPutRequest,
    V1GuestCartsCartIdItemsPostRequest,
    V1GuestCartsCartIdOrderPutRequest,
    V1GuestCartsCartIdPaymentInformationPostRequest,
    V1GuestCartsCartIdPaymentMethodsGetResponse,
    V1GuestCartsCartIdPutRequest,
    V1GuestCartsCartIdSelectedPaymentMethodPutRequest,
    V1GuestCartsCartIdSetPaymentInformationPostRequest,
    V1GuestCartsCartIdShippingInformationPostRequest,
    V1GuestCartsCartIdShippingMethodsGetResponse,
    V1GuestCartsCartIdTotalsInformationPostRequest,
    V1GuestGiftregistryCartIdEstimateShippingMethodsPostRequest,
    V1GuestGiftregistryCartIdEstimateShippingMethodsPostResponse,
    V1HierarchyIdGetResponse,
    V1HierarchyMoveIdPutRequest,
    V1IntegrationAdminTokenPostRequest,
    V1IntegrationCustomerTokenPostRequest,
    V1InvoiceInvoiceIdRefundPostRequest,
    V1InvoicesCommentsPostRequest,
    V1InvoicesPostRequest,
    V1ModulesGetResponse,
    V1NegotiableCartsCartIdBillingAddressPostRequest,
    V1NegotiableCartsCartIdEstimateShippingMethodsByAddressIdPostRequest,
    V1NegotiableCartsCartIdEstimateShippingMethodsByAddressIdPostResponse,
    V1NegotiableCartsCartIdEstimateShippingMethodsPostRequest,
    V1NegotiableCartsCartIdEstimateShippingMethodsPostResponse,
    V1NegotiableCartsCartIdGiftCardsPostRequest,
    V1NegotiableCartsCartIdPaymentInformationPostRequest,
    V1NegotiableCartsCartIdSetPaymentInformationPostRequest,
    V1NegotiableCartsCartIdShippingInformationPostRequest,
    V1NegotiableQuoteAttachmentContentGetResponse,
    V1NegotiableQuoteDeclinePostRequest,
    V1NegotiableQuotePricesUpdatedPostRequest,
    V1NegotiableQuoteQuoteIdCommentsGetResponse,
    V1NegotiableQuoteQuoteIdPutRequest,
    V1NegotiableQuoteQuoteIdShippingMethodPutRequest,
    V1NegotiableQuoteRequestPostRequest,
    V1NegotiableQuoteSubmitToCustomerPostRequest,
    V1OrderOrderIdInvoicePostRequest,
    V1OrderOrderIdRefundPostRequest,
    V1OrderOrderIdShipPostRequest,
    V1OrdersCreatePutRequest,
    V1OrdersIdCommentsPostRequest,
    V1OrdersParentIdPutRequest,
    V1OrdersPostRequest,
    V1ProductsAttributesAttributeCodeOptionsGetResponse,
    V1ProductsAttributesAttributeCodeOptionsPostRequest,
    V1ProductsAttributesAttributeCodePutRequest,
    V1ProductsAttributeSetsAttributeSetIdAttributesGetResponse,
    V1ProductsAttributeSetsAttributeSetIdGroupsPutRequest,
    V1ProductsAttributeSetsAttributeSetIdPutRequest,
    V1ProductsAttributeSetsAttributesPostRequest,
    V1ProductsAttributeSetsGroupsPostRequest,
    V1ProductsAttributeSetsPostRequest,
    V1ProductsAttributesPostRequest,
    V1ProductsAttributesTypesGetResponse,
    V1ProductsBasePricesInformationPostRequest,
    V1ProductsBasePricesInformationPostResponse,
    V1ProductsBasePricesPostRequest,
    V1ProductsBasePricesPostResponse,
    V1ProductsCostDeletePostRequest,
    V1ProductsCostInformationPostRequest,
    V1ProductsCostInformationPostResponse,
    V1ProductsCostPostRequest,
    V1ProductsCostPostResponse,
    V1ProductsLinksTypeAttributesGetResponse,
    V1ProductsLinksTypesGetResponse,
    V1ProductsMediaTypesAttributeSetNameGetResponse,
    V1ProductsOptionsOptionIdPutRequest,
    V1ProductsOptionsPostRequest,
    V1ProductsOptionsTypesGetResponse,
    V1ProductsPostRequest,
    V1ProductsProductSkuStockItemsItemIdPutRequest,
    V1ProductsSkuDownloadableLinksGetResponse,
    V1ProductsSkuDownloadableLinksIdPutRequest,
    V1ProductsSkuDownloadableLinksPostRequest,
    V1ProductsSkuDownloadableLinksSamplesGetResponse,
    V1ProductsSkuDownloadableLinksSamplesIdPutRequest,
    V1ProductsSkuDownloadableLinksSamplesPostRequest,
    V1ProductsSkuGroupPricesCustomerGroupIdTiersGetResponse,
    V1ProductsSkuLinksPostRequest,
    V1ProductsSkuLinksPutRequest,
    V1ProductsSkuLinksTypeGetResponse,
    V1ProductsSkuMediaEntryIdPutRequest,
    V1ProductsSkuMediaGetResponse,
    V1ProductsSkuMediaPostRequest,
    V1ProductsSkuOptionsGetResponse,
    V1ProductsSkuPutRequest,
    V1ProductsSkuWebsitesPostRequest,
    V1ProductsSkuWebsitesPutRequest,
    V1ProductsSpecialPriceDeletePostRequest,
    V1ProductsSpecialPriceDeletePostResponse,
    V1ProductsSpecialPriceInformationPostRequest,
    V1ProductsSpecialPriceInformationPostResponse,
    V1ProductsSpecialPricePostRequest,
    V1ProductsSpecialPricePostResponse,
    V1ProductsTierPricesDeletePostRequest,
    V1ProductsTierPricesDeletePostResponse,
    V1ProductsTierPricesInformationPostRequest,
    V1ProductsTierPricesInformationPostResponse,
    V1ProductsTierPricesPostRequest,
    V1ProductsTierPricesPostResponse,
    V1ProductsTierPricesPutRequest,
    V1ProductsTierPricesPutResponse,
    V1ProductsTypesGetResponse,
    V1RequisitionListsPostRequest,
    V1ReturnsAttributeMetadataCustomGetResponse,
    V1ReturnsAttributeMetadataFormFormCodeGetResponse,
    V1ReturnsAttributeMetadataGetResponse,
    V1ReturnsIdCommentsPostRequest,
    V1ReturnsIdDeleteRequest,
    V1ReturnsIdPutRequest,
    V1ReturnsIdTrackingNumbersPostRequest,
    V1ReturnsPostRequest,
    V1SalesRulesPostRequest,
    V1SalesRulesRuleIdPutRequest,
    V1SharedCatalogIdAssignCategoriesPostRequest,
    V1SharedCatalogIdAssignProductsPostRequest,
    V1SharedCatalogIdCategoriesGetResponse,
    V1SharedCatalogIdProductsGetResponse,
    V1SharedCatalogIdPutRequest,
    V1SharedCatalogIdUnassignCategoriesPostRequest,
    V1SharedCatalogIdUnassignProductsPostRequest,
    V1SharedCatalogPostRequest,
    V1SharedCatalogSharedCatalogIdAssignCompaniesPostRequest,
    V1SharedCatalogSharedCatalogIdUnassignCompaniesPostRequest,
    V1ShipmentIdCommentsPostRequest,
    V1ShipmentPostRequest,
    V1ShipmentTrackPostRequest,
    V1StoreStoreConfigsGetResponse,
    V1StoreStoreGroupsGetResponse,
    V1StoreStoreViewsGetResponse,
    V1StoreWebsitesGetResponse,
    V1TaxClassesClassIdPutRequest,
    V1TaxClassesPostRequest,
    V1TaxRatesPostRequest,
    V1TaxRatesPutRequest,
    V1TaxRulesPostRequest,
    V1TaxRulesPutRequest,
    V1TeamCompanyIdPostRequest,
    V1TeamTeamIdPutRequest,
    V1TemandoRmaRmaIdShipmentsPutRequest,
    V1WorldpayGuestCartsCartIdPaymentInformationPostRequest,
)

app = MCPProxy(
    description='Magento Commerce is the leading provider of open omnichannel innovation.',
    title='Magento B2B',
    version='2.2.10',
    servers=[{'url': 'https://example.com/rest/default'}],
)


@app.delete(
    '/V1/addresses/{addressId}',
    description=""" Delete customer address by ID. """,
    tags=['customer_address_handling', 'billing_address_operations'],
)
def customer_address_repository_v1_delete_by_id_delete(
    address_id: int = Path(..., alias='addressId')
):
    """
    addresses/{addressId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/amazon-billing-address/{amazonOrderReferenceId}',
    tags=[
        'amazon_address_handling',
        'billing_address_operations',
        'customer_address_handling',
    ],
)
def amazon_payment_address_management_v1_get_billing_address_put(
    amazon_order_reference_id: str = Path(..., alias='amazonOrderReferenceId'),
    body: V1AmazonBillingAddressAmazonOrderReferenceIdPutRequest = None,
):
    """
    amazon-billing-address/{amazonOrderReferenceId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/amazon-shipping-address/{amazonOrderReferenceId}',
    tags=['amazon_address_handling', 'customer_address_handling'],
)
def amazon_payment_address_management_v1_get_shipping_address_put(
    amazon_order_reference_id: str = Path(..., alias='amazonOrderReferenceId'),
    body: V1AmazonShippingAddressAmazonOrderReferenceIdPutRequest = None,
):
    """
    amazon-shipping-address/{amazonOrderReferenceId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/amazon/order-ref',
    tags=['amazon_address_handling', 'order_processing_operations'],
)
def remove_amazon_order_reference():
    """
    amazon/order-ref
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/V1/analytics/link', tags=['customer_metadata_handling', 'cart_operations'])
def analytics_link_provider_v1_get_get():
    """
    analytics/link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/attributeMetadata/customer',
    description=""" Get all attribute metadata. """,
    tags=['customer_metadata_handling', 'attribute_metadata_handling'],
)
def customer_customer_metadata_v1_get_all_attributes_metadata_get():
    """
    attributeMetadata/customer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/attributeMetadata/customer/attribute/{attributeCode}',
    description=""" Retrieve attribute metadata. """,
    tags=['customer_metadata_handling', 'attribute_metadata_handling'],
)
def customer_customer_metadata_v1_get_attribute_metadata_get(
    attribute_code: str = Path(..., alias='attributeCode')
):
    """
    attributeMetadata/customer/attribute/{attributeCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/attributeMetadata/customer/custom',
    description=""" Get custom attributes metadata for the given data interface. """,
    tags=['customer_metadata_handling', 'attribute_metadata_handling'],
)
def customer_customer_metadata_v1_get_custom_attributes_metadata_get(
    data_interface_name: Optional[str] = Query(None, alias='dataInterfaceName')
):
    """
    attributeMetadata/customer/custom
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/attributeMetadata/customer/form/{formCode}',
    description=""" Retrieve all attributes filtered by form code """,
    tags=['customer_metadata_handling', 'attribute_metadata_handling'],
)
def customer_customer_metadata_v1_get_attributes_get(
    form_code: str = Path(..., alias='formCode')
):
    """
    attributeMetadata/customer/form/{formCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/attributeMetadata/customerAddress',
    description=""" Get all attribute metadata. """,
    tags=[
        'customer_address_handling',
        'customer_metadata_handling',
        'attribute_metadata_handling',
    ],
)
def customer_address_metadata_v1_get_all_attributes_metadata_get():
    """
    attributeMetadata/customerAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/attributeMetadata/customerAddress/attribute/{attributeCode}',
    description=""" Retrieve attribute metadata. """,
    tags=[
        'customer_address_handling',
        'customer_metadata_handling',
        'attribute_metadata_handling',
    ],
)
def customer_address_metadata_v1_get_attribute_metadata_get(
    attribute_code: str = Path(..., alias='attributeCode')
):
    """
    attributeMetadata/customerAddress/attribute/{attributeCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/attributeMetadata/customerAddress/custom',
    description=""" Get custom attributes metadata for the given data interface. """,
    tags=[
        'customer_metadata_handling',
        'customer_address_handling',
        'attribute_metadata_handling',
    ],
)
def customer_address_metadata_v1_get_custom_attributes_metadata_get(
    data_interface_name: Optional[str] = Query(None, alias='dataInterfaceName')
):
    """
    attributeMetadata/customerAddress/custom
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/attributeMetadata/customerAddress/form/{formCode}',
    description=""" Retrieve all attributes filtered by form code """,
    tags=[
        'customer_address_handling',
        'customer_metadata_handling',
        'attribute_metadata_handling',
    ],
)
def customer_address_metadata_v1_get_attributes_get(
    form_code: str = Path(..., alias='formCode')
):
    """
    attributeMetadata/customerAddress/form/{formCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/bulk/{bulkUuid}/detailed-status',
    description=""" Get Bulk summary data with list of operations items full data. """,
    tags=['bulk_operation_tracking'],
)
def get_bulk_detailed_status_by_uuid(bulk_uuid: str = Path(..., alias='bulkUuid')):
    """
    bulk/{bulkUuid}/detailed-status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/bulk/{bulkUuid}/operation-status/{status}',
    description=""" Get operations count by bulk uuid and status. """,
    tags=['bulk_operation_tracking'],
)
def get_bulk_operation_status_count(
    bulk_uuid: str = Path(..., alias='bulkUuid'), status: int = ...
):
    """
    bulk/{bulkUuid}/operation-status/{status}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/bulk/{bulkUuid}/status',
    description=""" Get Bulk summary data with list of operations items short data. """,
    tags=['bulk_operation_tracking'],
)
def asynchronous_operations_bulk_status_v1_get_bulk_short_status_get(
    bulk_uuid: str = Path(..., alias='bulkUuid')
):
    """
    bulk/{bulkUuid}/status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/bundle-products/options/add',
    description=""" Add new option for bundle product """,
    tags=['bundle_product_handling'],
)
def bundle_product_option_management_v1_save_post(
    body: V1BundleProductsOptionsAddPostRequest = None,
):
    """
    bundle-products/options/add
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/bundle-products/options/types',
    description=""" Get all types for options for bundle products """,
    tags=['bundle_product_handling'],
)
def bundle_product_option_type_list_v1_get_items_get():
    """
    bundle-products/options/types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/bundle-products/options/{optionId}',
    description=""" Add new option for bundle product """,
    tags=['bundle_product_handling'],
)
def bundle_product_option_management_v1_save_put(
    option_id: str = Path(..., alias='optionId'),
    body: V1BundleProductsOptionsOptionIdPutRequest = None,
):
    """
    bundle-products/options/{optionId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/bundle-products/{productSku}/children',
    description=""" Get all children for Bundle product """,
    tags=['bundle_product_handling'],
)
def bundle_product_link_management_v1_get_children_get(
    product_sku: str = Path(..., alias='productSku'),
    option_id: Optional[int] = Query(None, alias='optionId'),
):
    """
    bundle-products/{productSku}/children
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/V1/bundle-products/{sku}/links/{id}', tags=['bundle_product_handling'])
def bundle_product_link_management_v1_save_child_put(
    sku: str, id: str = ..., body: V1BundleProductsSkuLinksIdPutRequest = None
):
    """
    bundle-products/{sku}/links/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/bundle-products/{sku}/links/{optionId}',
    description=""" Add child product to specified Bundle option by product sku """,
    tags=['bundle_product_handling'],
)
def bundle_product_link_management_v1_add_child_by_product_sku_post(
    sku: str,
    option_id: int = Path(..., alias='optionId'),
    body: V1BundleProductsSkuLinksOptionIdPostRequest = None,
):
    """
    bundle-products/{sku}/links/{optionId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/bundle-products/{sku}/options/all',
    description=""" Get all options for bundle product """,
    tags=['bundle_product_handling'],
)
def bundle_product_option_repository_v1_get_list_get(sku: str):
    """
    bundle-products/{sku}/options/all
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/bundle-products/{sku}/options/{optionId}',
    description=""" Remove bundle option """,
    tags=['bundle_product_handling'],
)
def bundle_product_option_repository_v1_delete_by_id_delete(
    sku: str, option_id: int = Path(..., alias='optionId')
):
    """
    bundle-products/{sku}/options/{optionId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/bundle-products/{sku}/options/{optionId}',
    description=""" Get option for bundle product """,
    tags=['bundle_product_handling'],
)
def bundle_product_option_repository_v1_get_get(
    sku: str, option_id: int = Path(..., alias='optionId')
):
    """
    bundle-products/{sku}/options/{optionId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/bundle-products/{sku}/options/{optionId}/children/{childSku}',
    description=""" Remove product from Bundle product option """,
    tags=['bundle_product_handling'],
)
def bundle_product_link_management_v1_remove_child_delete(
    sku: str,
    option_id: int = Path(..., alias='optionId'),
    child_sku: str = Path(..., alias='childSku'),
):
    """
    bundle-products/{sku}/options/{optionId}/children/{childSku}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/',
    description=""" Creates an empty cart and quote for a guest. """,
    tags=['cart_operations', 'guest_cart_operations', 'guest_cart_item_manager'],
)
def quote_cart_management_v1_create_empty_cart_post():
    """
    carts/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}',
    tags=['guest_cart_operations', 'gift_card_handling', 'guest_cart_item_manager'],
)
def check_guest_cart_gift_card(
    cart_id: str = Path(..., alias='cartId'),
    gift_card_code: str = Path(..., alias='giftCardCode'),
):
    """
    carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/guest-carts/{cartId}/giftCards',
    tags=['guest_cart_operations', 'gift_card_handling', 'gift_management'],
)
def add_gift_card_to_guest_cart(
    cart_id: str = Path(..., alias='cartId'),
    body: V1CartsGuestCartsCartIdGiftCardsPostRequest = None,
):
    """
    carts/guest-carts/{cartId}/giftCards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/carts/guest-carts/{cartId}/giftCards/{giftCardCode}',
    description=""" Remove GiftCard Account entity """,
    tags=['guest_cart_operations', 'gift_card_handling', 'gift_management'],
)
def delete_guest_cart_gift_card_by_code(
    cart_id: str = Path(..., alias='cartId'),
    gift_card_code: str = Path(..., alias='giftCardCode'),
):
    """
    carts/guest-carts/{cartId}/giftCards/{giftCardCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/licence',
    description=""" Lists active checkout agreements. """,
    tags=['cart_operations', 'billing_address_operations', 'guest_cart_operations'],
)
def get_cart_licence_info():
    """
    carts/licence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine',
    description=""" Returns information for the cart for a specified customer. """,
    tags=['cart_operations', 'cart_item_operations', 'cart_details_operations'],
)
def quote_cart_management_v1_get_cart_for_customer_get():
    """
    carts/mine
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine',
    description=""" Creates an empty cart and quote for a specified customer if customer does not have a cart yet. """,
    tags=['cart_operations', 'cart_item_operations', 'guest_cart_operations'],
)
def quote_cart_management_v1_create_empty_cart_for_customer_post():
    """
    carts/mine
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/mine',
    description=""" Save quote """,
    tags=['cart_operations', 'customer_metadata_handling'],
)
def quote_cart_repository_v1_save_put(body: V1CartsMinePutRequest = None):
    """
    carts/mine
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/balance/apply',
    description=""" Apply store credit. """,
    tags=['customer_balance_operations', 'cart_operations', 'guest_cart_operations'],
)
def customer_balance_balance_management_from_quote_v1_apply_post():
    """
    carts/mine/balance/apply
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/balance/unapply',
    description=""" Unapply store credit. """,
    tags=['customer_balance_operations', 'cart_operations'],
)
def customer_balance_balance_management_from_quote_v1_unapply_post():
    """
    carts/mine/balance/unapply
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/billing-address',
    description=""" Returns the billing address for a specified quote. """,
    tags=[
        'customer_address_handling',
        'billing_address_operations',
        'guest_cart_billing_operations',
    ],
)
def quote_billing_address_management_v1_get_get():
    """
    carts/mine/billing-address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/billing-address',
    description=""" Assigns a specified billing address to a specified cart. """,
    tags=[
        'customer_address_handling',
        'billing_address_operations',
        'guest_cart_billing_operations',
    ],
)
def quote_billing_address_management_v1_assign_post(
    body: V1CartsMineBillingAddressPostRequest = None,
):
    """
    carts/mine/billing-address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/checkGiftCard/{giftCardCode}',
    tags=['gift_card_handling', 'cart_operations', 'gift_management'],
)
def check_gift_card_status_by_code(
    gift_card_code: str = Path(..., alias='giftCardCode')
):
    """
    carts/mine/checkGiftCard/{giftCardCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/checkout-fields',
    tags=[
        'checkout_options_management',
        'cart_operations',
        'billing_address_operations',
    ],
)
def update_cart_checkout_fields(body: V1CartsMineCheckoutFieldsPostRequest = None):
    """
    carts/mine/checkout-fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/mine/collect-totals',
    description=""" Set shipping/billing methods and additional data for cart and collect totals. """,
    tags=[
        'cart_operations',
        'customer_balance_operations',
        'shipping_information_operations',
        'billing_address_operations',
    ],
)
def quote_cart_total_management_v1_collect_totals_put(
    body: V1CartsMineCollectTotalsPutRequest = None,
):
    """
    carts/mine/collect-totals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/carts/mine/collection-point/search-request',
    tags=['collection_point_handler', 'cart_operations'],
)
def delete_cart_collection_point_search_request():
    """
    carts/mine/collection-point/search-request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/mine/collection-point/search-request',
    tags=['collection_point_handler', 'guest_cart_collection_point_handler'],
)
def save_collection_point_search_request(
    body: V1CartsMineCollectionPointSearchRequestPutRequest = None,
):
    """
    carts/mine/collection-point/search-request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/collection-point/search-result',
    tags=[
        'collection_point_handler',
        'guest_cart_collection_point_handler',
        'cart_operations',
    ],
)
def search_collection_points_for_cart():
    """
    carts/mine/collection-point/search-result
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/collection-point/select',
    tags=[
        'collection_point_handler',
        'cart_operations',
        'guest_cart_collection_point_handler',
    ],
)
def select_collection_point_for_cart(
    body: V1CartsMineCollectionPointSelectPostRequest = None,
):
    """
    carts/mine/collection-point/select
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/carts/mine/coupons',
    description=""" Deletes a coupon from a specified cart. """,
    tags=['coupon_handling', 'cart_operations'],
)
def quote_coupon_management_v1_remove_delete():
    """
    carts/mine/coupons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/coupons',
    description=""" Returns information for a coupon in a specified cart. """,
    tags=['coupon_handling', 'cart_operations'],
)
def quote_coupon_management_v1_get_get():
    """
    carts/mine/coupons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/mine/coupons/{couponCode}',
    description=""" Adds a coupon by code to a specified cart. """,
    tags=['coupon_handling', 'cart_operations'],
)
def quote_coupon_management_v1_set_put(
    coupon_code: str = Path(..., alias='couponCode')
):
    """
    carts/mine/coupons/{couponCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/delivery-option',
    description=""" Handle selected delivery option. """,
    tags=[
        'cart_operations',
        'shipping_information_management',
        'guest_cart_delivery_options',
    ],
)
def save_cart_delivery_option(body: V1CartsMineDeliveryOptionPostRequest = None):
    """
    carts/mine/delivery-option
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/estimate-shipping-methods',
    description=""" Estimate shipping by address and return list of available shipping methods """,
    tags=[
        'cart_operations',
        'shipping_information_management',
        'shipping_information_operations',
    ],
)
def quote_shipment_estimation_v1_estimate_by_extended_address_post(
    body: V1CartsMineEstimateShippingMethodsPostRequest = None,
):
    """
    carts/mine/estimate-shipping-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/estimate-shipping-methods-by-address-id',
    description=""" Estimate shipping """,
    tags=['cart_operations', 'shipping_information_management'],
)
def quote_shipping_method_management_v1_estimate_by_address_id_post(
    body: V1CartsMineEstimateShippingMethodsByAddressIdPostRequest = None,
):
    """
    carts/mine/estimate-shipping-methods-by-address-id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/gift-message',
    description=""" Return the gift message for a specified order. """,
    tags=['gift_message_handler', 'guest_cart_gift_message_handler', 'gift_management'],
)
def gift_message_cart_repository_v1_get_get():
    """
    carts/mine/gift-message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/gift-message',
    description=""" Set the gift message for an entire order. """,
    tags=['gift_message_handler', 'gift_management'],
)
def gift_message_cart_repository_v1_save_post(
    body: V1CartsMineGiftMessagePostRequest = None,
):
    """
    carts/mine/gift-message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/gift-message/{itemId}',
    description=""" Return the gift message for a specified item in a specified shopping cart. """,
    tags=['gift_message_handler', 'guest_cart_gift_message_handler', 'gift_management'],
)
def gift_message_item_repository_v1_get_get(item_id: int = Path(..., alias='itemId')):
    """
    carts/mine/gift-message/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/gift-message/{itemId}',
    description=""" Set the gift message for a specified item in a specified shopping cart. """,
    tags=['gift_message_handler', 'cart_operations', 'guest_cart_item_manager'],
)
def gift_message_item_repository_v1_save_post(
    item_id: int = Path(..., alias='itemId'),
    body: V1CartsMineGiftMessageItemIdPostRequest = None,
):
    """
    carts/mine/gift-message/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/giftCards',
    tags=['gift_card_handling', 'gift_management', 'cart_operations'],
)
def save_gift_card_for_cart(body: V1CartsMineGiftCardsPostRequest = None):
    """
    carts/mine/giftCards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/carts/mine/giftCards/{giftCardCode}',
    description=""" Remove GiftCard Account entity """,
    tags=['gift_card_handling', 'gift_management'],
)
def delete_gift_card_by_code(gift_card_code: str = Path(..., alias='giftCardCode')):
    """
    carts/mine/giftCards/{giftCardCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/items',
    description=""" Lists items that are assigned to a specified cart. """,
    tags=['cart_operations', 'cart_item_operations', 'guest_cart_item_manager'],
)
def quote_cart_item_repository_v1_get_list_get():
    """
    carts/mine/items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/items',
    description=""" Add/update the specified cart item. """,
    tags=['cart_operations', 'cart_item_operations'],
)
def quote_cart_item_repository_v1_save_post(body: V1CartsMineItemsPostRequest = None):
    """
    carts/mine/items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/carts/mine/items/{itemId}',
    description=""" Removes the specified item from the specified cart. """,
    tags=['cart_item_operations', 'cart_operations'],
)
def quote_cart_item_repository_v1_delete_by_id_delete(
    item_id: int = Path(..., alias='itemId')
):
    """
    carts/mine/items/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/mine/items/{itemId}',
    description=""" Add/update the specified cart item. """,
    tags=['cart_item_operations', 'cart_operations'],
)
def quote_cart_item_repository_v1_save_put(
    item_id: str = Path(..., alias='itemId'),
    body: V1CartsMineItemsItemIdPutRequest = None,
):
    """
    carts/mine/items/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/mine/order',
    description=""" Places an order for a specified cart. """,
    tags=['order_processing_operations', 'cart_operations'],
)
def quote_cart_management_v1_place_order_put(body: V1CartsMineOrderPutRequest = None):
    """
    carts/mine/order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/payment-information',
    description=""" Get payment information """,
    tags=[
        'payment_information_management',
        'order_processing_operations',
        'cart_operations',
    ],
)
def get_user_payment_info():
    """
    carts/mine/payment-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/payment-information',
    description=""" Set payment information and place order for a specified cart. """,
    tags=[
        'payment_information_management',
        'checkout_options_management',
        'cart_operations',
        'guest_cart_operations',
    ],
)
def save_payment_info_and_place_order(
    body: V1CartsMinePaymentInformationPostRequest = None,
):
    """
    carts/mine/payment-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/payment-methods',
    description=""" Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=[
        'cart_operations',
        'payment_information_management',
        'guest_cart_payment_operations',
    ],
)
def quote_payment_method_management_v1_get_list_get():
    """
    carts/mine/payment-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/selected-payment-method',
    description=""" Returns the payment method for a specified shopping cart. """,
    tags=[
        'cart_operations',
        'payment_information_management',
        'billing_address_operations',
    ],
)
def quote_payment_method_management_v1_get_get():
    """
    carts/mine/selected-payment-method
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/mine/selected-payment-method',
    description=""" Adds a specified payment method to a specified shopping cart. """,
    tags=['cart_operations', 'payment_information_management'],
)
def quote_payment_method_management_v1_set_put(
    body: V1CartsMineSelectedPaymentMethodPutRequest = None,
):
    """
    carts/mine/selected-payment-method
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/set-payment-information',
    description=""" Set payment information for a specified cart. """,
    tags=[
        'cart_operations',
        'payment_information_management',
        'guest_cart_payment_operations',
    ],
)
def set_payment_information_for_cart(
    body: V1CartsMineSetPaymentInformationPostRequest = None,
):
    """
    carts/mine/set-payment-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/shipping-information',
    tags=[
        'shipping_information_management',
        'shipping_information_operations',
        'cart_operations',
    ],
)
def save_shipping_information_for_cart(
    body: V1CartsMineShippingInformationPostRequest = None,
):
    """
    carts/mine/shipping-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/shipping-methods',
    description=""" Lists applicable shipping methods for a specified quote. """,
    tags=[
        'cart_operations',
        'shipping_information_management',
        'shipping_payment_method_management',
    ],
)
def quote_shipping_method_management_v1_get_list_get():
    """
    carts/mine/shipping-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/mine/totals',
    description=""" Returns quote totals data for a specified cart. """,
    tags=['cart_operations', 'cart_details_operations', 'cart_item_operations'],
)
def quote_cart_total_repository_v1_get_get():
    """
    carts/mine/totals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/mine/totals-information',
    description=""" Calculate quote totals based on address and shipping method. """,
    tags=['cart_operations', 'cart_details_operations'],
)
def checkout_totals_information_management_v1_calculate_post(
    body: V1CartsMineTotalsInformationPostRequest = None,
):
    """
    carts/mine/totals-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/search',
    description=""" Enables administrative users to list carts that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#CartRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['cart_operations', 'search_functionality'],
)
def quote_cart_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    carts/search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/{cartId}',
    description=""" Enables an administrative user to return information for a specified cart. """,
    tags=['cart_operations', 'cart_details_operations', 'guest_cart_operations'],
)
def quote_cart_repository_v1_get_get(cart_id: int = Path(..., alias='cartId')):
    """
    carts/{cartId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/{cartId}',
    description=""" Assigns a specified customer to a specified shopping cart. """,
    tags=['cart_operations', 'cart_details_operations'],
)
def quote_cart_management_v1_assign_customer_put(
    cart_id: int = Path(..., alias='cartId'), body: V1CartsCartIdPutRequest = None
):
    """
    carts/{cartId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/{cartId}/billing-address',
    description=""" Returns the billing address for a specified quote. """,
    tags=[
        'billing_address_operations',
        'cart_operations',
        'guest_cart_billing_operations',
    ],
)
def get__v1_carts__cart_id_billing_address(cart_id: int = Path(..., alias='cartId')):
    """
    carts/{cartId}/billing-address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/{cartId}/billing-address',
    description=""" Assigns a specified billing address to a specified cart. """,
    tags=[
        'billing_address_operations',
        'guest_cart_billing_operations',
        'cart_operations',
    ],
)
def post__v1_carts__cart_id_billing_address(
    cart_id: int = Path(..., alias='cartId'),
    body: V1CartsCartIdBillingAddressPostRequest = None,
):
    """
    carts/{cartId}/billing-address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/carts/{cartId}/coupons',
    description=""" Deletes a coupon from a specified cart. """,
    tags=['cart_operations', 'coupon_handling'],
)
def delete__v1_carts__cart_id_coupons(cart_id: int = Path(..., alias='cartId')):
    """
    carts/{cartId}/coupons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/{cartId}/coupons',
    description=""" Returns information for a coupon in a specified cart. """,
    tags=['coupon_handling', 'cart_operations'],
)
def get__v1_carts__cart_id_coupons(cart_id: int = Path(..., alias='cartId')):
    """
    carts/{cartId}/coupons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/{cartId}/coupons/{couponCode}',
    description=""" Adds a coupon by code to a specified cart. """,
    tags=['coupon_handling', 'cart_operations', 'guest_cart_coupon_manager'],
)
def put__v1_carts__cart_id_coupons__coupon_code(
    cart_id: int = Path(..., alias='cartId'),
    coupon_code: str = Path(..., alias='couponCode'),
):
    """
    carts/{cartId}/coupons/{couponCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/{cartId}/estimate-shipping-methods',
    description=""" Estimate shipping by address and return list of available shipping methods """,
    tags=[
        'shipping_information_management',
        'cart_operations',
        'shipping_information_operations',
    ],
)
def post__v1_carts__cart_id_estimate_shipping_methods(
    cart_id: str = Path(..., alias='cartId'),
    body: V1CartsCartIdEstimateShippingMethodsPostRequest = None,
):
    """
    carts/{cartId}/estimate-shipping-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/{cartId}/estimate-shipping-methods-by-address-id',
    description=""" Estimate shipping """,
    tags=[
        'shipping_information_management',
        'cart_operations',
        'shipping_information_operations',
    ],
)
def post__v1_carts__cart_id_estimate_shipping_methods_by_address_id(
    cart_id: int = Path(..., alias='cartId'),
    body: V1CartsCartIdEstimateShippingMethodsByAddressIdPostRequest = None,
):
    """
    carts/{cartId}/estimate-shipping-methods-by-address-id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/{cartId}/gift-message',
    description=""" Return the gift message for a specified order. """,
    tags=['gift_message_handler', 'gift_management'],
)
def get__v1_carts__cart_id_gift_message(cart_id: int = Path(..., alias='cartId')):
    """
    carts/{cartId}/gift-message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/{cartId}/gift-message',
    description=""" Set the gift message for an entire order. """,
    tags=['gift_message_handler', 'gift_management', 'guest_cart_gift_message_handler'],
)
def post__v1_carts__cart_id_gift_message(
    cart_id: int = Path(..., alias='cartId'),
    body: V1CartsCartIdGiftMessagePostRequest = None,
):
    """
    carts/{cartId}/gift-message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/{cartId}/gift-message/{itemId}',
    description=""" Return the gift message for a specified item in a specified shopping cart. """,
    tags=['gift_message_handler', 'cart_operations', 'guest_cart_operations'],
)
def get__v1_carts__cart_id_gift_message__item_id(
    cart_id: int = Path(..., alias='cartId'), item_id: int = Path(..., alias='itemId')
):
    """
    carts/{cartId}/gift-message/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/{cartId}/gift-message/{itemId}',
    description=""" Set the gift message for a specified item in a specified shopping cart. """,
    tags=['gift_message_handler', 'cart_operations', 'guest_cart_operations'],
)
def post__v1_carts__cart_id_gift_message__item_id(
    cart_id: int = Path(..., alias='cartId'),
    item_id: int = Path(..., alias='itemId'),
    body: V1CartsCartIdGiftMessageItemIdPostRequest = None,
):
    """
    carts/{cartId}/gift-message/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/{cartId}/giftCards',
    tags=[
        'gift_card_handling',
        'cart_operations',
        'guest_cart_operations',
        'gift_management',
    ],
)
def save_gift_card_for_cart_id(
    cart_id: int = Path(..., alias='cartId'),
    body: V1CartsCartIdGiftCardsPutRequest = None,
):
    """
    carts/{cartId}/giftCards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/carts/{cartId}/giftCards/{giftCardCode}',
    description=""" Remove GiftCard Account entity """,
    tags=['gift_card_handling', 'cart_operations', 'gift_management'],
)
def delete__v1_carts__cart_id_gift_cards__gift_card_code(
    cart_id: int = Path(..., alias='cartId'),
    gift_card_code: str = Path(..., alias='giftCardCode'),
):
    """
    carts/{cartId}/giftCards/{giftCardCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/{cartId}/items',
    description=""" Lists items that are assigned to a specified cart. """,
    tags=['cart_operations', 'cart_item_operations'],
)
def get__v1_carts__cart_id_items(cart_id: int = Path(..., alias='cartId')):
    """
    carts/{cartId}/items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/carts/{cartId}/items/{itemId}',
    description=""" Removes the specified item from the specified cart. """,
    tags=['cart_operations', 'cart_item_operations', 'guest_cart_item_manager'],
)
def delete__v1_carts__cart_id_items__item_id(
    cart_id: int = Path(..., alias='cartId'), item_id: int = Path(..., alias='itemId')
):
    """
    carts/{cartId}/items/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/{cartId}/items/{itemId}',
    description=""" Add/update the specified cart item. """,
    tags=['cart_operations', 'cart_item_operations', 'guest_cart_item_manager'],
)
def put__v1_carts__cart_id_items__item_id(
    cart_id: str = Path(..., alias='cartId'),
    item_id: str = Path(..., alias='itemId'),
    body: V1CartsCartIdItemsItemIdPutRequest = None,
):
    """
    carts/{cartId}/items/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/{cartId}/order',
    description=""" Places an order for a specified cart. """,
    tags=[
        'order_processing_operations',
        'cart_operations',
        'billing_address_operations',
        'payment_information_management',
    ],
)
def put__v1_carts__cart_id_order(
    cart_id: int = Path(..., alias='cartId'), body: V1CartsCartIdOrderPutRequest = None
):
    """
    carts/{cartId}/order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/{cartId}/payment-methods',
    description=""" Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['cart_operations', 'payment_information_management', 'guest_cart_operations'],
)
def get__v1_carts__cart_id_payment_methods(cart_id: int = Path(..., alias='cartId')):
    """
    carts/{cartId}/payment-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/{cartId}/selected-payment-method',
    description=""" Returns the payment method for a specified shopping cart. """,
    tags=['cart_operations', 'payment_information_management'],
)
def get__v1_carts__cart_id_selected_payment_method(
    cart_id: int = Path(..., alias='cartId')
):
    """
    carts/{cartId}/selected-payment-method
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/carts/{cartId}/selected-payment-method',
    description=""" Adds a specified payment method to a specified shopping cart. """,
    tags=[
        'cart_operations',
        'payment_information_management',
        'guest_cart_payment_operations',
    ],
)
def put__v1_carts__cart_id_selected_payment_method(
    cart_id: int = Path(..., alias='cartId'),
    body: V1CartsCartIdSelectedPaymentMethodPutRequest = None,
):
    """
    carts/{cartId}/selected-payment-method
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/{cartId}/shipping-information',
    tags=[
        'shipping_information_management',
        'shipping_information_operations',
        'cart_operations',
    ],
)
def post__v1_carts__cart_id_shipping_information(
    cart_id: int = Path(..., alias='cartId'),
    body: V1CartsCartIdShippingInformationPostRequest = None,
):
    """
    carts/{cartId}/shipping-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/{cartId}/shipping-methods',
    description=""" Lists applicable shipping methods for a specified quote. """,
    tags=[
        'cart_operations',
        'shipping_information_management',
        'shipping_information_operations',
    ],
)
def get__v1_carts__cart_id_shipping_methods(cart_id: int = Path(..., alias='cartId')):
    """
    carts/{cartId}/shipping-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/{cartId}/totals',
    description=""" Returns quote totals data for a specified cart. """,
    tags=['cart_operations', 'cart_details_operations', 'guest_cart_operations'],
)
def get__v1_carts__cart_id_totals(cart_id: int = Path(..., alias='cartId')):
    """
    carts/{cartId}/totals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/{cartId}/totals-information',
    description=""" Calculate quote totals based on address and shipping method. """,
    tags=['cart_operations', 'cart_details_operations'],
)
def post__v1_carts__cart_id_totals_information(
    cart_id: int = Path(..., alias='cartId'),
    body: V1CartsCartIdTotalsInformationPostRequest = None,
):
    """
    carts/{cartId}/totals-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/carts/{quoteId}/giftCards',
    description=""" Return GiftCard Account cards """,
    tags=['gift_card_handling', 'cart_operations', 'gift_management'],
)
def get_gift_cards_by_quote_id(quote_id: int = Path(..., alias='quoteId')):
    """
    carts/{quoteId}/giftCards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/carts/{quoteId}/items',
    description=""" Add/update the specified cart item. """,
    tags=['cart_operations', 'cart_item_operations', 'guest_cart_operations'],
)
def post__v1_carts__quote_id_items(
    quote_id: str = Path(..., alias='quoteId'),
    body: V1CartsQuoteIdItemsPostRequest = None,
):
    """
    carts/{quoteId}/items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/categories',
    description=""" Retrieve list of categories """,
    tags=['catalog_management'],
)
def catalog_category_management_v1_get_tree_get(
    root_category_id: Optional[int] = Query(None, alias='rootCategoryId'),
    depth: Optional[int] = None,
):
    """
    categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/categories',
    description=""" Create category service """,
    tags=[
        'customer_metadata_handling',
        'customer_account_handling',
        'customer_validation_operations',
        'customer_repository_management',
    ],
)
def catalog_category_repository_v1_save_post(body: V1CategoriesPostRequest = None):
    """
    categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/categories/attributes',
    description=""" Retrieve all attributes for entity type """,
    tags=['search_functionality', 'catalog_management'],
)
def catalog_category_attribute_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    categories/attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/categories/attributes/{attributeCode}',
    description=""" Retrieve specific attribute """,
    tags=[
        'customer_metadata_handling',
        'customer_group_management',
        'catalog_management',
        'catalog_attribute_management',
        'attribute_metadata_handling',
    ],
)
def catalog_category_attribute_repository_v1_get_get(
    attribute_code: str = Path(..., alias='attributeCode')
):
    """
    categories/attributes/{attributeCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/categories/attributes/{attributeCode}/options',
    description=""" Retrieve list of attribute options """,
    tags=[
        'catalog_management',
        'product_attribute_option_management',
        'attribute_metadata_handling',
    ],
)
def catalog_category_attribute_option_management_v1_get_items_get(
    attribute_code: str = Path(..., alias='attributeCode')
):
    """
    categories/attributes/{attributeCode}/options
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/categories/list',
    description=""" Get category list """,
    tags=['search_functionality', 'catalog_management'],
)
def catalog_category_list_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    categories/list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/categories/{categoryId}',
    description=""" Delete category by identifier """,
    tags=['catalog_management'],
)
def catalog_category_repository_v1_delete_by_identifier_delete(
    category_id: int = Path(..., alias='categoryId')
):
    """
    categories/{categoryId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/categories/{categoryId}',
    description=""" Get info about category by category id """,
    tags=['catalog_management', 'customer_metadata_handling'],
)
def catalog_category_repository_v1_get_get(
    category_id: int = Path(..., alias='categoryId'),
    store_id: Optional[int] = Query(None, alias='storeId'),
):
    """
    categories/{categoryId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/categories/{categoryId}/move',
    description=""" Move category """,
    tags=['catalog_management'],
)
def catalog_category_management_v1_move_put(
    category_id: int = Path(..., alias='categoryId'),
    body: V1CategoriesCategoryIdMovePutRequest = None,
):
    """
    categories/{categoryId}/move
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/categories/{categoryId}/products',
    description=""" Get products assigned to category """,
    tags=[
        'catalog_management',
        'product_repository_functionality',
        'product_management_operations',
    ],
)
def catalog_category_link_management_v1_get_assigned_products_get(
    category_id: int = Path(..., alias='categoryId')
):
    """
    categories/{categoryId}/products
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/categories/{categoryId}/products',
    description=""" Assign a product to the required category """,
    tags=['catalog_management', 'product_management_operations'],
)
def catalog_category_link_repository_v1_save_post(
    category_id: str = Path(..., alias='categoryId'),
    body: V1CategoriesCategoryIdProductsPostRequest = None,
):
    """
    categories/{categoryId}/products
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/categories/{categoryId}/products',
    description=""" Assign a product to the required category """,
    tags=['catalog_management', 'product_management_operations'],
)
def catalog_category_link_repository_v1_save_put(
    category_id: str = Path(..., alias='categoryId'),
    body: V1CategoriesCategoryIdProductsPutRequest = None,
):
    """
    categories/{categoryId}/products
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/categories/{categoryId}/products/{sku}',
    description=""" Remove the product assignment from the category by category id and sku """,
    tags=['catalog_management', 'product_management_operations'],
)
def catalog_category_link_repository_v1_delete_by_ids_delete(
    category_id: str = Path(..., alias='categoryId'), sku: str = ...
):
    """
    categories/{categoryId}/products/{sku}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/categories/{id}',
    description=""" Create category service """,
    tags=['catalog_management'],
)
def catalog_category_repository_v1_save_put(
    id: str, body: V1CategoriesIdPutRequest = None
):
    """
    categories/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/cmsBlock', description=""" Save block. """, tags=['cms_content_management']
)
def cms_block_repository_v1_save_post(body: V1CmsBlockPostRequest = None):
    """
    cmsBlock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/cmsBlock/search',
    description=""" Retrieve blocks matching the specified criteria. """,
    tags=['search_functionality', 'cms_content_management'],
)
def cms_block_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    cmsBlock/search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/cmsBlock/{blockId}',
    description=""" Delete block by ID. """,
    tags=['cms_content_management'],
)
def cms_block_repository_v1_delete_by_id_delete(
    block_id: int = Path(..., alias='blockId')
):
    """
    cmsBlock/{blockId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/cmsBlock/{blockId}',
    description=""" Retrieve block. """,
    tags=['cms_content_management'],
)
def cms_block_repository_v1_get_by_id_get(block_id: int = Path(..., alias='blockId')):
    """
    cmsBlock/{blockId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/cmsBlock/{id}',
    description=""" Save block. """,
    tags=['cms_content_management'],
)
def cms_block_repository_v1_save_put(id: str, body: V1CmsBlockIdPutRequest = None):
    """
    cmsBlock/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/cmsPage', description=""" Save page. """, tags=['cms_content_management']
)
def cms_page_repository_v1_save_post(body: V1CmsPagePostRequest = None):
    """
    cmsPage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/cmsPage/search',
    description=""" Retrieve pages matching the specified criteria. """,
    tags=['search_functionality', 'cms_content_management'],
)
def cms_page_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    cmsPage/search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/cmsPage/{id}', description=""" Save page. """, tags=['cms_content_management']
)
def cms_page_repository_v1_save_put(id: str, body: V1CmsPageIdPutRequest = None):
    """
    cmsPage/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/cmsPage/{pageId}',
    description=""" Delete page by ID. """,
    tags=['cms_content_management'],
)
def cms_page_repository_v1_delete_by_id_delete(
    page_id: int = Path(..., alias='pageId')
):
    """
    cmsPage/{pageId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/cmsPage/{pageId}',
    description=""" Retrieve page. """,
    tags=['cms_content_management'],
)
def cms_page_repository_v1_get_by_id_get(page_id: int = Path(..., alias='pageId')):
    """
    cmsPage/{pageId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/company/',
    description=""" Returns the list of companies. The list is an array of objects, and detailed information about item attributes might not be included. """,
    tags=['company_operations', 'search_functionality'],
)
def company_company_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    company/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/company/',
    description=""" Create or update a company account. """,
    tags=[
        'company_operations',
        'role_management_in_companies',
        'company_credit_handling',
        'company_hierarchy_operations',
    ],
)
def company_company_repository_v1_save_post(body: V1CompanyPostRequest = None):
    """
    company/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/company/assignRoles',
    description=""" Change a role for a company user. """,
    tags=['company_operations', 'role_management_in_companies'],
)
def company_acl_v1_assign_roles_put(body: V1CompanyAssignRolesPutRequest = None):
    """
    company/assignRoles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/company/role/',
    description=""" Returns the list of roles and permissions for a specified company. """,
    tags=['company_operations', 'role_management_in_companies'],
)
def company_role_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    company/role/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/company/role/',
    description=""" Create or update a role for a selected company. """,
    tags=['company_operations', 'role_management_in_companies'],
)
def company_role_repository_v1_save_post(body: V1CompanyRolePostRequest = None):
    """
    company/role/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/company/role/{id}',
    description=""" Create or update a role for a selected company. """,
    tags=['company_operations', 'role_management_in_companies'],
)
def company_role_repository_v1_save_put(
    id: str, body: V1CompanyRoleIdPutRequest = None
):
    """
    company/role/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/company/role/{roleId}',
    description=""" Delete a role. """,
    tags=['role_management_in_companies', 'company_operations'],
)
def company_role_repository_v1_delete_delete(role_id: int = Path(..., alias='roleId')):
    """
    company/role/{roleId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/company/role/{roleId}',
    description=""" Returns the list of permissions for a specified role. """,
    tags=['role_management_in_companies', 'company_operations'],
)
def company_role_repository_v1_get_get(role_id: int = Path(..., alias='roleId')):
    """
    company/role/{roleId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/company/role/{roleId}/users',
    description=""" View the list of company users assigned to a specified role. """,
    tags=['role_management_in_companies', 'company_operations'],
)
def company_acl_v1_get_users_by_role_id_get(role_id: int = Path(..., alias='roleId')):
    """
    company/role/{roleId}/users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/company/{companyId}',
    description=""" Delete a company. Customers belonging to a company are not deleted with this request. """,
    tags=['company_operations', 'customer_metadata_handling'],
)
def company_company_repository_v1_delete_by_id_delete(
    company_id: int = Path(..., alias='companyId')
):
    """
    company/{companyId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/company/{companyId}',
    description=""" Returns company details. """,
    tags=['company_operations', 'customer_metadata_handling'],
)
def company_company_repository_v1_get_get(
    company_id: int = Path(..., alias='companyId')
):
    """
    company/{companyId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/company/{companyId}',
    description=""" Create or update a company account. """,
    tags=['company_operations'],
)
def company_company_repository_v1_save_put(
    company_id: str = Path(..., alias='companyId'),
    body: V1CompanyCompanyIdPutRequest = None,
):
    """
    company/{companyId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/companyCredits/',
    description=""" Returns the list of credits for specified companies. """,
    tags=['company_credit_handling'],
)
def company_credit_credit_limit_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    companyCredits/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/companyCredits/company/{companyId}',
    description=""" Returns data on the credit limit for a specified company. """,
    tags=['company_operations', 'company_credit_handling'],
)
def get_credit_by_company_id(company_id: int = Path(..., alias='companyId')):
    """
    companyCredits/company/{companyId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/companyCredits/history',
    description=""" Returns the credit history for one or more companies. """,
    tags=['company_credit_handling'],
)
def company_credit_credit_history_management_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    companyCredits/history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/companyCredits/history/{historyId}',
    description=""" Update the PO Number and/or comment for a Reimburse transaction. """,
    tags=['company_credit_handling'],
)
def company_credit_credit_history_management_v1_update_put(
    history_id: int = Path(..., alias='historyId'),
    body: V1CompanyCreditsHistoryHistoryIdPutRequest = None,
):
    """
    companyCredits/history/{historyId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/companyCredits/{creditId}',
    description=""" Returns data on the credit limit for a specified credit limit ID. """,
    tags=['company_credit_handling'],
)
def company_credit_credit_limit_repository_v1_get_get(
    credit_id: int = Path(..., alias='creditId'), reload: Optional[bool] = None
):
    """
    companyCredits/{creditId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/companyCredits/{creditId}/decreaseBalance',
    description=""" Decreases the company credit with an Update, Reimburse, or Purchase transaction. This transaction increases company's outstanding balance and decreases company's available credit. """,
    tags=['customer_balance_operations', 'company_credit_handling'],
)
def company_credit_credit_balance_management_v1_decrease_post(
    credit_id: int = Path(..., alias='creditId'),
    body: V1CompanyCreditsCreditIdDecreaseBalancePostRequest = None,
):
    """
    companyCredits/{creditId}/decreaseBalance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/companyCredits/{creditId}/increaseBalance',
    description=""" Increases the company credit with an Allocate, Update, Refund, Revert, or Reimburse transaction. This transaction decreases company's outstanding balance and increases company's available credit. """,
    tags=['customer_balance_operations', 'company_credit_handling'],
)
def company_credit_credit_balance_management_v1_increase_post(
    credit_id: int = Path(..., alias='creditId'),
    body: V1CompanyCreditsCreditIdIncreaseBalancePostRequest = None,
):
    """
    companyCredits/{creditId}/increaseBalance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/companyCredits/{id}',
    description=""" Update the following company credit attributes: credit currency, credit limit and setting to exceed credit. """,
    tags=['company_credit_handling'],
)
def company_credit_credit_limit_repository_v1_save_put(
    id: str, body: V1CompanyCreditsIdPutRequest = None
):
    """
    companyCredits/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/configurable-products/variation',
    description=""" Generate variation based on same product """,
    tags=['configurable_product_manager', 'configurable_option_manager'],
)
def generate_variation_for_configurable_product(
    body: V1ConfigurableProductsVariationPutRequest = None,
):
    """
    configurable-products/variation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/configurable-products/{sku}/child',
    tags=['configurable_product_manager', 'configurable_option_manager'],
)
def configurable_product_link_management_v1_add_child_post(
    sku: str, body: V1ConfigurableProductsSkuChildPostRequest = None
):
    """
    configurable-products/{sku}/child
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/configurable-products/{sku}/children',
    description=""" Get all children for Configurable product """,
    tags=['configurable_product_manager', 'configurable_option_manager'],
)
def configurable_product_link_management_v1_get_children_get(sku: str):
    """
    configurable-products/{sku}/children
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/configurable-products/{sku}/children/{childSku}',
    description=""" Remove configurable product option """,
    tags=['configurable_product_manager', 'configurable_option_manager'],
)
def configurable_product_link_management_v1_remove_child_delete(
    sku: str, child_sku: str = Path(..., alias='childSku')
):
    """
    configurable-products/{sku}/children/{childSku}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/configurable-products/{sku}/options',
    description=""" Save option """,
    tags=['configurable_product_manager', 'configurable_option_manager'],
)
def configurable_product_option_repository_v1_save_post(
    sku: str, body: V1ConfigurableProductsSkuOptionsPostRequest = None
):
    """
    configurable-products/{sku}/options
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/configurable-products/{sku}/options/all',
    description=""" Get all options for configurable product """,
    tags=['configurable_product_manager', 'configurable_option_manager'],
)
def configurable_product_option_repository_v1_get_list_get(sku: str):
    """
    configurable-products/{sku}/options/all
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/configurable-products/{sku}/options/{id}',
    description=""" Remove option from configurable product """,
    tags=['configurable_product_manager', 'configurable_option_manager'],
)
def configurable_product_option_repository_v1_delete_by_id_delete(
    sku: str, id: int = ...
):
    """
    configurable-products/{sku}/options/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/configurable-products/{sku}/options/{id}',
    description=""" Get option for configurable product """,
    tags=['configurable_product_manager', 'configurable_option_manager'],
)
def configurable_product_option_repository_v1_get_get(sku: str, id: int = ...):
    """
    configurable-products/{sku}/options/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/configurable-products/{sku}/options/{id}',
    description=""" Save option """,
    tags=['configurable_product_manager', 'configurable_option_manager'],
)
def configurable_product_option_repository_v1_save_put(
    sku: str, id: str = ..., body: V1ConfigurableProductsSkuOptionsIdPutRequest = None
):
    """
    configurable-products/{sku}/options/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/V1/coupons', description=""" Save a coupon. """, tags=['coupon_handling'])
def sales_rule_coupon_repository_v1_save_post(body: V1CouponsPostRequest = None):
    """
    coupons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/coupons/deleteByCodes',
    description=""" Delete coupon by coupon codes. """,
    tags=['coupon_handling'],
)
def sales_rule_coupon_management_v1_delete_by_codes_post(
    body: V1CouponsDeleteByCodesPostRequest = None,
):
    """
    coupons/deleteByCodes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/coupons/deleteByIds',
    description=""" Delete coupon by coupon ids. """,
    tags=['coupon_handling', 'bulk_operation_tracking'],
)
def sales_rule_coupon_management_v1_delete_by_ids_post(
    body: V1CouponsDeleteByIdsPostRequest = None,
):
    """
    coupons/deleteByIds
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/coupons/generate',
    description=""" Generate coupon for a rule """,
    tags=['coupon_handling'],
)
def sales_rule_coupon_management_v1_generate_post(
    body: V1CouponsGeneratePostRequest = None,
):
    """
    coupons/generate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/coupons/search',
    description=""" Retrieve a coupon using the specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#CouponRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['coupon_handling', 'guest_cart_coupon_manager', 'search_functionality'],
)
def sales_rule_coupon_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    coupons/search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/coupons/{couponId}',
    description=""" Delete coupon by coupon id. """,
    tags=['coupon_handling'],
)
def sales_rule_coupon_repository_v1_delete_by_id_delete(
    coupon_id: int = Path(..., alias='couponId')
):
    """
    coupons/{couponId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/coupons/{couponId}',
    description=""" Get coupon by coupon id. """,
    tags=['coupon_handling'],
)
def sales_rule_coupon_repository_v1_get_by_id_get(
    coupon_id: int = Path(..., alias='couponId')
):
    """
    coupons/{couponId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/coupons/{couponId}',
    description=""" Save a coupon. """,
    tags=['coupon_handling'],
)
def sales_rule_coupon_repository_v1_save_put(
    coupon_id: str = Path(..., alias='couponId'),
    body: V1CouponsCouponIdPutRequest = None,
):
    """
    coupons/{couponId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/creditmemo',
    description=""" Performs persist operations for a specified credit memo. """,
    tags=['creditmemo_operations'],
)
def sales_creditmemo_repository_v1_save_post(body: V1CreditmemoPostRequest = None):
    """
    creditmemo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/creditmemo/refund',
    description=""" Prepare creditmemo to refund and save it. """,
    tags=['creditmemo_operations', 'order_processing_operations'],
)
def sales_creditmemo_management_v1_refund_post(
    body: V1CreditmemoRefundPostRequest = None,
):
    """
    creditmemo/refund
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/creditmemo/{id}',
    description=""" Loads a specified credit memo. """,
    tags=['creditmemo_operations'],
)
def sales_creditmemo_repository_v1_get_get(id: int):
    """
    creditmemo/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/creditmemo/{id}',
    description=""" Cancels a specified credit memo. """,
    tags=['creditmemo_operations'],
)
def sales_creditmemo_management_v1_cancel_put(id: int):
    """
    creditmemo/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/creditmemo/{id}/comments',
    description=""" Lists comments for a specified credit memo. """,
    tags=['creditmemo_operations'],
)
def sales_creditmemo_management_v1_get_comments_list_get(id: int):
    """
    creditmemo/{id}/comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/creditmemo/{id}/comments',
    description=""" Performs persist operations for a specified entity. """,
    tags=['creditmemo_operations', 'rma_comment_handling'],
)
def sales_creditmemo_comment_repository_v1_save_post(
    id: str, body: V1CreditmemoIdCommentsPostRequest = None
):
    """
    creditmemo/{id}/comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/creditmemo/{id}/emails',
    description=""" Emails a user a specified credit memo. """,
    tags=['creditmemo_operations'],
)
def sales_creditmemo_management_v1_notify_post(id: int):
    """
    creditmemo/{id}/emails
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/creditmemos',
    description=""" Lists credit memos that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#CreditmemoRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['creditmemo_operations', 'sales_order_management'],
)
def sales_creditmemo_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    creditmemos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/customerGroups',
    description=""" Save customer group. """,
    tags=['customer_group_management', 'customer_metadata_handling'],
)
def customer_group_repository_v1_save_post(body: V1CustomerGroupsPostRequest = None):
    """
    customerGroups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customerGroups/default',
    description=""" Get default customer group. """,
    tags=['customer_group_management'],
)
def customer_group_management_v1_get_default_group_get(
    store_id: Optional[int] = Query(None, alias='storeId')
):
    """
    customerGroups/default
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/customerGroups/default/{id}',
    description=""" Set system default customer group. """,
    tags=[
        'customer_group_management',
        'customer_repository_management',
        'customer_validation_operations',
    ],
)
def customer_customer_group_config_v1_set_default_customer_group_put(id: int):
    """
    customerGroups/default/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customerGroups/default/{storeId}',
    description=""" Get default customer group. """,
    tags=['customer_group_management'],
)
def get__v1_customer_groups_default__store_id(
    store_id: int = Path(..., alias='storeId')
):
    """
    customerGroups/default/{storeId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customerGroups/search',
    description=""" Retrieve customer groups. The list of groups can be filtered to exclude the NOT_LOGGED_IN group using the first parameter and/or it can be filtered by tax class. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#GroupRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['customer_group_management', 'search_functionality'],
)
def customer_group_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    customerGroups/search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/customerGroups/{id}',
    description=""" Delete customer group by ID. """,
    tags=['customer_group_management', 'customer_metadata_handling'],
)
def customer_group_repository_v1_delete_by_id_delete(id: int):
    """
    customerGroups/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customerGroups/{id}',
    description=""" Get customer group by group ID. """,
    tags=['customer_group_management', 'customer_metadata_handling'],
)
def customer_group_repository_v1_get_by_id_get(id: int):
    """
    customerGroups/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/customerGroups/{id}',
    description=""" Save customer group. """,
    tags=['customer_group_management', 'customer_metadata_handling'],
)
def customer_group_repository_v1_save_put(
    id: str, body: V1CustomerGroupsIdPutRequest = None
):
    """
    customerGroups/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customerGroups/{id}/permissions',
    description=""" Check if customer group can be deleted. """,
    tags=['customer_group_management', 'role_management_in_companies'],
)
def customer_group_management_v1_is_readonly_get(id: int):
    """
    customerGroups/{id}/permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/customers',
    description=""" Create customer account. Perform necessary business operations like sending email. """,
    tags=[
        'customer_repository_management',
        'customer_account_handling',
        'customer_validation_operations',
    ],
)
def customer_account_management_v1_create_account_post(
    body: V1CustomersPostRequest = None,
):
    """
    customers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customers/addresses/{addressId}',
    description=""" Retrieve customer address. """,
    tags=[
        'customer_address_handling',
        'billing_address_operations',
        'guest_cart_billing_operations',
    ],
)
def customer_address_repository_v1_get_by_id_get(
    address_id: int = Path(..., alias='addressId')
):
    """
    customers/addresses/{addressId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/customers/confirm',
    description=""" Resend confirmation email. """,
    tags=[
        'customer_account_handling',
        'customer_metadata_handling',
        'customer_validation_operations',
    ],
)
def customer_account_management_v1_resend_confirmation_post(
    body: V1CustomersConfirmPostRequest = None,
):
    """
    customers/confirm
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/customers/isEmailAvailable',
    description=""" Check if given email is associated with a customer account in given website. """,
    tags=['customer_account_handling', 'customer_validation_operations'],
)
def customer_account_management_v1_is_email_available_post(
    body: V1CustomersIsEmailAvailablePostRequest = None,
):
    """
    customers/isEmailAvailable
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customers/me',
    description=""" Get customer by Customer ID. """,
    tags=[
        'customer_metadata_handling',
        'customer_account_handling',
        'customer_repository_management',
        'customer_validation_operations',
    ],
)
def customer_customer_repository_v1_get_by_id_get():
    """
    customers/me
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/customers/me',
    description=""" Create or update a customer. """,
    tags=[
        'customer_account_handling',
        'customer_metadata_handling',
        'customer_repository_management',
    ],
)
def customer_customer_repository_v1_save_put(body: V1CustomersMePutRequest = None):
    """
    customers/me
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/customers/me/activate',
    description=""" Activate a customer account using a key that was sent in a confirmation email. """,
    tags=[
        'customer_account_handling',
        'customer_validation_operations',
        'customer_metadata_handling',
        'customer_repository_management',
    ],
)
def customer_account_management_v1_activate_by_id_put(
    body: V1CustomersMeActivatePutRequest = None,
):
    """
    customers/me/activate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customers/me/billingAddress',
    description=""" Retrieve default billing address for the given customerId. """,
    tags=[
        'customer_address_handling',
        'billing_address_operations',
        'guest_cart_billing_operations',
    ],
)
def customer_account_management_v1_get_default_billing_address_get():
    """
    customers/me/billingAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/customers/me/password',
    description=""" Change customer password. """,
    tags=['customer_account_handling', 'customer_metadata_handling'],
)
def customer_account_management_v1_change_password_by_id_put(
    body: V1CustomersMePasswordPutRequest = None,
):
    """
    customers/me/password
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customers/me/shippingAddress',
    description=""" Retrieve default shipping address for the given customerId. """,
    tags=[
        'customer_address_handling',
        'shipping_information_management',
        'customer_metadata_handling',
    ],
)
def customer_account_management_v1_get_default_shipping_address_get():
    """
    customers/me/shippingAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/customers/password',
    description=""" Send an email to the customer with a password reset link. """,
    tags=['customer_account_handling', 'customer_metadata_handling'],
)
def customer_account_management_v1_initiate_password_reset_put(
    body: V1CustomersPasswordPutRequest = None,
):
    """
    customers/password
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/customers/resetPassword',
    description=""" Reset customer password. """,
    tags=[
        'customer_account_handling',
        'customer_validation_operations',
        'customer_repository_management',
    ],
)
def customer_account_management_v1_reset_password_post(
    body: V1CustomersResetPasswordPostRequest = None,
):
    """
    customers/resetPassword
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customers/search',
    description=""" Retrieve customers which match a specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#CustomerRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['search_functionality', 'customer_metadata_handling'],
)
def customer_customer_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    customers/search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/customers/validate',
    description=""" Validate customer data. """,
    tags=['customer_validation_operations'],
)
def customer_account_management_v1_validate_put(
    body: V1CustomersValidatePutRequest = None,
):
    """
    customers/validate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/customers/{customerId}',
    description=""" Delete customer by Customer ID. """,
    tags=[
        'customer_metadata_handling',
        'customer_repository_management',
        'customer_account_handling',
    ],
)
def customer_customer_repository_v1_delete_by_id_delete(
    customer_id: int = Path(..., alias='customerId')
):
    """
    customers/{customerId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customers/{customerId}',
    description=""" Get customer by Customer ID. """,
    tags=[
        'customer_repository_management',
        'customer_metadata_handling',
        'customer_account_handling',
    ],
)
def get__v1_customers__customer_id(customer_id: int = Path(..., alias='customerId')):
    """
    customers/{customerId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/customers/{customerId}',
    description=""" Create or update a customer. """,
    tags=[
        'customer_repository_management',
        'customer_metadata_handling',
        'customer_account_handling',
    ],
)
def put__v1_customers__customer_id(
    customer_id: str = Path(..., alias='customerId'),
    body: V1CustomersCustomerIdPutRequest = None,
):
    """
    customers/{customerId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customers/{customerId}/billingAddress',
    description=""" Retrieve default billing address for the given customerId. """,
    tags=['customer_address_handling', 'billing_address_operations'],
)
def get__v1_customers__customer_id_billing_address(
    customer_id: int = Path(..., alias='customerId')
):
    """
    customers/{customerId}/billingAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/customers/{customerId}/carts',
    description=""" Creates an empty cart and quote for a specified customer if customer does not have a cart yet. """,
    tags=[
        'cart_operations',
        'cart_details_operations',
        'customer_repository_management',
    ],
)
def post__v1_customers__customer_id_carts(
    customer_id: int = Path(..., alias='customerId')
):
    """
    customers/{customerId}/carts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customers/{customerId}/confirm',
    description=""" Gets the account confirmation status. """,
    tags=['customer_account_handling', 'customer_validation_operations'],
)
def customer_account_management_v1_get_confirmation_status_get(
    customer_id: int = Path(..., alias='customerId')
):
    """
    customers/{customerId}/confirm
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}',
    description=""" Check if password reset token is valid. """,
    tags=[
        'customer_account_handling',
        'customer_validation_operations',
        'customer_repository_management',
    ],
)
def validate_customer_password_reset_token(
    customer_id: int = Path(..., alias='customerId'),
    reset_password_link_token: str = Path(..., alias='resetPasswordLinkToken'),
):
    """
    customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customers/{customerId}/permissions/readonly',
    description=""" Check if customer can be deleted. """,
    tags=[
        'customer_metadata_handling',
        'customer_account_handling',
        'customer_repository_management',
    ],
)
def customer_account_management_v1_is_readonly_get(
    customer_id: int = Path(..., alias='customerId')
):
    """
    customers/{customerId}/permissions/readonly
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/customers/{customerId}/shippingAddress',
    description=""" Retrieve default shipping address for the given customerId. """,
    tags=['customer_address_handling', 'shipping_information_management'],
)
def get__v1_customers__customer_id_shipping_address(
    customer_id: int = Path(..., alias='customerId')
):
    """
    customers/{customerId}/shippingAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/customers/{email}/activate',
    description=""" Activate a customer account using a key that was sent in a confirmation email. """,
    tags=[
        'customer_account_handling',
        'customer_validation_operations',
        'customer_metadata_handling',
        'customer_repository_management',
    ],
)
def customer_account_management_v1_activate_put(
    email: str, body: V1CustomersEmailActivatePutRequest = None
):
    """
    customers/{email}/activate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/directory/countries',
    description=""" Get all countries and regions information for the store. """,
    tags=['directory_information_provider'],
)
def directory_country_information_acquirer_v1_get_countries_info_get():
    """
    directory/countries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/directory/countries/{countryId}',
    description=""" Get country and region information for the store. """,
    tags=['directory_information_provider'],
)
def directory_country_information_acquirer_v1_get_country_info_get(
    country_id: str = Path(..., alias='countryId')
):
    """
    directory/countries/{countryId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/directory/currency',
    description=""" Get currency information for the store. """,
    tags=['directory_information_provider'],
)
def directory_currency_information_acquirer_v1_get_currency_info_get():
    """
    directory/currency
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/eav/attribute-sets',
    description=""" Create attribute set from data """,
    tags=['eav_attribute_set_handler', 'attribute_set_manager'],
)
def eav_attribute_set_management_v1_create_post(
    body: V1EavAttributeSetsPostRequest = None,
):
    """
    eav/attribute-sets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/eav/attribute-sets/list',
    description=""" Retrieve list of Attribute Sets This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#AttributeSetRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['eav_attribute_set_handler', 'attribute_set_manager', 'search_functionality'],
)
def eav_attribute_set_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    eav/attribute-sets/list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/eav/attribute-sets/{attributeSetId}',
    description=""" Remove attribute set by given ID """,
    tags=['eav_attribute_set_handler', 'attribute_set_manager'],
)
def eav_attribute_set_repository_v1_delete_by_id_delete(
    attribute_set_id: int = Path(..., alias='attributeSetId')
):
    """
    eav/attribute-sets/{attributeSetId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/eav/attribute-sets/{attributeSetId}',
    description=""" Retrieve attribute set information based on given ID """,
    tags=['eav_attribute_set_handler', 'attribute_set_manager'],
)
def eav_attribute_set_repository_v1_get_get(
    attribute_set_id: int = Path(..., alias='attributeSetId')
):
    """
    eav/attribute-sets/{attributeSetId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/eav/attribute-sets/{attributeSetId}',
    description=""" Save attribute set data """,
    tags=['eav_attribute_set_handler', 'attribute_set_manager'],
)
def eav_attribute_set_repository_v1_save_put(
    attribute_set_id: str = Path(..., alias='attributeSetId'),
    body: V1EavAttributeSetsAttributeSetIdPutRequest = None,
):
    """
    eav/attribute-sets/{attributeSetId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/gift-wrappings',
    description=""" Return list of gift wrapping data objects based on search criteria """,
    tags=['gift_wrapping_operations', 'gift_management'],
)
def gift_wrapping_wrapping_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    gift-wrappings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/gift-wrappings',
    description=""" Create/Update new gift wrapping with data object values """,
    tags=['gift_wrapping_operations'],
)
def gift_wrapping_wrapping_repository_v1_save_post(
    body: V1GiftWrappingsPostRequest = None,
):
    """
    gift-wrappings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/gift-wrappings/{id}',
    description=""" Delete gift wrapping """,
    tags=['gift_wrapping_operations'],
)
def gift_wrapping_wrapping_repository_v1_delete_by_id_delete(id: int):
    """
    gift-wrappings/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/gift-wrappings/{id}',
    description=""" Return data object for specified wrapping ID and store. """,
    tags=['gift_wrapping_operations'],
)
def gift_wrapping_wrapping_repository_v1_get_get(
    id: int, store_id: Optional[int] = Query(None, alias='storeId')
):
    """
    gift-wrappings/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/gift-wrappings/{wrappingId}',
    description=""" Create/Update new gift wrapping with data object values """,
    tags=['gift_wrapping_operations'],
)
def gift_wrapping_wrapping_repository_v1_save_put(
    wrapping_id: str = Path(..., alias='wrappingId'),
    body: V1GiftWrappingsWrappingIdPutRequest = None,
):
    """
    gift-wrappings/{wrappingId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/giftregistry/mine/estimate-shipping-methods',
    description=""" Estimate shipping """,
    tags=['shipping_information_management', 'shipping_information_operations'],
)
def estimate_shipping_methods_by_registry_id(
    body: V1GiftregistryMineEstimateShippingMethodsPostRequest = None,
):
    """
    giftregistry/mine/estimate-shipping-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts',
    description=""" Enable an customer or guest user to create an empty cart and quote for an anonymous customer. """,
    tags=[
        'guest_cart_operations',
        'guest_cart_item_manager',
        'guest_cart_billing_operations',
        'guest_cart_checkout_handler',
        'guest_cart_coupon_manager',
    ],
)
def quote_guest_cart_management_v1_create_empty_cart_post():
    """
    guest-carts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}',
    description=""" Enable a guest user to return information for a specified cart. """,
    tags=[
        'guest_cart_operations',
        'cart_operations',
        'guest_cart_billing_operations',
        'guest_cart_checkout_handler',
    ],
)
def quote_guest_cart_repository_v1_get_get(cart_id: str = Path(..., alias='cartId')):
    """
    guest-carts/{cartId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/guest-carts/{cartId}',
    description=""" Assign a specified customer to a specified shopping cart. """,
    tags=[
        'guest_cart_operations',
        'guest_cart_item_manager',
        'guest_cart_billing_operations',
        'guest_cart_checkout_handler',
        'guest_cart_coupon_manager',
    ],
)
def quote_guest_cart_management_v1_assign_customer_put(
    cart_id: str = Path(..., alias='cartId'), body: V1GuestCartsCartIdPutRequest = None
):
    """
    guest-carts/{cartId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}/billing-address',
    description=""" Return the billing address for a specified quote. """,
    tags=[
        'guest_cart_operations',
        'billing_address_operations',
        'guest_cart_billing_operations',
    ],
)
def quote_guest_billing_address_management_v1_get_get(
    cart_id: str = Path(..., alias='cartId')
):
    """
    guest-carts/{cartId}/billing-address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/billing-address',
    description=""" Assign a specified billing address to a specified cart. """,
    tags=[
        'customer_address_handling',
        'billing_address_operations',
        'guest_cart_billing_operations',
        'guest_cart_operations',
    ],
)
def quote_guest_billing_address_management_v1_assign_post(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdBillingAddressPostRequest = None,
):
    """
    guest-carts/{cartId}/billing-address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/checkout-fields',
    tags=[
        'guest_cart_operations',
        'checkout_options_management',
        'guest_cart_checkout_handler',
        'guest_cart_payment_operations',
    ],
)
def guest_cart_checkout_fields_update(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdCheckoutFieldsPostRequest = None,
):
    """
    guest-carts/{cartId}/checkout-fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/guest-carts/{cartId}/collect-totals',
    description=""" Set shipping/billing methods and additional data for cart and collect totals for guest. """,
    tags=[
        'guest_cart_operations',
        'cart_operations',
        'guest_cart_billing_operations',
        'guest_cart_checkout_handler',
    ],
)
def quote_guest_cart_total_management_v1_collect_totals_put(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdCollectTotalsPutRequest = None,
):
    """
    guest-carts/{cartId}/collect-totals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/guest-carts/{cartId}/collection-point/search-request',
    tags=[
        'guest_cart_operations',
        'collection_point_handler',
        'guest_cart_collection_point_handler',
    ],
)
def delete_guest_cart_collection_point_search_request(
    cart_id: str = Path(..., alias='cartId')
):
    """
    guest-carts/{cartId}/collection-point/search-request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/guest-carts/{cartId}/collection-point/search-request',
    tags=[
        'guest_cart_operations',
        'collection_point_handler',
        'guest_cart_collection_point_handler',
    ],
)
def save_guest_cart_collection_point_search(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdCollectionPointSearchRequestPutRequest = None,
):
    """
    guest-carts/{cartId}/collection-point/search-request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}/collection-point/search-result',
    tags=[
        'guest_cart_operations',
        'collection_point_handler',
        'guest_cart_collection_point_handler',
    ],
)
def search_collection_points_by_cart_id(cart_id: str = Path(..., alias='cartId')):
    """
    guest-carts/{cartId}/collection-point/search-result
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/collection-point/select',
    tags=[
        'guest_cart_operations',
        'collection_point_handler',
        'guest_cart_collection_point_handler',
    ],
)
def select_guest_cart_collection_point(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdCollectionPointSelectPostRequest = None,
):
    """
    guest-carts/{cartId}/collection-point/select
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/guest-carts/{cartId}/coupons',
    description=""" Delete a coupon from a specified cart. """,
    tags=['guest_cart_operations', 'guest_cart_coupon_manager'],
)
def quote_guest_coupon_management_v1_remove_delete(
    cart_id: str = Path(..., alias='cartId')
):
    """
    guest-carts/{cartId}/coupons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}/coupons',
    description=""" Return information for a coupon in a specified cart. """,
    tags=['guest_cart_coupon_manager', 'guest_cart_operations', 'coupon_handling'],
)
def quote_guest_coupon_management_v1_get_get(cart_id: str = Path(..., alias='cartId')):
    """
    guest-carts/{cartId}/coupons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/guest-carts/{cartId}/coupons/{couponCode}',
    description=""" Add a coupon by code to a specified cart. """,
    tags=['guest_cart_operations', 'coupon_handling', 'guest_cart_coupon_manager'],
)
def quote_guest_coupon_management_v1_set_put(
    cart_id: str = Path(..., alias='cartId'),
    coupon_code: str = Path(..., alias='couponCode'),
):
    """
    guest-carts/{cartId}/coupons/{couponCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/delivery-option',
    description=""" Handle selected delivery option. """,
    tags=['guest_cart_delivery_options', 'guest_cart_operations', 'cart_operations'],
)
def guest_cart_delivery_option_update(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdDeliveryOptionPostRequest = None,
):
    """
    guest-carts/{cartId}/delivery-option
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/estimate-shipping-methods',
    description=""" Estimate shipping by address and return list of available shipping methods """,
    tags=[
        'shipping_information_management',
        'guest_cart_operations',
        'shipping_information_operations',
    ],
)
def estimate_shipping_methods_for_cart(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdEstimateShippingMethodsPostRequest = None,
):
    """
    guest-carts/{cartId}/estimate-shipping-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}/gift-message',
    description=""" Return the gift message for a specified order. """,
    tags=['guest_cart_gift_message_handler', 'gift_message_handler', 'gift_management'],
)
def gift_message_guest_cart_repository_v1_get_get(
    cart_id: str = Path(..., alias='cartId')
):
    """
    guest-carts/{cartId}/gift-message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/gift-message',
    description=""" Set the gift message for an entire order. """,
    tags=[
        'guest_cart_gift_message_handler',
        'guest_cart_operations',
        'gift_message_handler',
    ],
)
def gift_message_guest_cart_repository_v1_save_post(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdGiftMessagePostRequest = None,
):
    """
    guest-carts/{cartId}/gift-message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}/gift-message/{itemId}',
    description=""" Return the gift message for a specified item in a specified shopping cart. """,
    tags=[
        'guest_cart_gift_message_handler',
        'gift_message_handler',
        'guest_cart_operations',
    ],
)
def gift_message_guest_item_repository_v1_get_get(
    cart_id: str = Path(..., alias='cartId'), item_id: int = Path(..., alias='itemId')
):
    """
    guest-carts/{cartId}/gift-message/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/gift-message/{itemId}',
    description=""" Set the gift message for a specified item in a specified shopping cart. """,
    tags=[
        'guest_cart_gift_message_handler',
        'guest_cart_operations',
        'guest_cart_item_manager',
    ],
)
def gift_message_guest_item_repository_v1_save_post(
    cart_id: str = Path(..., alias='cartId'),
    item_id: int = Path(..., alias='itemId'),
    body: V1GuestCartsCartIdGiftMessageItemIdPostRequest = None,
):
    """
    guest-carts/{cartId}/gift-message/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}/items',
    description=""" List items that are assigned to a specified cart. """,
    tags=['guest_cart_operations', 'cart_item_operations', 'guest_cart_item_manager'],
)
def quote_guest_cart_item_repository_v1_get_list_get(
    cart_id: str = Path(..., alias='cartId')
):
    """
    guest-carts/{cartId}/items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/items',
    description=""" Add/update the specified cart item. """,
    tags=['guest_cart_operations', 'cart_item_operations', 'guest_cart_item_manager'],
)
def quote_guest_cart_item_repository_v1_save_post(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdItemsPostRequest = None,
):
    """
    guest-carts/{cartId}/items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/guest-carts/{cartId}/items/{itemId}',
    description=""" Remove the specified item from the specified cart. """,
    tags=['guest_cart_operations', 'cart_item_operations', 'guest_cart_item_manager'],
)
def quote_guest_cart_item_repository_v1_delete_by_id_delete(
    cart_id: str = Path(..., alias='cartId'), item_id: int = Path(..., alias='itemId')
):
    """
    guest-carts/{cartId}/items/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/guest-carts/{cartId}/items/{itemId}',
    description=""" Add/update the specified cart item. """,
    tags=['guest_cart_operations', 'cart_item_operations', 'guest_cart_item_manager'],
)
def quote_guest_cart_item_repository_v1_save_put(
    cart_id: str = Path(..., alias='cartId'),
    item_id: str = Path(..., alias='itemId'),
    body: V1GuestCartsCartIdItemsItemIdPutRequest = None,
):
    """
    guest-carts/{cartId}/items/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/guest-carts/{cartId}/order',
    description=""" Place an order for a specified cart. """,
    tags=[
        'guest_cart_operations',
        'order_processing_operations',
        'guest_cart_payment_operations',
    ],
)
def quote_guest_cart_management_v1_place_order_put(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdOrderPutRequest = None,
):
    """
    guest-carts/{cartId}/order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}/payment-information',
    description=""" Get payment information """,
    tags=[
        'guest_cart_operations',
        'billing_address_operations',
        'payment_information_management',
        'guest_cart_payment_operations',
    ],
)
def get_guest_cart_payment_info(cart_id: str = Path(..., alias='cartId')):
    """
    guest-carts/{cartId}/payment-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/payment-information',
    description=""" Set payment information and place order for a specified cart. """,
    tags=[
        'guest_cart_operations',
        'payment_information_management',
        'guest_cart_payment_operations',
    ],
)
def save_guest_payment_info_and_place_order(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdPaymentInformationPostRequest = None,
):
    """
    guest-carts/{cartId}/payment-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}/payment-methods',
    description=""" List available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#GuestPaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=[
        'guest_cart_operations',
        'cart_operations',
        'payment_information_management',
        'guest_cart_payment_operations',
    ],
)
def quote_guest_payment_method_management_v1_get_list_get(
    cart_id: str = Path(..., alias='cartId')
):
    """
    guest-carts/{cartId}/payment-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}/selected-payment-method',
    description=""" Return the payment method for a specified shopping cart. """,
    tags=[
        'guest_cart_operations',
        'cart_operations',
        'payment_information_management',
        'guest_cart_payment_operations',
    ],
)
def quote_guest_payment_method_management_v1_get_get(
    cart_id: str = Path(..., alias='cartId')
):
    """
    guest-carts/{cartId}/selected-payment-method
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/guest-carts/{cartId}/selected-payment-method',
    description=""" Add a specified payment method to a specified shopping cart. """,
    tags=[
        'guest_cart_operations',
        'cart_operations',
        'payment_information_management',
        'guest_cart_payment_operations',
    ],
)
def quote_guest_payment_method_management_v1_set_put(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdSelectedPaymentMethodPutRequest = None,
):
    """
    guest-carts/{cartId}/selected-payment-method
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/set-payment-information',
    description=""" Set payment information for a specified cart. """,
    tags=[
        'guest_cart_operations',
        'cart_operations',
        'payment_information_management',
        'guest_cart_payment_operations',
    ],
)
def set_guest_cart_payment_info(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdSetPaymentInformationPostRequest = None,
):
    """
    guest-carts/{cartId}/set-payment-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/shipping-information',
    tags=[
        'guest_cart_operations',
        'cart_operations',
        'shipping_information_management',
        'shipping_information_operations',
    ],
)
def save_guest_shipping_info_for_cart(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdShippingInformationPostRequest = None,
):
    """
    guest-carts/{cartId}/shipping-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}/shipping-methods',
    description=""" List applicable shipping methods for a specified quote. """,
    tags=[
        'shipping_information_management',
        'cart_operations',
        'guest_cart_operations',
    ],
)
def quote_guest_shipping_method_management_v1_get_list_get(
    cart_id: str = Path(..., alias='cartId')
):
    """
    guest-carts/{cartId}/shipping-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/guest-carts/{cartId}/totals',
    description=""" Return quote totals data for a specified cart. """,
    tags=['guest_cart_operations', 'cart_operations', 'guest_cart_billing_operations'],
)
def quote_guest_cart_total_repository_v1_get_get(
    cart_id: str = Path(..., alias='cartId')
):
    """
    guest-carts/{cartId}/totals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-carts/{cartId}/totals-information',
    description=""" Calculate quote totals based on address and shipping method. """,
    tags=[
        'guest_cart_operations',
        'cart_operations',
        'guest_cart_billing_operations',
        'guest_cart_checkout_handler',
        'guest_cart_payment_operations',
    ],
)
def checkout_guest_totals_information_management_v1_calculate_post(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestCartsCartIdTotalsInformationPostRequest = None,
):
    """
    guest-carts/{cartId}/totals-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/guest-giftregistry/{cartId}/estimate-shipping-methods',
    description=""" Estimate shipping """,
    tags=[
        'shipping_information_management',
        'cart_operations',
        'guest_cart_operations',
    ],
)
def estimate_shipping_methods_by_cart_id(
    cart_id: str = Path(..., alias='cartId'),
    body: V1GuestGiftregistryCartIdEstimateShippingMethodsPostRequest = None,
):
    """
    guest-giftregistry/{cartId}/estimate-shipping-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/hierarchy/move/{id}',
    description=""" Moves teams and users within the company structure. """,
    tags=['company_hierarchy_operations'],
)
def company_company_hierarchy_v1_move_node_put(
    id: int, body: V1HierarchyMoveIdPutRequest = None
):
    """
    hierarchy/move/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/hierarchy/{id}',
    description=""" Returns the list of teams and company users in the company structure. """,
    tags=['customer_metadata_handling', 'company_hierarchy_operations'],
)
def company_company_hierarchy_v1_get_company_hierarchy_get(id: int):
    """
    hierarchy/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/integration/admin/token',
    description=""" Create access token for admin given the admin credentials. """,
    tags=['admin_token_generation'],
)
def create_admin_access_token(body: V1IntegrationAdminTokenPostRequest = None):
    """
    integration/admin/token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/integration/customer/token',
    description=""" Create access token for admin given the customer credentials. """,
    tags=[
        'customer_account_handling',
        'customer_repository_management',
        'customer_validation_operations',
    ],
)
def create_customer_access_token(body: V1IntegrationCustomerTokenPostRequest = None):
    """
    integration/customer/token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/invoice/{invoiceId}/refund',
    description=""" Create refund for invoice """,
    tags=[
        'creditmemo_operations',
        'invoice_management_operations',
        'order_processing_operations',
    ],
)
def sales_refund_invoice_v1_execute_post(
    invoice_id: int = Path(..., alias='invoiceId'),
    body: V1InvoiceInvoiceIdRefundPostRequest = None,
):
    """
    invoice/{invoiceId}/refund
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/invoices',
    description=""" Lists invoices that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#InvoiceRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['invoice_management_operations', 'sales_transaction_query_management'],
)
def sales_invoice_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    invoices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/invoices/',
    description=""" Performs persist operations for a specified invoice. """,
    tags=['invoice_management_operations'],
)
def sales_invoice_repository_v1_save_post(body: V1InvoicesPostRequest = None):
    """
    invoices/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/invoices/comments',
    description=""" Performs persist operations for a specified invoice comment. """,
    tags=['invoice_management_operations', 'rma_comment_handling'],
)
def sales_invoice_comment_repository_v1_save_post(
    body: V1InvoicesCommentsPostRequest = None,
):
    """
    invoices/comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/invoices/{id}',
    description=""" Loads a specified invoice. """,
    tags=['invoice_management_operations'],
)
def sales_invoice_repository_v1_get_get(id: int):
    """
    invoices/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/invoices/{id}/capture',
    description=""" Sets invoice capture. """,
    tags=['invoice_management_operations', 'order_processing_operations'],
)
def sales_invoice_management_v1_set_capture_post(id: int):
    """
    invoices/{id}/capture
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/invoices/{id}/comments',
    description=""" Lists comments for a specified invoice. """,
    tags=['invoice_management_operations'],
)
def sales_invoice_management_v1_get_comments_list_get(id: int):
    """
    invoices/{id}/comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/invoices/{id}/emails',
    description=""" Emails a user a specified invoice. """,
    tags=['invoice_management_operations'],
)
def sales_invoice_management_v1_notify_post(id: int):
    """
    invoices/{id}/emails
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/invoices/{id}/void',
    description=""" Voids a specified invoice. """,
    tags=['invoice_management_operations', 'order_processing_operations'],
)
def sales_invoice_management_v1_set_void_post(id: int):
    """
    invoices/{id}/void
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/modules',
    description=""" Returns an array of enabled modules """,
    tags=[
        'customer_address_handling',
        'customer_metadata_handling',
        'billing_address_operations',
        'cart_operations',
    ],
)
def backend_module_service_v1_get_modules_get():
    """
    modules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/negotiable-carts/{cartId}/billing-address',
    description=""" Returns the billing address for a specified quote. """,
    tags=[
        'billing_address_operations',
        'guest_cart_billing_operations',
        'negotiable_cart_operations',
    ],
)
def negotiable_quote_billing_address_management_v1_get_get(
    cart_id: int = Path(..., alias='cartId')
):
    """
    negotiable-carts/{cartId}/billing-address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/negotiable-carts/{cartId}/billing-address',
    description=""" Assigns a specified billing address to a specified cart. """,
    tags=[
        'billing_address_operations',
        'negotiable_cart_operations',
        'guest_cart_billing_operations',
    ],
)
def negotiable_quote_billing_address_management_v1_assign_post(
    cart_id: int = Path(..., alias='cartId'),
    body: V1NegotiableCartsCartIdBillingAddressPostRequest = None,
):
    """
    negotiable-carts/{cartId}/billing-address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/negotiable-carts/{cartId}/coupons',
    description=""" Deletes a coupon from a specified cart. """,
    tags=['coupon_handling', 'negotiable_cart_operations'],
)
def negotiable_quote_coupon_management_v1_remove_delete(
    cart_id: int = Path(..., alias='cartId')
):
    """
    negotiable-carts/{cartId}/coupons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/negotiable-carts/{cartId}/coupons/{couponCode}',
    description=""" Adds a coupon by code to a specified cart. """,
    tags=['negotiable_cart_operations', 'coupon_handling'],
)
def negotiable_quote_coupon_management_v1_set_put(
    cart_id: int = Path(..., alias='cartId'),
    coupon_code: str = Path(..., alias='couponCode'),
):
    """
    negotiable-carts/{cartId}/coupons/{couponCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/negotiable-carts/{cartId}/estimate-shipping-methods',
    description=""" Estimate shipping by address and return list of available shipping methods """,
    tags=[
        'cart_operations',
        'shipping_information_management',
        'negotiable_cart_operations',
    ],
)
def estimate_shipping_methods_for_negotiable_cart(
    cart_id: str = Path(..., alias='cartId'),
    body: V1NegotiableCartsCartIdEstimateShippingMethodsPostRequest = None,
):
    """
    negotiable-carts/{cartId}/estimate-shipping-methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/negotiable-carts/{cartId}/estimate-shipping-methods-by-address-id',
    description=""" Estimate shipping """,
    tags=[
        'shipping_information_management',
        'cart_operations',
        'negotiable_cart_operations',
    ],
)
def estimate_shipping_methods_by_address_id(
    cart_id: int = Path(..., alias='cartId'),
    body: V1NegotiableCartsCartIdEstimateShippingMethodsByAddressIdPostRequest = None,
):
    """
    negotiable-carts/{cartId}/estimate-shipping-methods-by-address-id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/negotiable-carts/{cartId}/giftCards',
    tags=['gift_card_handling', 'negotiable_cart_operations', 'cart_operations'],
)
def add_gift_cards_to_negotiable_cart_by_id(
    cart_id: int = Path(..., alias='cartId'),
    body: V1NegotiableCartsCartIdGiftCardsPostRequest = None,
):
    """
    negotiable-carts/{cartId}/giftCards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/negotiable-carts/{cartId}/giftCards/{giftCardCode}',
    description=""" Remove GiftCard Account entity """,
    tags=['gift_card_handling', 'negotiable_cart_operations', 'cart_operations'],
)
def delete_gift_card_from_cart_by_code(
    cart_id: int = Path(..., alias='cartId'),
    gift_card_code: str = Path(..., alias='giftCardCode'),
):
    """
    negotiable-carts/{cartId}/giftCards/{giftCardCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/negotiable-carts/{cartId}/payment-information',
    description=""" Get payment information """,
    tags=[
        'payment_information_management',
        'negotiable_cart_operations',
        'cart_operations',
    ],
)
def get_negotiable_cart_payment_info_by_id(cart_id: int = Path(..., alias='cartId')):
    """
    negotiable-carts/{cartId}/payment-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/negotiable-carts/{cartId}/payment-information',
    description=""" Set payment information and place order for a specified cart. """,
    tags=[
        'payment_information_management',
        'negotiable_cart_operations',
        'cart_operations',
    ],
)
def save_payment_info_for_negotiable_cart(
    cart_id: int = Path(..., alias='cartId'),
    body: V1NegotiableCartsCartIdPaymentInformationPostRequest = None,
):
    """
    negotiable-carts/{cartId}/payment-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/negotiable-carts/{cartId}/set-payment-information',
    description=""" Set payment information for a specified cart. """,
    tags=[
        'payment_information_management',
        'negotiable_cart_operations',
        'cart_operations',
    ],
)
def set_payment_information_for_negotiable_cart(
    cart_id: int = Path(..., alias='cartId'),
    body: V1NegotiableCartsCartIdSetPaymentInformationPostRequest = None,
):
    """
    negotiable-carts/{cartId}/set-payment-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/negotiable-carts/{cartId}/shipping-information',
    tags=[
        'cart_operations',
        'shipping_information_management',
        'shipping_information_operations',
        'negotiable_cart_operations',
    ],
)
def save_shipping_information_for_negotiable_cart(
    cart_id: int = Path(..., alias='cartId'),
    body: V1NegotiableCartsCartIdShippingInformationPostRequest = None,
):
    """
    negotiable-carts/{cartId}/shipping-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/negotiable-carts/{cartId}/totals',
    description=""" Returns quote totals data for a specified cart. """,
    tags=['negotiable_cart_operations', 'cart_operations'],
)
def negotiable_quote_cart_total_repository_v1_get_get(
    cart_id: int = Path(..., alias='cartId')
):
    """
    negotiable-carts/{cartId}/totals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/negotiableQuote/attachmentContent',
    description=""" Returns content for one or more files attached on the quote comment. """,
    tags=['negotiable_quote_handling'],
)
def negotiable_quote_attachment_content_management_v1_get_get(
    attachment_ids: AttachmentIds = Query(..., alias='attachmentIds')
):
    """
    negotiableQuote/attachmentContent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/negotiableQuote/decline',
    description=""" Decline the B2B quote. All custom pricing will be removed from this quote. The buyer will be able to place an order using their standard catalog prices and discounts. """,
    tags=['negotiable_quote_handling'],
)
def negotiable_quote_negotiable_quote_management_v1_decline_post(
    body: V1NegotiableQuoteDeclinePostRequest = None,
):
    """
    negotiableQuote/decline
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/negotiableQuote/pricesUpdated',
    description=""" Refreshes item prices, taxes, discounts, cart rules in the negotiable quote as per the latest changes in the catalog / shared catalog and in the price rules. Depending on the negotiable quote state and totals, all or just some of quote numbers will be recalculated. 'Update Prices' parameter forces refresh on any quote that is not locked for admin user, including the quotes with a negotiated price. The request can be applied to one or more quotes at the same time. """,
    tags=[
        'negotiable_quote_handling',
        'customer_balance_operations',
        'negotiable_cart_operations',
    ],
)
def update_negotiable_quote_prices(
    body: V1NegotiableQuotePricesUpdatedPostRequest = None,
):
    """
    negotiableQuote/pricesUpdated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/negotiableQuote/request',
    description=""" Create a B2B quote based on a regular Magento quote. If the B2B quote requires a shipping address (for negotiation or tax calculations), add it to the regular quote before you create a B2B quote. """,
    tags=['negotiable_quote_handling'],
)
def negotiable_quote_negotiable_quote_management_v1_create_post(
    body: V1NegotiableQuoteRequestPostRequest = None,
):
    """
    negotiableQuote/request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/negotiableQuote/submitToCustomer',
    description=""" Submit the B2B quote to the customer. The quote status for the customer will be changed to 'Updated', and the customer can work with the quote. """,
    tags=['negotiable_quote_handling'],
)
def negotiable_quote_negotiable_quote_management_v1_admin_send_post(
    body: V1NegotiableQuoteSubmitToCustomerPostRequest = None,
):
    """
    negotiableQuote/submitToCustomer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/negotiableQuote/{quoteId}',
    description=""" Save quote """,
    tags=['negotiable_quote_handling', 'customer_balance_operations'],
)
def negotiable_quote_negotiable_cart_repository_v1_save_put(
    quote_id: str = Path(..., alias='quoteId'),
    body: V1NegotiableQuoteQuoteIdPutRequest = None,
):
    """
    negotiableQuote/{quoteId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/negotiableQuote/{quoteId}/comments',
    description=""" Returns comments for a specified negotiable quote. """,
    tags=['negotiable_quote_handling'],
)
def negotiable_quote_comment_locator_v1_get_list_for_quote_get(
    quote_id: int = Path(..., alias='quoteId')
):
    """
    negotiableQuote/{quoteId}/comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/negotiableQuote/{quoteId}/shippingMethod',
    description=""" Updates the shipping method on a negotiable quote. """,
    tags=[
        'negotiable_quote_handling',
        'shipping_information_management',
        'shipping_payment_method_management',
    ],
)
def set_shipping_method_for_negotiable_quote(
    quote_id: int = Path(..., alias='quoteId'),
    body: V1NegotiableQuoteQuoteIdShippingMethodPutRequest = None,
):
    """
    negotiableQuote/{quoteId}/shippingMethod
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/order/{orderId}/invoice',
    tags=[
        'invoice_management_operations',
        'order_processing_operations',
        'sales_order_management',
    ],
)
def sales_invoice_order_v1_execute_post(
    order_id: int = Path(..., alias='orderId'),
    body: V1OrderOrderIdInvoicePostRequest = None,
):
    """
    order/{orderId}/invoice
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/order/{orderId}/refund',
    description=""" Create offline refund for order """,
    tags=[
        'creditmemo_operations',
        'order_processing_operations',
        'sales_order_management',
    ],
)
def sales_refund_order_v1_execute_post(
    order_id: int = Path(..., alias='orderId'),
    body: V1OrderOrderIdRefundPostRequest = None,
):
    """
    order/{orderId}/refund
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/order/{orderId}/ship',
    description=""" Creates new Shipment for given Order. """,
    tags=[
        'order_processing_operations',
        'shipping_information_management',
        'shipment_operations',
    ],
)
def sales_ship_order_v1_execute_post(
    order_id: int = Path(..., alias='orderId'),
    body: V1OrderOrderIdShipPostRequest = None,
):
    """
    order/{orderId}/ship
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/orders',
    description=""" Lists orders that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#OrderRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=[
        'sales_order_management',
        'order_processing_operations',
        'sales_order_item_management',
        'search_functionality',
    ],
)
def sales_order_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    orders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/orders/',
    description=""" Performs persist operations for a specified order. """,
    tags=['order_processing_operations', 'sales_order_management'],
)
def sales_order_repository_v1_save_post(body: V1OrdersPostRequest = None):
    """
    orders/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/orders/create',
    description=""" Performs persist operations for a specified order. """,
    tags=['order_processing_operations', 'cart_operations'],
)
def sales_order_repository_v1_save_put(body: V1OrdersCreatePutRequest = None):
    """
    orders/create
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/orders/items',
    description=""" Lists order items that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#OrderItemRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=[
        'order_processing_operations',
        'search_functionality',
        'sales_order_management',
        'sales_order_item_management',
    ],
)
def sales_order_item_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    orders/items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/orders/items/{id}',
    description=""" Loads a specified order item. """,
    tags=[
        'order_processing_operations',
        'sales_order_management',
        'sales_order_item_management',
    ],
)
def sales_order_item_repository_v1_get_get(id: int):
    """
    orders/items/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/orders/{id}',
    description=""" Loads a specified order. """,
    tags=['order_processing_operations', 'sales_order_management'],
)
def sales_order_repository_v1_get_get(id: int):
    """
    orders/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/orders/{id}/cancel',
    description=""" Cancels a specified order. """,
    tags=['order_processing_operations', 'sales_order_management'],
)
def sales_order_management_v1_cancel_post(id: int):
    """
    orders/{id}/cancel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/orders/{id}/comments',
    description=""" Lists comments for a specified order. """,
    tags=['order_processing_operations', 'sales_order_management'],
)
def sales_order_management_v1_get_comments_list_get(id: int):
    """
    orders/{id}/comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/orders/{id}/comments',
    description=""" Adds a comment to a specified order. """,
    tags=['order_processing_operations'],
)
def sales_order_management_v1_add_comment_post(
    id: int, body: V1OrdersIdCommentsPostRequest = None
):
    """
    orders/{id}/comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/orders/{id}/emails',
    description=""" Emails a user a specified order. """,
    tags=['order_processing_operations'],
)
def sales_order_management_v1_notify_post(id: int):
    """
    orders/{id}/emails
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/orders/{id}/hold',
    description=""" Holds a specified order. """,
    tags=['order_processing_operations', 'sales_order_management'],
)
def sales_order_management_v1_hold_post(id: int):
    """
    orders/{id}/hold
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/orders/{id}/statuses',
    description=""" Gets the status for a specified order. """,
    tags=['order_processing_operations', 'sales_order_management'],
)
def sales_order_management_v1_get_status_get(id: int):
    """
    orders/{id}/statuses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/orders/{id}/unhold',
    description=""" Releases a specified order from hold status. """,
    tags=['order_processing_operations', 'sales_order_management'],
)
def sales_order_management_v1_un_hold_post(id: int):
    """
    orders/{id}/unhold
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/orders/{parent_id}',
    description=""" Performs persist operations for a specified order address. """,
    tags=['order_processing_operations', 'sales_order_management'],
)
def sales_order_address_repository_v1_save_put(
    parent_id: str, body: V1OrdersParentIdPutRequest = None
):
    """
    orders/{parent_id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products',
    description=""" Get product list """,
    tags=['search_functionality', 'product_management_operations'],
)
def catalog_product_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    products
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products',
    description=""" Create product """,
    tags=[
        'product_management_operations',
        'catalog_management',
        'product_repository_functionality',
    ],
)
def catalog_product_repository_v1_save_post(body: V1ProductsPostRequest = None):
    """
    products
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products-render-info',
    description=""" Collect and retrieve the list of product render info This info contains raw prices and formated prices, product name, stock status, store_id, etc """,
    tags=[
        'search_functionality',
        'catalog_management',
        'product_management_operations',
    ],
)
def catalog_product_render_list_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
    store_id: int = Query(..., alias='storeId'),
    currency_code: str = Query(..., alias='currencyCode'),
):
    """
    products-render-info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/attribute-sets',
    description=""" Create attribute set from data """,
    tags=['attribute_set_manager', 'eav_attribute_set_handler'],
)
def catalog_attribute_set_management_v1_create_post(
    body: V1ProductsAttributeSetsPostRequest = None,
):
    """
    products/attribute-sets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/attribute-sets/attributes',
    description=""" Assign attribute to attribute set """,
    tags=['attribute_set_manager', 'eav_attribute_set_handler'],
)
def catalog_product_attribute_management_v1_assign_post(
    body: V1ProductsAttributeSetsAttributesPostRequest = None,
):
    """
    products/attribute-sets/attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/attribute-sets/groups',
    description=""" Save attribute group """,
    tags=['attribute_set_manager', 'eav_attribute_set_handler'],
)
def catalog_product_attribute_group_repository_v1_save_post(
    body: V1ProductsAttributeSetsGroupsPostRequest = None,
):
    """
    products/attribute-sets/groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/attribute-sets/groups/list',
    description=""" Retrieve list of attribute groups """,
    tags=[
        'product_management_operations',
        'catalog_management',
        'search_functionality',
        'product_attribute_option_management',
    ],
)
def catalog_product_attribute_group_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    products/attribute-sets/groups/list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/attribute-sets/groups/{groupId}',
    description=""" Remove attribute group by id """,
    tags=['attribute_set_manager', 'eav_attribute_set_handler'],
)
def delete_product_attribute_group_by_id(group_id: int = Path(..., alias='groupId')):
    """
    products/attribute-sets/groups/{groupId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/attribute-sets/sets/list',
    description=""" Retrieve list of Attribute Sets """,
    tags=['attribute_set_manager', 'eav_attribute_set_handler', 'catalog_management'],
)
def catalog_attribute_set_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    products/attribute-sets/sets/list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/attribute-sets/{attributeSetId}',
    description=""" Remove attribute set by given ID """,
    tags=['eav_attribute_set_handler', 'attribute_set_manager'],
)
def catalog_attribute_set_repository_v1_delete_by_id_delete(
    attribute_set_id: int = Path(..., alias='attributeSetId')
):
    """
    products/attribute-sets/{attributeSetId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/attribute-sets/{attributeSetId}',
    description=""" Retrieve attribute set information based on given ID """,
    tags=['eav_attribute_set_handler', 'attribute_set_manager'],
)
def catalog_attribute_set_repository_v1_get_get(
    attribute_set_id: int = Path(..., alias='attributeSetId')
):
    """
    products/attribute-sets/{attributeSetId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/attribute-sets/{attributeSetId}',
    description=""" Save attribute set data """,
    tags=['attribute_set_manager', 'eav_attribute_set_handler'],
)
def catalog_attribute_set_repository_v1_save_put(
    attribute_set_id: str = Path(..., alias='attributeSetId'),
    body: V1ProductsAttributeSetsAttributeSetIdPutRequest = None,
):
    """
    products/attribute-sets/{attributeSetId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/attribute-sets/{attributeSetId}/attributes',
    description=""" Retrieve related attributes based on given attribute set ID """,
    tags=[
        'attribute_set_manager',
        'eav_attribute_set_handler',
        'catalog_attribute_management',
    ],
)
def catalog_product_attribute_management_v1_get_attributes_get(
    attribute_set_id: str = Path(..., alias='attributeSetId')
):
    """
    products/attribute-sets/{attributeSetId}/attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/attribute-sets/{attributeSetId}/attributes/{attributeCode}',
    description=""" Remove attribute from attribute set """,
    tags=[
        'eav_attribute_set_handler',
        'attribute_set_manager',
        'catalog_attribute_management',
        'attribute_metadata_handling',
    ],
)
def catalog_product_attribute_management_v1_unassign_delete(
    attribute_set_id: str = Path(..., alias='attributeSetId'),
    attribute_code: str = Path(..., alias='attributeCode'),
):
    """
    products/attribute-sets/{attributeSetId}/attributes/{attributeCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/attribute-sets/{attributeSetId}/groups',
    description=""" Save attribute group """,
    tags=['attribute_set_manager', 'eav_attribute_set_handler'],
)
def catalog_product_attribute_group_repository_v1_save_put(
    attribute_set_id: str = Path(..., alias='attributeSetId'),
    body: V1ProductsAttributeSetsAttributeSetIdGroupsPutRequest = None,
):
    """
    products/attribute-sets/{attributeSetId}/groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/attributes',
    description=""" Retrieve all attributes for entity type """,
    tags=[
        'search_functionality',
        'product_management_operations',
        'catalog_attribute_management',
    ],
)
def catalog_product_attribute_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    products/attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/attributes',
    description=""" Save attribute data """,
    tags=[
        'catalog_attribute_management',
        'product_attribute_option_management',
        'attribute_metadata_handling',
    ],
)
def catalog_product_attribute_repository_v1_save_post(
    body: V1ProductsAttributesPostRequest = None,
):
    """
    products/attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/attributes/types',
    description=""" Retrieve list of product attribute types """,
    tags=[
        'product_attribute_option_management',
        'catalog_attribute_management',
        'product_type_management',
        'attribute_metadata_handling',
    ],
)
def catalog_product_attribute_types_list_v1_get_items_get():
    """
    products/attributes/types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/attributes/{attributeCode}',
    description=""" Delete Attribute by id """,
    tags=['customer_metadata_handling', 'attribute_metadata_handling'],
)
def catalog_product_attribute_repository_v1_delete_by_id_delete(
    attribute_code: str = Path(..., alias='attributeCode')
):
    """
    products/attributes/{attributeCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/attributes/{attributeCode}',
    description=""" Retrieve specific attribute """,
    tags=[
        'customer_metadata_handling',
        'catalog_attribute_management',
        'attribute_metadata_handling',
    ],
)
def catalog_product_attribute_repository_v1_get_get(
    attribute_code: str = Path(..., alias='attributeCode')
):
    """
    products/attributes/{attributeCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/attributes/{attributeCode}',
    description=""" Save attribute data """,
    tags=[
        'catalog_attribute_management',
        'product_attribute_option_management',
        'attribute_metadata_handling',
    ],
)
def catalog_product_attribute_repository_v1_save_put(
    attribute_code: str = Path(..., alias='attributeCode'),
    body: V1ProductsAttributesAttributeCodePutRequest = None,
):
    """
    products/attributes/{attributeCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/attributes/{attributeCode}/options',
    description=""" Retrieve list of attribute options """,
    tags=[
        'product_attribute_option_management',
        'catalog_attribute_management',
        'attribute_metadata_handling',
    ],
)
def catalog_product_attribute_option_management_v1_get_items_get(
    attribute_code: str = Path(..., alias='attributeCode')
):
    """
    products/attributes/{attributeCode}/options
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/attributes/{attributeCode}/options',
    description=""" Add option to attribute """,
    tags=['product_attribute_option_management', 'catalog_attribute_management'],
)
def catalog_product_attribute_option_management_v1_add_post(
    attribute_code: str = Path(..., alias='attributeCode'),
    body: V1ProductsAttributesAttributeCodeOptionsPostRequest = None,
):
    """
    products/attributes/{attributeCode}/options
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/attributes/{attributeCode}/options/{optionId}',
    description=""" Delete option from attribute """,
    tags=['product_attribute_option_management', 'catalog_attribute_management'],
)
def catalog_product_attribute_option_management_v1_delete_delete(
    attribute_code: str = Path(..., alias='attributeCode'),
    option_id: str = Path(..., alias='optionId'),
):
    """
    products/attributes/{attributeCode}/options/{optionId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/base-prices',
    description=""" Add or update product prices. Input item should correspond \Magento\Catalog\Api\Data\CostInterface. If any items will have invalid price, store id or sku, they will be marked as failed and excluded from update list and \Magento\Catalog\Api\Data\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown. """,
    tags=[
        'base_price_management',
        'product_pricing_operations',
        'product_management_operations',
    ],
)
def catalog_base_price_storage_v1_update_post(
    body: V1ProductsBasePricesPostRequest = None,
):
    """
    products/base-prices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/base-prices-information',
    description=""" Return product prices. In case of at least one of skus is not found exception will be thrown. """,
    tags=[
        'base_price_management',
        'product_pricing_operations',
        'product_management_operations',
    ],
)
def catalog_base_price_storage_v1_get_post(
    body: V1ProductsBasePricesInformationPostRequest = None,
):
    """
    products/base-prices-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/cost',
    description=""" Add or update product cost. Input item should correspond to \Magento\Catalog\Api\Data\CostInterface. If any items will have invalid cost, store id or sku, they will be marked as failed and excluded from update list and \Magento\Catalog\Api\Data\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown. """,
    tags=['product_pricing_operations', 'product_management_operations'],
)
def catalog_cost_storage_v1_update_post(body: V1ProductsCostPostRequest = None):
    """
    products/cost
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/cost-delete',
    description=""" Delete product cost. In case of at least one of skus is not found exception will be thrown. If error occurred during the delete exception will be thrown. """,
    tags=[
        'catalog_management',
        'product_management_operations',
        'product_repository_functionality',
    ],
)
def catalog_cost_storage_v1_delete_post(body: V1ProductsCostDeletePostRequest = None):
    """
    products/cost-delete
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/cost-information',
    description=""" Return product prices. In case of at least one of skus is not found exception will be thrown. """,
    tags=[
        'product_pricing_operations',
        'catalog_management',
        'product_management_operations',
    ],
)
def catalog_cost_storage_v1_get_post(body: V1ProductsCostInformationPostRequest = None):
    """
    products/cost-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/downloadable-links/samples/{id}',
    description=""" Delete downloadable sample """,
    tags=['product_downloadable_link_management'],
)
def downloadable_sample_repository_v1_delete_delete(id: int):
    """
    products/downloadable-links/samples/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/downloadable-links/{id}',
    description=""" Delete downloadable link """,
    tags=['product_downloadable_link_management'],
)
def downloadable_link_repository_v1_delete_delete(id: int):
    """
    products/downloadable-links/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/links/types',
    description=""" Retrieve information about available product link types """,
    tags=['product_link_management', 'product_repository_functionality'],
)
def catalog_product_link_type_list_v1_get_items_get():
    """
    products/links/types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/links/{type}/attributes',
    description=""" Provide a list of the product link type attributes """,
    tags=[
        'product_management_operations',
        'catalog_management',
        'catalog_attribute_management',
        'attribute_metadata_handling',
    ],
)
def catalog_product_link_type_list_v1_get_item_attributes_get(type: str):
    """
    products/links/{type}/attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/media/types/{attributeSetName}',
    description=""" Retrieve the list of media attributes (fronted input type is media_image) assigned to the given attribute set. """,
    tags=['attribute_set_manager', 'eav_attribute_set_handler'],
)
def catalog_product_media_attribute_management_v1_get_list_get(
    attribute_set_name: str = Path(..., alias='attributeSetName')
):
    """
    products/media/types/{attributeSetName}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/options',
    description=""" Save Custom Option """,
    tags=['product_option_management', 'catalog_management'],
)
def catalog_product_custom_option_repository_v1_save_post(
    body: V1ProductsOptionsPostRequest = None,
):
    """
    products/options
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/options/types',
    description=""" Get custom option types """,
    tags=[
        'product_option_management',
        'product_type_management',
        'product_attribute_option_management',
    ],
)
def catalog_product_custom_option_type_list_v1_get_items_get():
    """
    products/options/types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/options/{optionId}',
    description=""" Save Custom Option """,
    tags=['product_option_management', 'configurable_option_manager'],
)
def catalog_product_custom_option_repository_v1_save_put(
    option_id: str = Path(..., alias='optionId'),
    body: V1ProductsOptionsOptionIdPutRequest = None,
):
    """
    products/options/{optionId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/special-price',
    description=""" Add or update product's special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from update list and \Magento\Catalog\Api\Data\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown. """,
    tags=['product_pricing_operations', 'base_price_management'],
)
def catalog_special_price_storage_v1_update_post(
    body: V1ProductsSpecialPricePostRequest = None,
):
    """
    products/special-price
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/special-price-delete',
    description=""" Delete product's special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from delete list and \Magento\Catalog\Api\Data\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the delete exception will be thrown. """,
    tags=[
        'product_management_operations',
        'product_pricing_operations',
        'base_price_management',
    ],
)
def catalog_special_price_storage_v1_delete_post(
    body: V1ProductsSpecialPriceDeletePostRequest = None,
):
    """
    products/special-price-delete
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/special-price-information',
    description=""" Return product's special price. In case of at least one of skus is not found exception will be thrown. """,
    tags=['product_pricing_operations', 'base_price_management'],
)
def catalog_special_price_storage_v1_get_post(
    body: V1ProductsSpecialPriceInformationPostRequest = None,
):
    """
    products/special-price-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/tier-prices',
    description=""" Add or update product prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from update list and \Magento\Catalog\Api\Data\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown. """,
    tags=['tier_price_management'],
)
def catalog_tier_price_storage_v1_update_post(
    body: V1ProductsTierPricesPostRequest = None,
):
    """
    products/tier-prices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/tier-prices',
    description=""" Remove existing tier prices and replace them with the new ones. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from replace list and \Magento\Catalog\Api\Data\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown. """,
    tags=['tier_price_management', 'product_pricing_operations'],
)
def catalog_tier_price_storage_v1_replace_put(
    body: V1ProductsTierPricesPutRequest = None,
):
    """
    products/tier-prices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/tier-prices-delete',
    description=""" Delete product tier prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from delete list and \Magento\Catalog\Api\Data\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown. """,
    tags=['tier_price_management'],
)
def catalog_tier_price_storage_v1_delete_post(
    body: V1ProductsTierPricesDeletePostRequest = None,
):
    """
    products/tier-prices-delete
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/tier-prices-information',
    description=""" Return product prices. In case of at least one of skus is not found exception will be thrown. """,
    tags=['tier_price_management', 'product_management_operations'],
)
def catalog_tier_price_storage_v1_get_post(
    body: V1ProductsTierPricesInformationPostRequest = None,
):
    """
    products/tier-prices-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/types',
    description=""" Retrieve available product types """,
    tags=[
        'product_type_management',
        'catalog_management',
        'product_management_operations',
    ],
)
def catalog_product_type_list_v1_get_product_types_get():
    """
    products/types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/{productSku}/stockItems/{itemId}',
    tags=[
        'inventory_stock_handler',
        'product_management_operations',
        'inventory_management_operations',
    ],
)
def catalog_inventory_stock_registry_v1_update_stock_item_by_sku_put(
    product_sku: str = Path(..., alias='productSku'),
    item_id: str = Path(..., alias='itemId'),
    body: V1ProductsProductSkuStockItemsItemIdPutRequest = None,
):
    """
    products/{productSku}/stockItems/{itemId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/V1/products/{sku}', tags=['product_management_operations'])
def catalog_product_repository_v1_delete_by_id_delete(sku: str):
    """
    products/{sku}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/{sku}',
    description=""" Get info about product by product SKU """,
    tags=[
        'product_management_operations',
        'product_repository_functionality',
        'catalog_management',
    ],
)
def catalog_product_repository_v1_get_get(
    sku: str,
    edit_mode: Optional[bool] = Query(None, alias='editMode'),
    store_id: Optional[int] = Query(None, alias='storeId'),
    force_reload: Optional[bool] = Query(None, alias='forceReload'),
):
    """
    products/{sku}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/{sku}',
    description=""" Create product """,
    tags=[
        'product_management_operations',
        'catalog_management',
        'product_repository_functionality',
    ],
)
def catalog_product_repository_v1_save_put(
    sku: str, body: V1ProductsSkuPutRequest = None
):
    """
    products/{sku}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/{sku}/downloadable-links',
    description=""" List of links with associated samples """,
    tags=['product_downloadable_link_management', 'product_management_operations'],
)
def downloadable_link_repository_v1_get_list_get(sku: str):
    """
    products/{sku}/downloadable-links
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/{sku}/downloadable-links',
    description=""" Update downloadable link of the given product (link type and its resources cannot be changed) """,
    tags=['product_downloadable_link_management'],
)
def downloadable_link_repository_v1_save_post(
    sku: str, body: V1ProductsSkuDownloadableLinksPostRequest = None
):
    """
    products/{sku}/downloadable-links
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/{sku}/downloadable-links/samples',
    description=""" List of samples for downloadable product """,
    tags=['product_downloadable_link_management'],
)
def downloadable_sample_repository_v1_get_list_get(sku: str):
    """
    products/{sku}/downloadable-links/samples
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/{sku}/downloadable-links/samples',
    description=""" Update downloadable sample of the given product """,
    tags=['product_downloadable_link_management'],
)
def downloadable_sample_repository_v1_save_post(
    sku: str, body: V1ProductsSkuDownloadableLinksSamplesPostRequest = None
):
    """
    products/{sku}/downloadable-links/samples
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/{sku}/downloadable-links/samples/{id}',
    description=""" Update downloadable sample of the given product """,
    tags=['product_downloadable_link_management'],
)
def downloadable_sample_repository_v1_save_put(
    sku: str,
    id: str = ...,
    body: V1ProductsSkuDownloadableLinksSamplesIdPutRequest = None,
):
    """
    products/{sku}/downloadable-links/samples/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/{sku}/downloadable-links/{id}',
    description=""" Update downloadable link of the given product (link type and its resources cannot be changed) """,
    tags=['product_downloadable_link_management'],
)
def downloadable_link_repository_v1_save_put(
    sku: str, id: str = ..., body: V1ProductsSkuDownloadableLinksIdPutRequest = None
):
    """
    products/{sku}/downloadable-links/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/{sku}/group-prices/{customerGroupId}/tiers',
    description=""" Get tier price of product """,
    tags=['tier_price_management', 'customer_group_management'],
)
def catalog_product_tier_price_management_v1_get_list_get(
    sku: str, customer_group_id: str = Path(..., alias='customerGroupId')
):
    """
    products/{sku}/group-prices/{customerGroupId}/tiers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}',
    description=""" Remove tier price from product """,
    tags=[
        'tier_price_management',
        'product_pricing_operations',
        'customer_group_management',
    ],
)
def catalog_product_tier_price_management_v1_remove_delete(
    sku: str,
    customer_group_id: str = Path(..., alias='customerGroupId'),
    qty: float = ...,
):
    """
    products/{sku}/group-prices/{customerGroupId}/tiers/{qty}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}/price/{price}',
    description=""" Create tier price for product """,
    tags=[
        'tier_price_management',
        'product_pricing_operations',
        'customer_group_management',
    ],
)
def catalog_product_tier_price_management_v1_add_post(
    sku: str,
    customer_group_id: str = Path(..., alias='customerGroupId'),
    price: float = ...,
    qty: float = ...,
):
    """
    products/{sku}/group-prices/{customerGroupId}/tiers/{qty}/price/{price}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/{sku}/links',
    description=""" Assign a product link to another product """,
    tags=['product_link_management', 'product_management_operations'],
)
def catalog_product_link_management_v1_set_product_links_post(
    sku: str, body: V1ProductsSkuLinksPostRequest = None
):
    """
    products/{sku}/links
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/{sku}/links',
    description=""" Save product link """,
    tags=['product_link_management', 'configurable_product_manager'],
)
def catalog_product_link_repository_v1_save_put(
    sku: str, body: V1ProductsSkuLinksPutRequest = None
):
    """
    products/{sku}/links
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/{sku}/links/{type}',
    description=""" Provide the list of links for a specific product """,
    tags=['product_link_management'],
)
def catalog_product_link_management_v1_get_linked_items_by_type_get(
    sku: str, type: str = ...
):
    """
    products/{sku}/links/{type}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/{sku}/links/{type}/{linkedProductSku}',
    tags=['product_link_management'],
)
def catalog_product_link_repository_v1_delete_by_id_delete(
    sku: str,
    type: str = ...,
    linked_product_sku: str = Path(..., alias='linkedProductSku'),
):
    """
    products/{sku}/links/{type}/{linkedProductSku}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/{sku}/media',
    description=""" Retrieve the list of gallery entries associated with given product """,
    tags=['product_media_operations'],
)
def get_product_media_by_sku(sku: str):
    """
    products/{sku}/media
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/{sku}/media',
    description=""" Create new gallery entry """,
    tags=['product_media_operations', 'product_management_operations'],
)
def create_product_media_gallery(sku: str, body: V1ProductsSkuMediaPostRequest = None):
    """
    products/{sku}/media
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/{sku}/media/{entryId}',
    description=""" Remove gallery entry """,
    tags=['product_media_operations'],
)
def remove_product_media_entry(sku: str, entry_id: int = Path(..., alias='entryId')):
    """
    products/{sku}/media/{entryId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/{sku}/media/{entryId}',
    description=""" Return information about gallery entry """,
    tags=['product_media_operations'],
)
def catalog_product_attribute_media_gallery_management_v1_get_get(
    sku: str, entry_id: int = Path(..., alias='entryId')
):
    """
    products/{sku}/media/{entryId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/{sku}/media/{entryId}',
    description=""" Update gallery entry """,
    tags=['product_media_operations', 'product_management_operations'],
)
def catalog_product_attribute_media_gallery_management_v1_update_put(
    sku: str,
    entry_id: str = Path(..., alias='entryId'),
    body: V1ProductsSkuMediaEntryIdPutRequest = None,
):
    """
    products/{sku}/media/{entryId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/{sku}/options',
    description=""" Get the list of custom options for a specific product """,
    tags=[
        'bundle_product_handling',
        'configurable_option_manager',
        'product_option_management',
    ],
)
def catalog_product_custom_option_repository_v1_get_list_get(sku: str):
    """
    products/{sku}/options
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/{sku}/options/{optionId}',
    tags=['product_option_management', 'configurable_option_manager'],
)
def delete_product_option_by_sku_and_id(
    sku: str, option_id: int = Path(..., alias='optionId')
):
    """
    products/{sku}/options/{optionId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/products/{sku}/options/{optionId}',
    description=""" Get custom option for a specific product """,
    tags=[
        'product_option_management',
        'configurable_option_manager',
        'product_management_operations',
    ],
)
def catalog_product_custom_option_repository_v1_get_get(
    sku: str, option_id: int = Path(..., alias='optionId')
):
    """
    products/{sku}/options/{optionId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/products/{sku}/websites',
    description=""" Assign a product to the website """,
    tags=['website_product_management'],
)
def catalog_product_website_link_repository_v1_save_post(
    sku: str, body: V1ProductsSkuWebsitesPostRequest = None
):
    """
    products/{sku}/websites
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/products/{sku}/websites',
    description=""" Assign a product to the website """,
    tags=['website_product_management'],
)
def catalog_product_website_link_repository_v1_save_put(
    sku: str, body: V1ProductsSkuWebsitesPutRequest = None
):
    """
    products/{sku}/websites
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/products/{sku}/websites/{websiteId}',
    description=""" Remove the website assignment from the product by product sku """,
    tags=['website_product_management'],
)
def catalog_product_website_link_repository_v1_delete_by_id_delete(
    sku: str, website_id: int = Path(..., alias='websiteId')
):
    """
    products/{sku}/websites/{websiteId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/requisition_lists',
    description=""" Save Requisition List """,
    tags=[
        'guest_cart_operations',
        'guest_cart_item_manager',
        'guest_cart_checkout_handler',
    ],
)
def requisition_list_requisition_list_repository_v1_save_post(
    body: V1RequisitionListsPostRequest = None,
):
    """
    requisition_lists
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/returns',
    description=""" Return list of rma data objects based on search criteria """,
    tags=['search_functionality'],
)
def rma_rma_management_v1_search_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    returns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/returns', description=""" Save RMA """, tags=['customer_metadata_handling']
)
def rma_rma_management_v1_save_rma_post(body: V1ReturnsPostRequest = None):
    """
    returns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/returns/{id}',
    description=""" Delete RMA """,
    tags=['rma_management_operations'],
)
def rma_rma_repository_v1_delete_delete(id: str, body: V1ReturnsIdDeleteRequest = None):
    """
    returns/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/returns/{id}',
    description=""" Return data object for specified RMA id """,
    tags=['customer_metadata_handling', 'customer_repository_management'],
)
def rma_rma_repository_v1_get_get(id: int):
    """
    returns/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/returns/{id}',
    description=""" Save RMA """,
    tags=['rma_management_operations', 'rma_tracking_operations'],
)
def rma_rma_management_v1_save_rma_put(id: str, body: V1ReturnsIdPutRequest = None):
    """
    returns/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/returns/{id}/comments',
    description=""" Comments list """,
    tags=[
        'customer_metadata_handling',
        'order_processing_operations',
        'sales_order_management',
    ],
)
def rma_comment_management_v1_comments_list_get(id: int):
    """
    returns/{id}/comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/returns/{id}/comments',
    description=""" Add comment """,
    tags=['rma_comment_handling', 'rma_management_operations'],
)
def rma_comment_management_v1_add_comment_post(
    id: str, body: V1ReturnsIdCommentsPostRequest = None
):
    """
    returns/{id}/comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/returns/{id}/labels',
    description=""" Get shipping label int the PDF format """,
    tags=['customer_metadata_handling'],
)
def rma_track_management_v1_get_shipping_label_pdf_get(id: int):
    """
    returns/{id}/labels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/returns/{id}/tracking-numbers',
    description=""" Get track list """,
    tags=['rma_tracking_operations', 'shipment_operations'],
)
def rma_track_management_v1_get_tracks_get(id: int):
    """
    returns/{id}/tracking-numbers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/returns/{id}/tracking-numbers',
    description=""" Add track """,
    tags=['rma_tracking_operations', 'order_processing_operations'],
)
def rma_track_management_v1_add_track_post(
    id: int, body: V1ReturnsIdTrackingNumbersPostRequest = None
):
    """
    returns/{id}/tracking-numbers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/returns/{id}/tracking-numbers/{trackId}',
    description=""" Remove track by id """,
    tags=[
        'shipping_information_operations',
        'order_processing_operations',
        'sales_order_management',
    ],
)
def rma_track_management_v1_remove_track_by_id_delete(
    id: int, track_id: int = Path(..., alias='trackId')
):
    """
    returns/{id}/tracking-numbers/{trackId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/returnsAttributeMetadata',
    description=""" Get all attribute metadata. """,
    tags=['customer_metadata_handling', 'attribute_metadata_handling'],
)
def rma_rma_attributes_management_v1_get_all_attributes_metadata_get():
    """
    returnsAttributeMetadata
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/returnsAttributeMetadata/custom',
    description=""" Get custom attribute metadata for the given Data object's attribute set """,
    tags=['customer_metadata_handling', 'attribute_metadata_handling'],
)
def get_custom_attributes_metadata(
    data_object_class_name: Optional[str] = Query(None, alias='dataObjectClassName')
):
    """
    returnsAttributeMetadata/custom
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/returnsAttributeMetadata/form/{formCode}',
    description=""" Retrieve all attributes filtered by form code """,
    tags=['customer_metadata_handling', 'attribute_metadata_handling'],
)
def rma_rma_attributes_management_v1_get_attributes_get(
    form_code: str = Path(..., alias='formCode')
):
    """
    returnsAttributeMetadata/form/{formCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/returnsAttributeMetadata/{attributeCode}',
    description=""" Retrieve attribute metadata. """,
    tags=['customer_metadata_handling', 'attribute_metadata_handling'],
)
def rma_rma_attributes_management_v1_get_attribute_metadata_get(
    attribute_code: str = Path(..., alias='attributeCode')
):
    """
    returnsAttributeMetadata/{attributeCode}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/reward/mine/use-reward',
    description=""" Set reward points to quote """,
    tags=['customer_balance_operations', 'reward/mine/use-reward'],
)
def reward_reward_management_v1_set_post():
    """
    reward/mine/use-reward
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/salesRules',
    description=""" Save sales rule. """,
    tags=['sales_rule_management_operations'],
)
def sales_rule_rule_repository_v1_save_post(body: V1SalesRulesPostRequest = None):
    """
    salesRules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/salesRules/search',
    description=""" Retrieve sales rules that match te specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#RuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['search_functionality', 'sales_rule_management_operations'],
)
def sales_rule_rule_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    salesRules/search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/salesRules/{ruleId}',
    description=""" Delete rule by ID. """,
    tags=['sales_rule_management_operations'],
)
def sales_rule_rule_repository_v1_delete_by_id_delete(
    rule_id: int = Path(..., alias='ruleId')
):
    """
    salesRules/{ruleId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/salesRules/{ruleId}',
    description=""" Get rule by ID. """,
    tags=['sales_rule_management_operations'],
)
def sales_rule_rule_repository_v1_get_by_id_get(
    rule_id: int = Path(..., alias='ruleId')
):
    """
    salesRules/{ruleId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/salesRules/{ruleId}',
    description=""" Save sales rule. """,
    tags=['sales_rule_management_operations'],
)
def sales_rule_rule_repository_v1_save_put(
    rule_id: str = Path(..., alias='ruleId'), body: V1SalesRulesRuleIdPutRequest = None
):
    """
    salesRules/{ruleId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/search',
    description=""" Make Full Text Search and return found Documents """,
    tags=['search_functionality'],
)
def search_v1_search_get(
    search_criteria_request_name_: Optional[str] = Query(
        None, alias='searchCriteria[requestName]'
    ),
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/sharedCatalog',
    description=""" Create or update Shared Catalog service. """,
    tags=['shared_catalog_handling'],
)
def shared_catalog_shared_catalog_repository_v1_save_post(
    body: V1SharedCatalogPostRequest = None,
):
    """
    sharedCatalog
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/sharedCatalog/',
    description=""" Return the list of shared catalogs and basic properties for each catalog. """,
    tags=['shared_catalog_handling', 'search_functionality'],
)
def shared_catalog_shared_catalog_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    sharedCatalog/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/sharedCatalog/{id}',
    description=""" Create or update Shared Catalog service. """,
    tags=['shared_catalog_handling'],
)
def shared_catalog_shared_catalog_repository_v1_save_put(
    id: str, body: V1SharedCatalogIdPutRequest = None
):
    """
    sharedCatalog/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/sharedCatalog/{id}/assignCategories',
    description=""" Add categories into the shared catalog. """,
    tags=['shared_catalog_handling', 'catalog_management'],
)
def shared_catalog_category_management_v1_assign_categories_post(
    id: int, body: V1SharedCatalogIdAssignCategoriesPostRequest = None
):
    """
    sharedCatalog/{id}/assignCategories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/sharedCatalog/{id}/assignProducts',
    description=""" Add products into the shared catalog. """,
    tags=['shared_catalog_handling'],
)
def shared_catalog_product_management_v1_assign_products_post(
    id: int, body: V1SharedCatalogIdAssignProductsPostRequest = None
):
    """
    sharedCatalog/{id}/assignProducts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/sharedCatalog/{id}/categories',
    description=""" Return the list of categories in the selected shared catalog. """,
    tags=['shared_catalog_handling', 'catalog_management'],
)
def shared_catalog_category_management_v1_get_categories_get(id: int):
    """
    sharedCatalog/{id}/categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/sharedCatalog/{id}/products',
    description=""" Return the list of product SKUs in the selected shared catalog. """,
    tags=['shared_catalog_handling', 'product_management_operations'],
)
def shared_catalog_product_management_v1_get_products_get(id: int):
    """
    sharedCatalog/{id}/products
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/sharedCatalog/{id}/unassignCategories',
    description=""" Remove the specified categories from the shared catalog. """,
    tags=['shared_catalog_handling', 'catalog_management'],
)
def shared_catalog_category_management_v1_unassign_categories_post(
    id: int, body: V1SharedCatalogIdUnassignCategoriesPostRequest = None
):
    """
    sharedCatalog/{id}/unassignCategories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/sharedCatalog/{id}/unassignProducts',
    description=""" Remove the specified products from the shared catalog. """,
    tags=['shared_catalog_handling', 'product_management_operations'],
)
def shared_catalog_product_management_v1_unassign_products_post(
    id: int, body: V1SharedCatalogIdUnassignProductsPostRequest = None
):
    """
    sharedCatalog/{id}/unassignProducts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/sharedCatalog/{sharedCatalogId}',
    description=""" Delete a shared catalog by ID. """,
    tags=['shared_catalog_handling'],
)
def shared_catalog_shared_catalog_repository_v1_delete_by_id_delete(
    shared_catalog_id: int = Path(..., alias='sharedCatalogId')
):
    """
    sharedCatalog/{sharedCatalogId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/sharedCatalog/{sharedCatalogId}',
    description=""" Return the following properties for the selected shared catalog: ID, Store Group ID, Name, Type, Description, Customer Group, Tax Class. """,
    tags=['shared_catalog_handling'],
)
def shared_catalog_shared_catalog_repository_v1_get_get(
    shared_catalog_id: int = Path(..., alias='sharedCatalogId')
):
    """
    sharedCatalog/{sharedCatalogId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/sharedCatalog/{sharedCatalogId}/assignCompanies',
    description=""" Assign companies to a shared catalog. """,
    tags=['shared_catalog_handling', 'company_operations'],
)
def shared_catalog_company_management_v1_assign_companies_post(
    shared_catalog_id: int = Path(..., alias='sharedCatalogId'),
    body: V1SharedCatalogSharedCatalogIdAssignCompaniesPostRequest = None,
):
    """
    sharedCatalog/{sharedCatalogId}/assignCompanies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/sharedCatalog/{sharedCatalogId}/companies',
    description=""" Return the list of company IDs for the companies assigned to the selected catalog. """,
    tags=['company_operations', 'shared_catalog_handling'],
)
def shared_catalog_company_management_v1_get_companies_get(
    shared_catalog_id: int = Path(..., alias='sharedCatalogId')
):
    """
    sharedCatalog/{sharedCatalogId}/companies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/sharedCatalog/{sharedCatalogId}/unassignCompanies',
    description=""" Unassign companies from a shared catalog. """,
    tags=['shared_catalog_handling', 'company_operations'],
)
def shared_catalog_company_management_v1_unassign_companies_post(
    shared_catalog_id: int = Path(..., alias='sharedCatalogId'),
    body: V1SharedCatalogSharedCatalogIdUnassignCompaniesPostRequest = None,
):
    """
    sharedCatalog/{sharedCatalogId}/unassignCompanies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/shipment/',
    description=""" Performs persist operations for a specified shipment. """,
    tags=['shipment_operations'],
)
def sales_shipment_repository_v1_save_post(body: V1ShipmentPostRequest = None):
    """
    shipment/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/shipment/track',
    description=""" Performs persist operations for a specified shipment track. """,
    tags=['shipment_operations'],
)
def sales_shipment_track_repository_v1_save_post(
    body: V1ShipmentTrackPostRequest = None,
):
    """
    shipment/track
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/shipment/track/{id}',
    description=""" Deletes a specified shipment track by ID. """,
    tags=['shipment_operations'],
)
def sales_shipment_track_repository_v1_delete_by_id_delete(id: int):
    """
    shipment/track/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/shipment/{id}',
    description=""" Loads a specified shipment. """,
    tags=['shipment_operations'],
)
def sales_shipment_repository_v1_get_get(id: int):
    """
    shipment/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/shipment/{id}/comments',
    description=""" Lists comments for a specified shipment. """,
    tags=['shipment_operations'],
)
def sales_shipment_management_v1_get_comments_list_get(id: int):
    """
    shipment/{id}/comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/shipment/{id}/comments',
    description=""" Performs persist operations for a specified shipment comment. """,
    tags=['shipment_operations'],
)
def sales_shipment_comment_repository_v1_save_post(
    id: str, body: V1ShipmentIdCommentsPostRequest = None
):
    """
    shipment/{id}/comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/shipment/{id}/emails',
    description=""" Emails user a specified shipment. """,
    tags=['shipment_operations'],
)
def sales_shipment_management_v1_notify_post(id: int):
    """
    shipment/{id}/emails
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/shipment/{id}/label',
    description=""" Gets a specified shipment label. """,
    tags=['shipment_operations'],
)
def sales_shipment_management_v1_get_label_get(id: int):
    """
    shipment/{id}/label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/shipments',
    description=""" Lists shipments that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#ShipmentRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['shipping_information_management', 'shipment_operations'],
)
def sales_shipment_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    shipments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/stockItems/lowStock/',
    description=""" Retrieves a list of SKU's with low inventory qty """,
    tags=['inventory_stock_handler', 'inventory_management_operations'],
)
def catalog_inventory_stock_registry_v1_get_low_stock_items_get(
    scope_id: int = Query(..., alias='scopeId'),
    qty: float = ...,
    current_page: Optional[int] = Query(None, alias='currentPage'),
    page_size: Optional[int] = Query(None, alias='pageSize'),
):
    """
    stockItems/lowStock/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/stockItems/{productSku}',
    tags=['product_management_operations', 'inventory_management_operations'],
)
def catalog_inventory_stock_registry_v1_get_stock_item_by_sku_get(
    product_sku: str = Path(..., alias='productSku'),
    scope_id: Optional[int] = Query(None, alias='scopeId'),
):
    """
    stockItems/{productSku}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/V1/stockStatuses/{productSku}', tags=['inventory_stock_handler'])
def catalog_inventory_stock_registry_v1_get_stock_status_by_sku_get(
    product_sku: str = Path(..., alias='productSku'),
    scope_id: Optional[int] = Query(None, alias='scopeId'),
):
    """
    stockStatuses/{productSku}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/V1/store/storeConfigs', tags=['store_configuration_management'])
def store_store_config_manager_v1_get_store_configs_get(
    store_codes: Optional[StoreCodes] = Query(None, alias='storeCodes')
):
    """
    store/storeConfigs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/store/storeGroups',
    description=""" Retrieve list of all groups """,
    tags=[
        'customer_address_handling',
        'amazon_address_handling',
        'customer_metadata_handling',
        'billing_address_operations',
        'shipping_information_management',
        'cart_details_operations',
        'cart_operations',
        'guest_cart_operations',
        'order_processing_operations',
        'customer_account_handling',
        'customer_repository_management',
    ],
)
def store_group_repository_v1_get_list_get():
    """
    store/storeGroups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/store/storeViews',
    description=""" Retrieve list of all stores """,
    tags=['store_configuration_management'],
)
def store_store_repository_v1_get_list_get():
    """
    store/storeViews
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/store/websites',
    description=""" Retrieve list of all websites """,
    tags=[
        'customer_address_handling',
        'amazon_address_handling',
        'billing_address_operations',
        'shipping_information_management',
        'collection_point_handler',
        'guest_cart_operations',
        'cart_details_operations',
        'checkout_options_management',
        'guest_cart_billing_operations',
        'guest_cart_checkout_handler',
        'guest_cart_delivery_options',
        'guest_cart_item_manager',
        'guest_cart_collection_point_handler',
    ],
)
def store_website_repository_v1_get_list_get():
    """
    store/websites
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/taxClasses',
    description=""" Create a Tax Class """,
    tags=['tax_class_operations', 'tax_rate_handling', 'tax_rule_operations'],
)
def tax_tax_class_repository_v1_save_post(body: V1TaxClassesPostRequest = None):
    """
    taxClasses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/taxClasses/search',
    description=""" Retrieve tax classes which match a specific criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#TaxClassRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=[
        'tax_class_operations',
        'tax_rate_handling',
        'tax_rule_operations',
        'search_functionality',
    ],
)
def tax_tax_class_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    taxClasses/search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/taxClasses/{classId}',
    description=""" Create a Tax Class """,
    tags=['tax_class_operations'],
)
def tax_tax_class_repository_v1_save_put(
    class_id: str = Path(..., alias='classId'),
    body: V1TaxClassesClassIdPutRequest = None,
):
    """
    taxClasses/{classId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/taxClasses/{taxClassId}',
    description=""" Delete a tax class with the given tax class id. """,
    tags=['tax_class_operations'],
)
def tax_tax_class_repository_v1_delete_by_id_delete(
    tax_class_id: int = Path(..., alias='taxClassId')
):
    """
    taxClasses/{taxClassId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/taxClasses/{taxClassId}',
    description=""" Get a tax class with the given tax class id. """,
    tags=['tax_class_operations'],
)
def tax_tax_class_repository_v1_get_get(
    tax_class_id: int = Path(..., alias='taxClassId')
):
    """
    taxClasses/{taxClassId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/taxRates',
    description=""" Create or update tax rate """,
    tags=['tax_rate_handling'],
)
def tax_tax_rate_repository_v1_save_post(body: V1TaxRatesPostRequest = None):
    """
    taxRates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/taxRates',
    description=""" Create or update tax rate """,
    tags=['tax_rate_handling'],
)
def tax_tax_rate_repository_v1_save_put(body: V1TaxRatesPutRequest = None):
    """
    taxRates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/taxRates/search',
    description=""" Search TaxRates This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#TaxRateRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['tax_rate_handling'],
)
def tax_tax_rate_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    taxRates/search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/taxRates/{rateId}',
    description=""" Delete tax rate """,
    tags=['tax_rate_handling'],
)
def tax_tax_rate_repository_v1_delete_by_id_delete(
    rate_id: int = Path(..., alias='rateId')
):
    """
    taxRates/{rateId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/taxRates/{rateId}',
    description=""" Get tax rate """,
    tags=['tax_rate_handling'],
)
def tax_tax_rate_repository_v1_get_get(rate_id: int = Path(..., alias='rateId')):
    """
    taxRates/{rateId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/taxRules',
    description=""" Save TaxRule """,
    tags=['tax_rule_operations', 'tax_rate_handling'],
)
def tax_tax_rule_repository_v1_save_post(body: V1TaxRulesPostRequest = None):
    """
    taxRules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/taxRules',
    description=""" Save TaxRule """,
    tags=['tax_rule_operations', 'tax_rate_handling'],
)
def tax_tax_rule_repository_v1_save_put(body: V1TaxRulesPutRequest = None):
    """
    taxRules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/taxRules/search',
    description=""" Search TaxRules This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#TaxRuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['tax_rule_operations', 'tax_rate_handling'],
)
def tax_tax_rule_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    taxRules/search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/taxRules/{ruleId}',
    description=""" Delete TaxRule """,
    tags=['tax_rule_operations', 'tax_rate_handling'],
)
def tax_tax_rule_repository_v1_delete_by_id_delete(
    rule_id: int = Path(..., alias='ruleId')
):
    """
    taxRules/{ruleId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/taxRules/{ruleId}',
    description=""" Get TaxRule """,
    tags=['tax_rule_operations', 'tax_rate_handling'],
)
def tax_tax_rule_repository_v1_get_get(rule_id: int = Path(..., alias='ruleId')):
    """
    taxRules/{ruleId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/team/',
    description=""" Returns the list of teams for the specified search criteria (team name or description). """,
    tags=['team_management_operations'],
)
def company_team_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    team/
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/team/{companyId}',
    description=""" Create a team in the company structure. """,
    tags=[
        'team_management_operations',
        'company_operations',
        'role_management_in_companies',
    ],
)
def company_team_repository_v1_create_post(
    company_id: int = Path(..., alias='companyId'),
    body: V1TeamCompanyIdPostRequest = None,
):
    """
    team/{companyId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/V1/team/{teamId}',
    description=""" Delete a team from the company structure. """,
    tags=['team_management_operations'],
)
def company_team_repository_v1_delete_by_id_delete(
    team_id: int = Path(..., alias='teamId')
):
    """
    team/{teamId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/team/{teamId}',
    description=""" Returns data for a team in the company, by entity id. """,
    tags=['team_management_operations'],
)
def company_team_repository_v1_get_get(team_id: int = Path(..., alias='teamId')):
    """
    team/{teamId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/team/{teamId}',
    description=""" Update a team in the company structure. """,
    tags=['team_management_operations'],
)
def company_team_repository_v1_save_put(
    team_id: str = Path(..., alias='teamId'), body: V1TeamTeamIdPutRequest = None
):
    """
    team/{teamId}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/V1/temando/rma/{rmaId}/shipments',
    description=""" Assign platform shipment IDs to a core RMA entity. """,
    tags=[
        'rma_management_operations',
        'shipment_operations',
        'rma_tracking_operations',
    ],
)
def assign_shipment_ids_to_rma(
    rma_id: int = Path(..., alias='rmaId'),
    body: V1TemandoRmaRmaIdShipmentsPutRequest = None,
):
    """
    temando/rma/{rmaId}/shipments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/transactions',
    description=""" Lists transactions that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#TransactionRepositoryInterface to determine which call to use to get detailed information about all attributes for an object. """,
    tags=['sales_transaction_query_management', 'sales_transaction_detail_retrieval'],
)
def sales_transaction_repository_v1_get_list_get(
    search_criteria_filter_groups__0__filters__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][field]'
    ),
    search_criteria_filter_groups__0__filters__0__value_: Optional[str] = Query(
        None, alias='searchCriteria[filterGroups][0][filters][0][value]'
    ),
    search_criteria_filter_groups__0__filters__0__condition_type_: Optional[
        str
    ] = Query(None, alias='searchCriteria[filterGroups][0][filters][0][conditionType]'),
    search_criteria_sort_orders__0__field_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][field]'
    ),
    search_criteria_sort_orders__0__direction_: Optional[str] = Query(
        None, alias='searchCriteria[sortOrders][0][direction]'
    ),
    search_criteria_page_size_: Optional[int] = Query(
        None, alias='searchCriteria[pageSize]'
    ),
    search_criteria_current_page_: Optional[int] = Query(
        None, alias='searchCriteria[currentPage]'
    ),
):
    """
    transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/V1/transactions/{id}',
    description=""" Loads a specified transaction. """,
    tags=['sales_transaction_query_management', 'sales_transaction_detail_retrieval'],
)
def sales_transaction_repository_v1_get_get(id: int):
    """
    transactions/{id}
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/V1/worldpay-guest-carts/{cartId}/payment-information',
    description=""" Proxy handler for guest place order """,
    tags=[
        'guest_cart_operations',
        'payment_information_management',
        'guest_cart_payment_operations',
    ],
)
def submit_guest_cart_payment_info_and_place_order(
    cart_id: str = Path(..., alias='cartId'),
    body: V1WorldpayGuestCartsCartIdPaymentInformationPostRequest = None,
):
    """
    worldpay-guest-carts/{cartId}/payment-information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
