# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:48:26+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class AnalyticsDataLinkInterface(BaseModel):
    initialization_vector: str
    url: str


class AsynchronousOperationsDataBulkSummaryExtensionInterface(BaseModel):
    pass


class AsynchronousOperationsDataOperationExtensionInterface(BaseModel):
    pass


class AsynchronousOperationsDataSummaryOperationStatusInterface(BaseModel):
    error_code: int = Field(..., description='Error code')
    id: int = Field(..., description='Id')
    result_message: str = Field(..., description='Result message')
    status: int = Field(..., description='Operation status')


class BundleDataBundleOptionExtensionInterface(BaseModel):
    pass


class BundleDataBundleOptionInterface(BaseModel):
    extension_attributes: Optional[BundleDataBundleOptionExtensionInterface] = None
    option_id: int = Field(..., description='Bundle option id.')
    option_qty: int = Field(..., description='Bundle option quantity.')
    option_selections: List[int] = Field(
        ..., description='Bundle option selection ids.'
    )


class BundleDataLinkExtensionInterface(BaseModel):
    pass


class BundleDataLinkInterface(BaseModel):
    can_change_quantity: Optional[int] = Field(
        None, description='Whether quantity could be changed'
    )
    extension_attributes: Optional[BundleDataLinkExtensionInterface] = None
    id: Optional[str] = Field(None, description='The identifier')
    is_default: bool = Field(..., description='Is default')
    option_id: Optional[int] = Field(None, description='Option id')
    position: Optional[int] = Field(None, description='Position')
    price: float = Field(..., description='Price')
    price_type: int = Field(..., description='Price type')
    qty: Optional[float] = Field(None, description='Qty')
    sku: Optional[str] = Field(None, description='Linked product sku')


class BundleDataOptionExtensionInterface(BaseModel):
    pass


class BundleDataOptionInterface(BaseModel):
    extension_attributes: Optional[BundleDataOptionExtensionInterface] = None
    option_id: Optional[int] = Field(None, description='Option id')
    position: Optional[int] = Field(None, description='Option position')
    product_links: Optional[List[BundleDataLinkInterface]] = Field(
        None, description='Product links'
    )
    required: Optional[bool] = Field(None, description='Is required option')
    sku: Optional[str] = Field(None, description='Product sku')
    title: Optional[str] = Field(None, description='Option title')
    type: Optional[str] = Field(None, description='Input type')


class BundleDataOptionTypeExtensionInterface(BaseModel):
    pass


class BundleDataOptionTypeInterface(BaseModel):
    code: str = Field(..., description='Type code')
    extension_attributes: Optional[BundleDataOptionTypeExtensionInterface] = None
    label: str = Field(..., description='Type label')


class CatalogDataBasePriceExtensionInterface(BaseModel):
    pass


class CatalogDataBasePriceInterface(BaseModel):
    extension_attributes: Optional[CatalogDataBasePriceExtensionInterface] = None
    price: float = Field(..., description='Price.')
    sku: str = Field(..., description='SKU.')
    store_id: int = Field(..., description='Store id.')


class CatalogDataCategoryExtensionInterface(BaseModel):
    pass


class CatalogDataCategoryLinkExtensionInterface(BaseModel):
    pass


class CatalogDataCategoryLinkInterface(BaseModel):
    category_id: str = Field(..., description='Category id')
    extension_attributes: Optional[CatalogDataCategoryLinkExtensionInterface] = None
    position: Optional[int] = None


class CatalogDataCategoryProductLinkExtensionInterface(BaseModel):
    pass


class CatalogDataCategoryProductLinkInterface(BaseModel):
    category_id: str = Field(..., description='Category id')
    extension_attributes: Optional[CatalogDataCategoryProductLinkExtensionInterface] = (
        None
    )
    position: Optional[int] = None
    sku: Optional[str] = None


class CatalogDataCategoryTreeInterface(BaseModel):
    children_data: List[CatalogDataCategoryTreeInterface]
    id: Optional[int] = None
    is_active: bool = Field(..., description='Whether category is active')
    level: int = Field(..., description='Category level')
    name: str = Field(..., description='Category name')
    parent_id: int = Field(..., description='Parent category ID')
    position: int = Field(..., description='Category position')
    product_count: int = Field(..., description='Product count')


class CatalogDataCostExtensionInterface(BaseModel):
    pass


class CatalogDataCostInterface(BaseModel):
    cost: float = Field(..., description='Cost value.')
    extension_attributes: Optional[CatalogDataCostExtensionInterface] = None
    sku: str = Field(..., description='SKU.')
    store_id: int = Field(..., description='Store id.')


class CatalogDataEavAttributeExtensionInterface(BaseModel):
    pass


class CatalogDataPriceUpdateResultExtensionInterface(BaseModel):
    pass


class CatalogDataPriceUpdateResultInterface(BaseModel):
    extension_attributes: Optional[CatalogDataPriceUpdateResultExtensionInterface] = (
        None
    )
    message: str = Field(
        ...,
        description='Error message, that contains description of error occurred during price update.',
    )
    parameters: List[str] = Field(
        ...,
        description='Parameters, that could be displayed in error message placeholders.',
    )


class CatalogDataProductAttributeTypeExtensionInterface(BaseModel):
    pass


class CatalogDataProductAttributeTypeInterface(BaseModel):
    extension_attributes: Optional[
        CatalogDataProductAttributeTypeExtensionInterface
    ] = None
    label: str = Field(..., description='Type label')
    value: str = Field(..., description='Value')


class CatalogDataProductCustomOptionExtensionInterface(BaseModel):
    vertex_flex_field: Optional[str] = None


class CatalogDataProductCustomOptionTypeExtensionInterface(BaseModel):
    pass


class CatalogDataProductCustomOptionTypeInterface(BaseModel):
    code: str = Field(..., description='Option type code')
    extension_attributes: Optional[
        CatalogDataProductCustomOptionTypeExtensionInterface
    ] = None
    group: str = Field(..., description='Option type group')
    label: str = Field(..., description='Option type label')


class CatalogDataProductCustomOptionValuesInterface(BaseModel):
    option_type_id: Optional[int] = Field(None, description='Option type id')
    price: float = Field(..., description='Price')
    price_type: str = Field(..., description='Price type')
    sku: Optional[str] = Field(None, description='Sku')
    sort_order: int = Field(..., description='Sort order')
    title: str = Field(..., description='Option title')


class CatalogDataProductLinkAttributeExtensionInterface(BaseModel):
    pass


class CatalogDataProductLinkAttributeInterface(BaseModel):
    code: str = Field(..., description='Attribute code')
    extension_attributes: Optional[
        CatalogDataProductLinkAttributeExtensionInterface
    ] = None
    type: str = Field(..., description='Attribute type')


class CatalogDataProductLinkExtensionInterface(BaseModel):
    qty: Optional[float] = None


class CatalogDataProductLinkInterface(BaseModel):
    extension_attributes: Optional[CatalogDataProductLinkExtensionInterface] = None
    link_type: str = Field(..., description='Link type')
    linked_product_sku: str = Field(..., description='Linked product sku')
    linked_product_type: str = Field(
        ..., description='Linked product type (simple, virtual, etc)'
    )
    position: int = Field(..., description='Linked item position')
    sku: str = Field(..., description='SKU')


class CatalogDataProductLinkTypeExtensionInterface(BaseModel):
    pass


class CatalogDataProductLinkTypeInterface(BaseModel):
    code: int = Field(..., description='Link type code')
    extension_attributes: Optional[CatalogDataProductLinkTypeExtensionInterface] = None
    name: str = Field(..., description='Link type name')


class CatalogDataProductRenderButtonExtensionInterface(BaseModel):
    pass


class CatalogDataProductRenderButtonInterface(BaseModel):
    extension_attributes: Optional[CatalogDataProductRenderButtonExtensionInterface] = (
        None
    )
    post_data: str = Field(..., description='Post data')
    required_options: bool = Field(
        ..., description='Flag whether a product has options or not'
    )
    url: str = Field(..., description='Url, needed to add product to cart')


class CatalogDataProductRenderExtensionInterface(BaseModel):
    review_html: Optional[str] = None
    wishlist_button: Optional[CatalogDataProductRenderButtonInterface] = None


class CatalogDataProductRenderFormattedPriceInfoExtensionInterface(BaseModel):
    pass


class CatalogDataProductRenderFormattedPriceInfoInterface(BaseModel):
    extension_attributes: Optional[
        CatalogDataProductRenderFormattedPriceInfoExtensionInterface
    ] = None
    final_price: str = Field(..., description='Html with final price')
    max_price: str = Field(..., description='Max price of a product')
    max_regular_price: str = Field(..., description='Max regular price')
    minimal_price: str = Field(
        ..., description='The minimal price of the product or variation'
    )
    minimal_regular_price: str = Field(..., description='Minimal regular price')
    regular_price: str = Field(
        ...,
        description='Price - is price of product without discounts and special price with taxes and fixed product tax',
    )
    special_price: str = Field(..., description='Special price')


class CatalogDataProductRenderImageExtensionInterface(BaseModel):
    pass


class CatalogDataProductRenderImageInterface(BaseModel):
    code: str = Field(..., description='Image code')
    extension_attributes: Optional[CatalogDataProductRenderImageExtensionInterface] = (
        None
    )
    height: float = Field(..., description='Image height')
    label: str = Field(..., description='Image label')
    resized_height: float = Field(..., description='Resize height')
    resized_width: float = Field(..., description='Resize width')
    url: str = Field(..., description='Image url')
    width: float = Field(..., description='Image width in px')


class CatalogDataProductTierPriceExtensionInterface(BaseModel):
    percentage_value: Optional[float] = None
    website_id: Optional[int] = None


class CatalogDataProductTierPriceInterface(BaseModel):
    customer_group_id: int = Field(..., description='Customer group id')
    extension_attributes: Optional[CatalogDataProductTierPriceExtensionInterface] = None
    qty: float = Field(..., description='Tier qty')
    value: float = Field(..., description='Price value')


class CatalogDataProductTypeExtensionInterface(BaseModel):
    pass


class CatalogDataProductTypeInterface(BaseModel):
    extension_attributes: Optional[CatalogDataProductTypeExtensionInterface] = None
    label: str = Field(..., description='Product type label')
    name: str = Field(..., description='Product type code')


class CatalogDataProductWebsiteLinkInterface(BaseModel):
    sku: str
    website_id: int = Field(..., description='Website ids')


class CatalogDataSpecialPriceExtensionInterface(BaseModel):
    pass


class CatalogDataSpecialPriceInterface(BaseModel):
    extension_attributes: Optional[CatalogDataSpecialPriceExtensionInterface] = None
    price: float = Field(..., description='Product special price value.')
    price_from: str = Field(
        ..., description='Start date for special price in Y-m-d H:i:s format.'
    )
    price_to: str = Field(
        ..., description='End date for special price in Y-m-d H:i:s format.'
    )
    sku: str = Field(
        ..., description='SKU of product, that contains special price value.'
    )
    store_id: int = Field(
        ..., description='ID of store, that contains special price value.'
    )


class CatalogDataTierPriceExtensionInterface(BaseModel):
    pass


class CatalogDataTierPriceInterface(BaseModel):
    customer_group: str = Field(..., description='Customer group.')
    extension_attributes: Optional[CatalogDataTierPriceExtensionInterface] = None
    price: float = Field(..., description='Tier price.')
    price_type: str = Field(..., description='Tier price type.')
    quantity: float = Field(..., description='Quantity.')
    sku: str = Field(..., description='SKU.')
    website_id: int = Field(..., description='Website id.')


class CatalogInventoryDataStockItemExtensionInterface(BaseModel):
    pass


class CatalogInventoryDataStockItemInterface(BaseModel):
    backorders: int = Field(..., description='Backorders status')
    enable_qty_increments: bool = Field(
        ..., description='Whether Quantity Increments is enabled'
    )
    extension_attributes: Optional[CatalogInventoryDataStockItemExtensionInterface] = (
        None
    )
    is_decimal_divided: bool
    is_in_stock: bool = Field(..., description='Stock Availability')
    is_qty_decimal: bool
    item_id: Optional[int] = None
    low_stock_date: str
    manage_stock: bool = Field(..., description='Can Manage Stock')
    max_sale_qty: float = Field(
        ..., description='Maximum Qty Allowed in Shopping Cart data wrapper'
    )
    min_qty: float = Field(
        ..., description='Minimal quantity available for item status in stock'
    )
    min_sale_qty: float = Field(
        ...,
        description='Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation',
    )
    notify_stock_qty: float = Field(
        ..., description='Notify for Quantity Below data wrapper'
    )
    product_id: Optional[int] = None
    qty: float
    qty_increments: float = Field(..., description='Quantity Increments data wrapper')
    show_default_notification_message: bool
    stock_id: Optional[int] = Field(None, description='Stock identifier')
    stock_status_changed_auto: int
    use_config_backorders: bool
    use_config_enable_qty_inc: bool
    use_config_manage_stock: bool
    use_config_max_sale_qty: bool
    use_config_min_qty: bool
    use_config_min_sale_qty: int
    use_config_notify_stock_qty: bool
    use_config_qty_increments: bool


class CatalogInventoryDataStockStatusExtensionInterface(BaseModel):
    pass


class CatalogInventoryDataStockStatusInterface(BaseModel):
    extension_attributes: Optional[
        CatalogInventoryDataStockStatusExtensionInterface
    ] = None
    product_id: int
    qty: int
    stock_id: int
    stock_item: CatalogInventoryDataStockItemInterface
    stock_status: int


class CheckoutAgreementsDataAgreementExtensionInterface(BaseModel):
    pass


class CheckoutAgreementsDataAgreementInterface(BaseModel):
    agreement_id: int = Field(..., description='Agreement ID.')
    checkbox_text: str = Field(..., description='Agreement checkbox text.')
    content: str = Field(..., description='Agreement content.')
    content_height: Optional[str] = Field(
        None, description='Agreement content height. Otherwise, null.'
    )
    extension_attributes: Optional[
        CheckoutAgreementsDataAgreementExtensionInterface
    ] = None
    is_active: bool = Field(..., description='Agreement status.')
    is_html: bool = Field(..., description='* true - HTML. * false - plain text.')
    mode: int = Field(..., description='The agreement applied mode.')
    name: str = Field(..., description='Agreement name.')


class CheckoutDataPaymentDetailsExtensionInterface(BaseModel):
    pass


class CheckoutDataShippingInformationExtensionInterface(BaseModel):
    pass


class CheckoutDataTotalsInformationExtensionInterface(BaseModel):
    pass


class CmsDataBlockInterface(BaseModel):
    active: Optional[bool] = Field(None, description='Active')
    content: Optional[str] = Field(None, description='Content')
    creation_time: Optional[str] = Field(None, description='Creation time')
    id: Optional[int] = Field(None, description='ID')
    identifier: str = Field(..., description='Identifier')
    title: Optional[str] = Field(None, description='Title')
    update_time: Optional[str] = Field(None, description='Update time')


class CmsDataPageInterface(BaseModel):
    active: Optional[bool] = Field(None, description='Active')
    content: Optional[str] = Field(None, description='Content')
    content_heading: Optional[str] = Field(None, description='Content heading')
    creation_time: Optional[str] = Field(None, description='Creation time')
    custom_layout_update_xml: Optional[str] = Field(
        None, description='Custom layout update xml'
    )
    custom_root_template: Optional[str] = Field(
        None, description='Custom root template'
    )
    custom_theme: Optional[str] = Field(None, description='Custom theme')
    custom_theme_from: Optional[str] = Field(None, description='Custom theme from')
    custom_theme_to: Optional[str] = Field(None, description='Custom theme to')
    id: Optional[int] = Field(None, description='ID')
    identifier: str = Field(..., description='Identifier')
    layout_update_xml: Optional[str] = Field(None, description='Layout update xml')
    meta_description: Optional[str] = Field(None, description='Meta description')
    meta_keywords: Optional[str] = Field(None, description='Meta keywords')
    meta_title: Optional[str] = Field(None, description='Meta title')
    page_layout: Optional[str] = Field(None, description='Page layout')
    sort_order: Optional[str] = Field(None, description='Sort order')
    title: Optional[str] = Field(None, description='Title')
    update_time: Optional[str] = Field(None, description='Update time')


class CompanyCreditDataCreditBalanceOptionsInterface(BaseModel):
    currency_base: str = Field(..., description='Currency base.')
    currency_display: str = Field(..., description='Currency display.')
    order_increment: str = Field(..., description='Order increment.')
    purchase_order: str = Field(..., description='Purchase order number.')


class CompanyCreditDataCreditDataInterface(BaseModel):
    available_limit: Optional[float] = Field(None, description='Available Limit.')
    balance: Optional[float] = Field(None, description='Balance.')
    company_id: Optional[int] = Field(None, description='Company id.')
    credit_limit: Optional[float] = Field(None, description='Credit Limit.')
    currency_code: Optional[str] = Field(None, description='Currency Code.')
    exceed_limit: bool = Field(..., description='Exceed Limit.')
    id: Optional[int] = Field(None, description='ID.')


class CompanyCreditDataCreditLimitExtensionInterface(BaseModel):
    pass


class CompanyCreditDataCreditLimitInterface(BaseModel):
    available_limit: Optional[float] = Field(None, description='Available Limit.')
    balance: Optional[float] = Field(None, description='Balance.')
    company_id: Optional[int] = Field(None, description='Company id.')
    credit_comment: Optional[str] = Field(
        None, description='Credit comment for company credit history.'
    )
    credit_limit: Optional[float] = Field(None, description='Credit Limit.')
    currency_code: Optional[str] = Field(None, description='Currency Code.')
    exceed_limit: bool = Field(..., description='Exceed Limit.')
    extension_attributes: Optional[CompanyCreditDataCreditLimitExtensionInterface] = (
        None
    )
    id: Optional[int] = Field(None, description='ID.')


class CompanyCreditDataHistoryDataInterface(BaseModel):
    amount: float = Field(..., description='Amount.')
    available_limit: Optional[float] = Field(None, description='Available limit.')
    balance: float = Field(..., description='Outstanding balance.')
    comment: Optional[str] = Field(None, description='Comment.')
    company_credit_id: Optional[int] = Field(None, description='Company credit id.')
    credit_limit: float = Field(..., description='Credit limit.')
    currency_credit: Optional[str] = Field(None, description='Currency code of credit.')
    currency_operation: Optional[str] = Field(
        None, description='Currency code of operation.'
    )
    datetime: Optional[str] = Field(None, description='Operation datetime.')
    id: Optional[int] = Field(None, description='ID.')
    purchase_order: Optional[str] = Field(None, description='Purchase Order number.')
    rate: float = Field(
        ..., description='Currency rate between credit and operation currencies.'
    )
    rate_credit: Optional[float] = Field(
        None, description='Rate between credit and base currencies.'
    )
    type: Optional[int] = Field(None, description='Type of operation.')
    user_id: Optional[int] = Field(None, description='User Id.')
    user_type: Optional[int] = Field(
        None, description='User type: integration, admin, customer.'
    )


class CompanyDataCompanyCustomerExtensionInterface(BaseModel):
    pass


class CompanyDataCompanyCustomerInterface(BaseModel):
    company_id: Optional[int] = Field(None, description='Company ID.')
    customer_id: Optional[int] = Field(None, description='Customer ID.')
    extension_attributes: Optional[CompanyDataCompanyCustomerExtensionInterface] = None
    job_title: Optional[str] = Field(None, description='Get job title.')
    status: Optional[int] = Field(None, description='Customer status.')
    telephone: Optional[str] = Field(None, description='Get telephone.')


class CompanyDataCompanyOrderExtensionInterface(BaseModel):
    pass


class CompanyDataCompanyOrderInterface(BaseModel):
    company_id: Optional[int] = Field(None, description='Company ID.')
    company_name: Optional[str] = Field(None, description='Company name.')
    extension_attributes: Optional[CompanyDataCompanyOrderExtensionInterface] = None
    order_id: Optional[int] = Field(None, description='Order ID.')


class CompanyDataHierarchyExtensionInterface(BaseModel):
    pass


class CompanyDataHierarchyInterface(BaseModel):
    entity_id: Optional[int] = Field(None, description='Entity ID.')
    entity_type: Optional[str] = Field(None, description='Entity type.')
    extension_attributes: Optional[CompanyDataHierarchyExtensionInterface] = None
    structure_id: Optional[int] = Field(None, description='Structure ID.')
    structure_parent_id: Optional[int] = Field(None, description='Structure parent ID.')


class CompanyDataPermissionInterface(BaseModel):
    id: Optional[int] = Field(None, description='Id.')
    permission: str = Field(..., description='Permission.')
    resource_id: str = Field(..., description='Resource id.')
    role_id: Optional[int] = Field(None, description='Role id.')


class CompanyDataRoleExtensionInterface(BaseModel):
    pass


class CompanyDataRoleInterface(BaseModel):
    company_id: Optional[int] = Field(None, description='Company id.')
    extension_attributes: Optional[CompanyDataRoleExtensionInterface] = None
    id: Optional[int] = Field(None, description='Role id.')
    permissions: List[CompanyDataPermissionInterface] = Field(
        ..., description='Permissions.'
    )
    role_name: Optional[str] = Field(None, description='Role name.')


class CompanyDataTeamExtensionInterface(BaseModel):
    pass


class ConfigurableProductDataConfigurableItemOptionValueExtensionInterface(BaseModel):
    pass


class ConfigurableProductDataConfigurableItemOptionValueInterface(BaseModel):
    extension_attributes: Optional[
        ConfigurableProductDataConfigurableItemOptionValueExtensionInterface
    ] = None
    option_id: str = Field(..., description='Option SKU')
    option_value: Optional[int] = Field(None, description='Item id')


class ConfigurableProductDataOptionExtensionInterface(BaseModel):
    pass


class ConfigurableProductDataOptionValueExtensionInterface(BaseModel):
    pass


class ConfigurableProductDataOptionValueInterface(BaseModel):
    extension_attributes: Optional[
        ConfigurableProductDataOptionValueExtensionInterface
    ] = None
    value_index: int


class CustomerDataAddressExtensionInterface(BaseModel):
    pass


class CustomerDataCustomerExtensionInterface(BaseModel):
    amazon_id: Optional[str] = None
    company_attributes: Optional[CompanyDataCompanyCustomerInterface] = None
    is_subscribed: Optional[bool] = None
    vertex_customer_code: Optional[str] = None


class CustomerDataGroupExtensionInterface(BaseModel):
    pass


class CustomerDataGroupInterface(BaseModel):
    code: str = Field(..., description='Code')
    extension_attributes: Optional[CustomerDataGroupExtensionInterface] = None
    id: Optional[int] = Field(None, description='Id')
    tax_class_id: int = Field(..., description='Tax class id')
    tax_class_name: Optional[str] = Field(None, description='Tax class name')


class CustomerDataOptionInterface(BaseModel):
    label: str = Field(..., description='Option label')
    options: Optional[List[CustomerDataOptionInterface]] = Field(
        None, description='Nested options'
    )
    value: Optional[str] = Field(None, description='Option value')


class CustomerDataRegionExtensionInterface(BaseModel):
    pass


class CustomerDataRegionInterface(BaseModel):
    extension_attributes: Optional[CustomerDataRegionExtensionInterface] = None
    region: str = Field(..., description='Region')
    region_code: str = Field(..., description='Region code')
    region_id: int = Field(..., description='Region id')


class CustomerDataValidationResultsInterface(BaseModel):
    messages: List[str] = Field(
        ...,
        description='Error messages as array in case of validation failure, else return empty array.',
    )
    valid: bool = Field(..., description='If the provided data is valid.')


class CustomerDataValidationRuleInterface(BaseModel):
    name: str = Field(..., description='Validation rule name')
    value: str = Field(..., description='Validation rule value')


class DirectoryDataCountryInformationExtensionInterface(BaseModel):
    pass


class DirectoryDataCurrencyInformationExtensionInterface(BaseModel):
    pass


class DirectoryDataExchangeRateExtensionInterface(BaseModel):
    pass


class DirectoryDataExchangeRateInterface(BaseModel):
    currency_to: str = Field(
        ..., description='The currency code associated with the exchange rate.'
    )
    extension_attributes: Optional[DirectoryDataExchangeRateExtensionInterface] = None
    rate: float = Field(
        ...,
        description="The exchange rate for the associated currency and the store's base currency.",
    )


class DirectoryDataRegionInformationExtensionInterface(BaseModel):
    pass


class DirectoryDataRegionInformationInterface(BaseModel):
    code: str = Field(..., description='Region code')
    extension_attributes: Optional[DirectoryDataRegionInformationExtensionInterface] = (
        None
    )
    id: str = Field(..., description='Region id')
    name: str = Field(..., description='Region name')


class DownloadableDataDownloadableOptionInterface(BaseModel):
    downloadable_links: List[int] = Field(
        ..., description='The list of downloadable links'
    )


class DownloadableDataFileContentExtensionInterface(BaseModel):
    pass


class DownloadableDataFileContentInterface(BaseModel):
    extension_attributes: Optional[DownloadableDataFileContentExtensionInterface] = None
    file_data: str = Field(..., description='Data (base64 encoded content)')
    name: str = Field(..., description='File name')


class DownloadableDataLinkExtensionInterface(BaseModel):
    pass


class DownloadableDataLinkInterface(BaseModel):
    extension_attributes: Optional[DownloadableDataLinkExtensionInterface] = None
    id: Optional[int] = Field(None, description='Sample(or link) id')
    is_shareable: int = Field(..., description='Shareable status')
    link_file: Optional[str] = Field(None, description='relative file path')
    link_file_content: Optional[DownloadableDataFileContentInterface] = None
    link_type: str
    link_url: Optional[str] = Field(
        None, description="Link url or null when type is 'file'"
    )
    number_of_downloads: Optional[int] = Field(
        None, description='Of downloads per user'
    )
    price: float = Field(..., description='Price')
    sample_file: Optional[str] = Field(None, description='relative file path')
    sample_file_content: Optional[DownloadableDataFileContentInterface] = None
    sample_type: str
    sample_url: Optional[str] = Field(None, description='file URL')
    sort_order: int
    title: Optional[str] = None


class DownloadableDataSampleExtensionInterface(BaseModel):
    pass


class DownloadableDataSampleInterface(BaseModel):
    extension_attributes: Optional[DownloadableDataSampleExtensionInterface] = None
    id: Optional[int] = Field(None, description='Sample(or link) id')
    sample_file: Optional[str] = Field(None, description='relative file path')
    sample_file_content: Optional[DownloadableDataFileContentInterface] = None
    sample_type: str
    sample_url: Optional[str] = Field(None, description='file URL')
    sort_order: int = Field(..., description='Order index for sample')
    title: str = Field(..., description='Title')


class EavDataAttributeFrontendLabelInterface(BaseModel):
    label: Optional[str] = Field(None, description='Option label')
    store_id: Optional[int] = Field(None, description='Store id')


class EavDataAttributeGroupExtensionInterface(BaseModel):
    attribute_group_code: Optional[str] = None
    sort_order: Optional[str] = None


class EavDataAttributeGroupInterface(BaseModel):
    attribute_group_id: Optional[str] = Field(None, description='Id')
    attribute_group_name: Optional[str] = Field(None, description='Name')
    attribute_set_id: Optional[int] = Field(None, description='Attribute set id')
    extension_attributes: Optional[EavDataAttributeGroupExtensionInterface] = None


class EavDataAttributeOptionLabelInterface(BaseModel):
    label: Optional[str] = Field(None, description='Option label')
    store_id: Optional[int] = Field(None, description='Store id')


class EavDataAttributeSetExtensionInterface(BaseModel):
    pass


class EavDataAttributeSetInterface(BaseModel):
    attribute_set_id: Optional[int] = Field(None, description='Attribute set ID')
    attribute_set_name: str = Field(..., description='Attribute set name')
    entity_type_id: Optional[int] = Field(
        None, description='Attribute set entity type id'
    )
    extension_attributes: Optional[EavDataAttributeSetExtensionInterface] = None
    sort_order: int = Field(..., description='Attribute set sort order index')


class EavDataAttributeValidationRuleInterface(BaseModel):
    key: str = Field(..., description='Object key')
    value: str = Field(..., description='Object value')


class ErrorParametersItem(BaseModel):
    fieldName: Optional[str] = Field(None, description='Missing or invalid field name')
    fieldValue: Optional[str] = Field(None, description='Incorrect field value')
    resources: Optional[str] = Field(None, description='ACL resource')


class FrameworkAttributeInterface(BaseModel):
    attribute_code: str = Field(..., description='Attribute code')
    value: str = Field(..., description='Attribute value')


class FrameworkCriteriaInterface(BaseModel):
    criteria_list: List[FrameworkCriteriaInterface] = Field(
        ..., description='Criteria objects added to current Composite Criteria'
    )
    filters: List[str] = Field(..., description='List of filters')
    limit: List[str] = Field(..., description='Limit')
    mapper_interface_name: str = Field(
        ..., description='Associated Mapper Interface name'
    )
    orders: List[str] = Field(..., description='Ordering criteria')


class FrameworkDataImageContentInterface(BaseModel):
    base64_encoded_data: str = Field(
        ..., description='Media data (base64 encoded content)'
    )
    name: str = Field(..., description='Image name')
    type: str = Field(..., description='MIME type')


class FrameworkDataVideoContentInterface(BaseModel):
    media_type: str = Field(..., description='MIME type')
    video_description: str = Field(..., description='Video Description')
    video_metadata: str = Field(..., description='Metadata')
    video_provider: str = Field(..., description='Provider')
    video_title: str = Field(..., description='Title')
    video_url: str = Field(..., description='Video URL')


class FrameworkFilter(BaseModel):
    condition_type: Optional[str] = Field(None, description='Condition type')
    field: str = Field(..., description='Field')
    value: str = Field(..., description='Value')


class FrameworkMetadataObjectInterface(BaseModel):
    attribute_code: str = Field(..., description='Code of the attribute.')


class FrameworkSearchAggregationValueInterface(BaseModel):
    metrics: List[str] = Field(..., description='Metrics')
    value: str = Field(..., description='Aggregation')


class FrameworkSearchBucketInterface(BaseModel):
    name: str = Field(..., description='Field name')
    values: List[FrameworkSearchAggregationValueInterface] = Field(
        ..., description='Field values'
    )


class FrameworkSearchDocumentInterface(BaseModel):
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    id: int


class FrameworkSearchFilterGroup(BaseModel):
    filters: Optional[List[FrameworkFilter]] = Field(
        None, description='A list of filters in this group'
    )


class FrameworkSortOrder(BaseModel):
    direction: str = Field(..., description='Sorting direction.')
    field: str = Field(..., description='Sorting field.')


class GiftCardAccountDataGiftCardAccountExtensionInterface(BaseModel):
    pass


class GiftCardAccountDataGiftCardAccountInterface(BaseModel):
    base_gift_cards_amount: float = Field(
        ..., description='Cards amount in base currency'
    )
    base_gift_cards_amount_used: float = Field(
        ..., description='Cards amount used in base currency'
    )
    extension_attributes: Optional[
        GiftCardAccountDataGiftCardAccountExtensionInterface
    ] = None
    gift_cards: List[str] = Field(..., description='Cards codes')
    gift_cards_amount: float = Field(..., description='Cards amount in quote currency')
    gift_cards_amount_used: float = Field(
        ..., description='Cards amount used in quote currency'
    )


class GiftCardAccountDataGiftCardInterface(BaseModel):
    amount: float = Field(..., description='Amount')
    base_amount: float = Field(..., description='Base Amount')
    code: str = Field(..., description='Code')
    id: int = Field(..., description='Id')


class GiftCardDataGiftCardOptionExtensionInterface(BaseModel):
    pass


class GiftCardDataGiftCardOptionInterface(BaseModel):
    custom_giftcard_amount: Optional[float] = Field(
        None, description='Gift card open amount value.'
    )
    extension_attributes: Optional[GiftCardDataGiftCardOptionExtensionInterface] = None
    giftcard_amount: str = Field(..., description='Gift card amount.')
    giftcard_message: Optional[str] = Field(None, description='Giftcard message.')
    giftcard_recipient_email: str = Field(..., description='Gift card recipient email.')
    giftcard_recipient_name: str = Field(..., description='Gift card recipient name.')
    giftcard_sender_email: str = Field(..., description='Gift card sender email.')
    giftcard_sender_name: str = Field(..., description='Gift card sender name.')


class GiftCardDataGiftcardAmountExtensionInterface(BaseModel):
    pass


class GiftCardDataGiftcardAmountInterface(BaseModel):
    attribute_id: int
    extension_attributes: Optional[GiftCardDataGiftcardAmountExtensionInterface] = None
    value: float
    website_id: int
    website_value: float


class GiftMessageDataMessageExtensionInterface(BaseModel):
    entity_id: Optional[str] = None
    entity_type: Optional[str] = None
    wrapping_add_printed_card: Optional[bool] = None
    wrapping_allow_gift_receipt: Optional[bool] = None
    wrapping_id: Optional[int] = None


class GiftMessageDataMessageInterface(BaseModel):
    customer_id: Optional[int] = Field(
        None, description='Customer ID. Otherwise, null.'
    )
    extension_attributes: Optional[GiftMessageDataMessageExtensionInterface] = None
    gift_message_id: Optional[int] = Field(
        None, description='Gift message ID. Otherwise, null.'
    )
    message: str = Field(..., description='Message text.')
    recipient: str = Field(..., description='Recipient name.')
    sender: str = Field(..., description='Sender name.')


class GiftWrappingDataWrappingExtensionInterface(BaseModel):
    pass


class GiftWrappingDataWrappingInterface(BaseModel):
    base_currency_code: Optional[str] = None
    base_price: float
    design: str
    extension_attributes: Optional[GiftWrappingDataWrappingExtensionInterface] = None
    image_base64_content: Optional[str] = None
    image_name: Optional[str] = None
    image_url: Optional[str] = Field(None, description='Wrapping image URL.')
    status: int
    website_ids: Optional[List[int]] = None
    wrapping_id: Optional[int] = None


class MsrpDataProductRenderMsrpPriceInfoExtensionInterface(BaseModel):
    pass


class MsrpDataProductRenderMsrpPriceInfoInterface(BaseModel):
    explanation_message: str
    extension_attributes: Optional[
        MsrpDataProductRenderMsrpPriceInfoExtensionInterface
    ] = None
    is_applicable: str
    is_shown_price_on_gesture: str
    msrp_message: str
    msrp_price: str


class NegotiableQuoteDataAttachmentContentExtensionInterface(BaseModel):
    pass


class NegotiableQuoteDataAttachmentContentInterface(BaseModel):
    base64_encoded_data: str = Field(
        ..., description='Media data (base64 encoded content).'
    )
    extension_attributes: Optional[
        NegotiableQuoteDataAttachmentContentExtensionInterface
    ] = None
    name: str = Field(..., description='File name.')
    type: str = Field(..., description='MIME type.')


class NegotiableQuoteDataCommentAttachmentExtensionInterface(BaseModel):
    pass


class NegotiableQuoteDataCommentAttachmentInterface(BaseModel):
    attachment_id: int = Field(..., description='Attachment ID.')
    comment_id: int = Field(..., description='Comment ID.')
    extension_attributes: Optional[
        NegotiableQuoteDataCommentAttachmentExtensionInterface
    ] = None
    file_name: str = Field(..., description='File name.')
    file_path: str = Field(..., description='File path.')
    file_type: str = Field(..., description='File type.')


class NegotiableQuoteDataCommentExtensionInterface(BaseModel):
    pass


class NegotiableQuoteDataCommentInterface(BaseModel):
    attachments: List[NegotiableQuoteDataCommentAttachmentInterface] = Field(
        ..., description='Existing attachments.'
    )
    comment: str = Field(..., description='Comment.')
    created_at: str = Field(..., description='Comment created at.')
    creator_id: int = Field(..., description='Comment creator ID.')
    creator_type: int = Field(..., description='The comment creator type.')
    entity_id: int = Field(..., description='Comment ID.')
    extension_attributes: Optional[NegotiableQuoteDataCommentExtensionInterface] = None
    is_decline: int = Field(..., description='Is quote was declined by seller.')
    is_draft: int = Field(..., description='Is quote draft flag.')
    parent_id: int = Field(
        ..., description='Negotiable quote ID, that this comment belongs to.'
    )


class NegotiableQuoteDataCompanyQuoteConfigExtensionInterface(BaseModel):
    pass


class NegotiableQuoteDataCompanyQuoteConfigInterface(BaseModel):
    company_id: Optional[str] = Field(None, description='Company id')
    extension_attributes: Optional[
        NegotiableQuoteDataCompanyQuoteConfigExtensionInterface
    ] = None
    is_quote_enabled: bool = Field(..., description='Quote enabled for company')


class NegotiableQuoteDataNegotiableQuoteExtensionInterface(BaseModel):
    pass


class NegotiableQuoteDataNegotiableQuoteInterface(BaseModel):
    applied_rule_ids: str = Field(..., description='Quote rules.')
    base_negotiated_total_price: Optional[float] = Field(
        None, description='Quote negotiated total price in base currency.'
    )
    base_original_total_price: Optional[float] = Field(
        None, description='Quote original total price in base currency.'
    )
    creator_id: int = Field(..., description='Quote creator id.')
    creator_type: int = Field(..., description='Quote creator type.')
    deleted_sku: str = Field(..., description='Deleted products sku.')
    email_notification_status: int = Field(
        ..., description='Email notification status.'
    )
    expiration_period: str = Field(..., description='Expiration period.')
    extension_attributes: Optional[
        NegotiableQuoteDataNegotiableQuoteExtensionInterface
    ] = None
    has_unconfirmed_changes: bool = Field(..., description='Has unconfirmed changes.')
    is_address_draft: bool = Field(..., description='Is address draft.')
    is_customer_price_changed: bool = Field(..., description='Customer price changes.')
    is_regular_quote: bool = Field(..., description='Is regular quote.')
    is_shipping_tax_changed: bool = Field(..., description='Shipping tax changes.')
    negotiated_price_type: int = Field(..., description='Negotiated price type.')
    negotiated_price_value: float = Field(..., description='Negotiated price value.')
    negotiated_total_price: Optional[float] = Field(
        None, description='Quote negotiated total price.'
    )
    notifications: int = Field(..., description='Quote notifications.')
    original_total_price: Optional[float] = Field(
        None, description='Quote original total price.'
    )
    quote_id: int = Field(..., description='Negotiable quote ID.')
    quote_name: str = Field(..., description='Negotiable quote name.')
    shipping_price: float = Field(..., description='Proposed shipping price.')
    status: str = Field(..., description='Negotiable quote status.')


class NegotiableQuoteDataNegotiableQuoteItemExtensionInterface(BaseModel):
    pass


class NegotiableQuoteDataNegotiableQuoteItemInterface(BaseModel):
    extension_attributes: Optional[
        NegotiableQuoteDataNegotiableQuoteItemExtensionInterface
    ] = None
    item_id: int = Field(..., description='Quote item id')
    original_discount_amount: float = Field(
        ..., description='Quote item original discount amount'
    )
    original_price: float = Field(..., description='Quote item original price')
    original_tax_amount: float = Field(
        ..., description='Quote item original tax amount'
    )


class NegotiableQuoteDataNegotiableQuoteItemTotalsExtensionInterface(BaseModel):
    pass


class NegotiableQuoteDataNegotiableQuoteItemTotalsInterface(BaseModel):
    base_cart_price: float = Field(
        ..., description='Cart price for quote item in base currency.'
    )
    base_cart_price_incl_tax: float = Field(
        ..., description='Cart price with included tax for quote item in base currency.'
    )
    base_cart_tax: float = Field(
        ..., description='Tax from catalog price for quote item in base currency.'
    )
    base_catalog_price: float = Field(
        ..., description='Catalog price for quote item in base currency.'
    )
    base_catalog_price_incl_tax: float = Field(
        ...,
        description='Catalog price with included tax for quote item in base currency.',
    )
    cart_price: float = Field(..., description='Cart price for quote item.')
    cart_price_incl_tax: float = Field(
        ..., description='Cart price with included tax for quote item.'
    )
    cart_tax: float = Field(..., description='Tax from catalog price for quote item.')
    catalog_price: float = Field(..., description='Catalog price for quote item.')
    catalog_price_incl_tax: float = Field(
        ..., description='Catalog price with included tax for quote item.'
    )
    cost: float = Field(..., description='Cost for quote item.')
    extension_attributes: Optional[
        NegotiableQuoteDataNegotiableQuoteItemTotalsExtensionInterface
    ] = None


class NegotiableQuoteDataNegotiableQuoteTotalsInterface(BaseModel):
    base_cost_total: float = Field(
        ..., description='Total cost for quote in base currency.'
    )
    base_original_price_incl_tax: float = Field(
        ..., description='Original price with included tax for quote in base currency.'
    )
    base_original_tax: float = Field(
        ..., description='Original tax amount for quote in base currency.'
    )
    base_original_total: float = Field(
        ..., description='Original quote total in base currency.'
    )
    base_to_quote_rate: float = Field(
        ..., description='Base currency to quote currency rate.'
    )
    cost_total: float = Field(..., description='Total cost for quote.')
    created_at: str = Field(..., description='The cart creation date and time.')
    customer_group: int = Field(..., description='Customer group id.')
    items_count: int = Field(
        ..., description='The number of different items or products in the cart.'
    )
    negotiated_price_type: int = Field(..., description='Negotiable quote type.')
    negotiated_price_value: float = Field(
        ..., description='Negotiable price value for quote.'
    )
    original_price_incl_tax: float = Field(
        ..., description='Original price with included tax for quote.'
    )
    original_tax: float = Field(..., description='Original tax amount for quote.')
    original_total: float = Field(..., description='Original quote total.')
    quote_status: str = Field(..., description='Negotiable quote status.')
    updated_at: str = Field(..., description='The cart last update date and time.')


class PaymentDataPaymentAdditionalInfoInterface(BaseModel):
    key: str = Field(..., description='Object key')
    value: str = Field(..., description='Object value')


class QuoteDataAddressExtensionInterface(BaseModel):
    checkout_fields: Optional[List[FrameworkAttributeInterface]] = None
    gift_registry_id: Optional[int] = None


class QuoteDataAddressInterface(BaseModel):
    city: str = Field(..., description='City name')
    company: Optional[str] = Field(None, description='Company')
    country_id: str = Field(..., description='Country id')
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    customer_address_id: Optional[int] = Field(None, description='Customer address id')
    customer_id: Optional[int] = Field(None, description='Customer id')
    email: str = Field(..., description='Billing/shipping email')
    extension_attributes: Optional[QuoteDataAddressExtensionInterface] = None
    fax: Optional[str] = Field(None, description='Fax number')
    firstname: str = Field(..., description='First name')
    id: Optional[int] = Field(None, description='Id')
    lastname: str = Field(..., description='Last name')
    middlename: Optional[str] = Field(None, description='Middle name')
    postcode: str = Field(..., description='Postcode')
    prefix: Optional[str] = Field(None, description='Prefix')
    region: str = Field(..., description='Region name')
    region_code: str = Field(..., description='Region code')
    region_id: int = Field(..., description='Region id')
    same_as_billing: Optional[int] = Field(None, description='Same as billing flag')
    save_in_address_book: Optional[int] = Field(
        None, description='Save in address book flag'
    )
    street: List[str] = Field(..., description='Street')
    suffix: Optional[str] = Field(None, description='Suffix')
    telephone: str = Field(..., description='Telephone number')
    vat_id: Optional[str] = Field(None, description='Vat id')


class QuoteDataCartItemExtensionInterface(BaseModel):
    negotiable_quote_item: Optional[NegotiableQuoteDataNegotiableQuoteItemInterface] = (
        None
    )


class QuoteDataCurrencyExtensionInterface(BaseModel):
    pass


class QuoteDataCurrencyInterface(BaseModel):
    base_currency_code: Optional[str] = Field(None, description='Base currency code')
    base_to_global_rate: Optional[float] = Field(
        None, description='Base currency to global currency rate'
    )
    base_to_quote_rate: Optional[float] = Field(
        None, description='Base currency to quote currency rate'
    )
    extension_attributes: Optional[QuoteDataCurrencyExtensionInterface] = None
    global_currency_code: Optional[str] = Field(
        None, description='Global currency code'
    )
    quote_currency_code: Optional[str] = Field(None, description='Quote currency code')
    store_currency_code: Optional[str] = Field(None, description='Store currency code')
    store_to_base_rate: Optional[float] = Field(
        None, description='Store currency to base currency rate'
    )
    store_to_quote_rate: Optional[float] = Field(
        None, description='Store currency to quote currency rate'
    )


class QuoteDataPaymentExtensionInterface(BaseModel):
    agreement_ids: Optional[List[str]] = None


class QuoteDataPaymentInterface(BaseModel):
    additional_data: Optional[List[str]] = Field(
        None, description='Payment additional details'
    )
    extension_attributes: Optional[QuoteDataPaymentExtensionInterface] = None
    method: str = Field(..., description='Payment method code')
    po_number: Optional[str] = Field(None, description='Purchase order number')


class QuoteDataPaymentMethodInterface(BaseModel):
    code: str = Field(..., description='Payment method code')
    title: str = Field(..., description='Payment method title')


class QuoteDataShippingAssignmentExtensionInterface(BaseModel):
    pass


class QuoteDataShippingExtensionInterface(BaseModel):
    pass


class QuoteDataShippingInterface(BaseModel):
    address: QuoteDataAddressInterface
    extension_attributes: Optional[QuoteDataShippingExtensionInterface] = None
    method: str = Field(..., description='Shipping method')


class QuoteDataShippingMethodExtensionInterface(BaseModel):
    pass


class QuoteDataShippingMethodInterface(BaseModel):
    amount: float = Field(..., description='Shipping amount in store currency.')
    available: bool = Field(
        ...,
        description='The value of the availability flag for the current shipping method.',
    )
    base_amount: float = Field(..., description='Shipping amount in base currency.')
    carrier_code: str = Field(..., description='Shipping carrier code.')
    carrier_title: Optional[str] = Field(
        None, description='Shipping carrier title. Otherwise, null.'
    )
    error_message: str = Field(..., description='Shipping Error message.')
    extension_attributes: Optional[QuoteDataShippingMethodExtensionInterface] = None
    method_code: str = Field(..., description='Shipping method code.')
    method_title: Optional[str] = Field(
        None, description='Shipping method title. Otherwise, null.'
    )
    price_excl_tax: float = Field(..., description='Shipping price excl tax.')
    price_incl_tax: float = Field(..., description='Shipping price incl tax.')


class QuoteDataTotalsAdditionalDataExtensionInterface(BaseModel):
    gift_messages: Optional[List[GiftMessageDataMessageInterface]] = None


class QuoteDataTotalsAdditionalDataInterface(BaseModel):
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    extension_attributes: Optional[QuoteDataTotalsAdditionalDataExtensionInterface] = (
        None
    )


class QuoteDataTotalsExtensionInterface(BaseModel):
    base_customer_balance_amount: Optional[float] = None
    base_reward_currency_amount: Optional[float] = None
    coupon_label: Optional[str] = None
    customer_balance_amount: Optional[float] = None
    negotiable_quote_totals: Optional[
        NegotiableQuoteDataNegotiableQuoteTotalsInterface
    ] = None
    reward_currency_amount: Optional[float] = None
    reward_points_balance: Optional[float] = None


class QuoteDataTotalsItemExtensionInterface(BaseModel):
    negotiable_quote_item_totals: Optional[
        NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
    ] = None


class QuoteDataTotalsItemInterface(BaseModel):
    base_discount_amount: Optional[float] = Field(
        None, description='Discount amount in base currency. Otherwise, null.'
    )
    base_price: float = Field(..., description='Item price in base currency.')
    base_price_incl_tax: Optional[float] = Field(
        None, description='Price including tax in base currency. Otherwise, null.'
    )
    base_row_total: float = Field(..., description='Row total in base currency.')
    base_row_total_incl_tax: Optional[float] = Field(
        None, description='Row total including tax in base currency. Otherwise, null.'
    )
    base_tax_amount: Optional[float] = Field(
        None, description='Tax amount in base currency. Otherwise, null.'
    )
    discount_amount: Optional[float] = Field(
        None, description='Discount amount in quote currency. Otherwise, null.'
    )
    discount_percent: Optional[float] = Field(
        None, description='Discount percent. Otherwise, null.'
    )
    extension_attributes: Optional[QuoteDataTotalsItemExtensionInterface] = None
    item_id: int = Field(..., description='Item id')
    name: Optional[str] = Field(None, description='Product name. Otherwise, null.')
    options: str = Field(..., description='Item price in quote currency.')
    price: float = Field(..., description='Item price in quote currency.')
    price_incl_tax: Optional[float] = Field(
        None, description='Price including tax in quote currency. Otherwise, null.'
    )
    qty: float = Field(..., description='Item quantity.')
    row_total: float = Field(..., description='Row total in quote currency.')
    row_total_incl_tax: Optional[float] = Field(
        None, description='Row total including tax in quote currency. Otherwise, null.'
    )
    row_total_with_discount: Optional[float] = Field(
        None, description='Row total with discount in quote currency. Otherwise, null.'
    )
    tax_amount: Optional[float] = Field(
        None, description='Tax amount in quote currency. Otherwise, null.'
    )
    tax_percent: Optional[float] = Field(
        None, description='Tax percent. Otherwise, null.'
    )
    weee_tax_applied: str = Field(
        ..., description='Item weee tax applied in quote currency.'
    )
    weee_tax_applied_amount: float = Field(
        ..., description='Item weee tax applied amount in quote currency.'
    )


class RequisitionListDataRequisitionListExtensionInterface(BaseModel):
    pass


class RequisitionListDataRequisitionListItemExtensionInterface(BaseModel):
    pass


class RequisitionListDataRequisitionListItemInterface(BaseModel):
    added_at: str = Field(..., description='Added_at value.')
    extension_attributes: Optional[
        RequisitionListDataRequisitionListItemExtensionInterface
    ] = None
    id: int = Field(..., description='Requisition List ID.')
    options: List[str] = Field(..., description='Requisition list item options.')
    qty: float = Field(..., description='Product Qty.')
    requisition_list_id: int = Field(..., description='Requisition List ID.')
    sku: str = Field(..., description='Product SKU.')
    store_id: int = Field(..., description='Store ID.')


class RmaDataCommentExtensionInterface(BaseModel):
    pass


class RmaDataCommentInterface(BaseModel):
    admin: bool = Field(..., description='Is_admin')
    comment: str = Field(..., description='Comment')
    created_at: str = Field(..., description='Created_at')
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    customer_notified: bool = Field(..., description='Is_customer_notified')
    entity_id: int = Field(..., description='Entity_id')
    extension_attributes: Optional[RmaDataCommentExtensionInterface] = None
    rma_entity_id: int = Field(..., description='Rma Id')
    status: str = Field(..., description='Status')
    visible_on_front: bool = Field(..., description='Is_visible_on_front')


class RmaDataItemExtensionInterface(BaseModel):
    pass


class RmaDataItemInterface(BaseModel):
    condition: str = Field(..., description='Condition')
    entity_id: int = Field(..., description='Id')
    extension_attributes: Optional[RmaDataItemExtensionInterface] = None
    order_item_id: int = Field(..., description='Order_item_id')
    qty_approved: int = Field(..., description='Qty_approved')
    qty_authorized: int = Field(..., description='Qty_authorized')
    qty_requested: int = Field(..., description='Qty_requested')
    qty_returned: int = Field(..., description='Qty_returned')
    reason: str = Field(..., description='Reason')
    resolution: str = Field(..., description='Resolution')
    rma_entity_id: int = Field(..., description='RMA id')
    status: str = Field(..., description='Status')


class RmaDataRmaExtensionInterface(BaseModel):
    pass


class RmaDataTrackExtensionInterface(BaseModel):
    pass


class RmaDataTrackInterface(BaseModel):
    carrier_code: str = Field(..., description='Carrier code')
    carrier_title: str = Field(..., description='Carrier title')
    entity_id: int = Field(..., description='Entity id')
    extension_attributes: Optional[RmaDataTrackExtensionInterface] = None
    rma_entity_id: int = Field(..., description='Rma entity id')
    track_number: str = Field(..., description='Track number')


class SalesDataCreditmemoCommentCreationExtensionInterface(BaseModel):
    pass


class SalesDataCreditmemoCommentCreationInterface(BaseModel):
    comment: str = Field(..., description='Comment.')
    extension_attributes: Optional[
        SalesDataCreditmemoCommentCreationExtensionInterface
    ] = None
    is_visible_on_front: int = Field(
        ..., description='Is-visible-on-storefront flag value.'
    )


class SalesDataCreditmemoCommentExtensionInterface(BaseModel):
    pass


class SalesDataCreditmemoCommentInterface(BaseModel):
    comment: str = Field(..., description='Comment.')
    created_at: Optional[str] = Field(None, description='Created-at timestamp.')
    entity_id: Optional[int] = Field(None, description='Credit memo ID.')
    extension_attributes: Optional[SalesDataCreditmemoCommentExtensionInterface] = None
    is_customer_notified: int = Field(
        ..., description='Is-customer-notified flag value.'
    )
    is_visible_on_front: int = Field(
        ..., description='Is-visible-on-storefront flag value.'
    )
    parent_id: int = Field(..., description='Parent ID.')


class SalesDataCreditmemoCreationArgumentsExtensionInterface(BaseModel):
    return_to_stock_items: Optional[List[int]] = None


class SalesDataCreditmemoCreationArgumentsInterface(BaseModel):
    adjustment_negative: Optional[float] = Field(
        None, description='Credit memo negative adjustment.'
    )
    adjustment_positive: Optional[float] = Field(
        None, description='Credit memo positive adjustment.'
    )
    extension_attributes: Optional[
        SalesDataCreditmemoCreationArgumentsExtensionInterface
    ] = None
    shipping_amount: Optional[float] = Field(
        None, description='Credit memo shipping amount.'
    )


class SalesDataCreditmemoExtensionInterface(BaseModel):
    base_customer_balance_amount: Optional[float] = None
    base_gift_cards_amount: Optional[float] = None
    customer_balance_amount: Optional[float] = None
    gift_cards_amount: Optional[float] = None
    gw_base_price: Optional[str] = None
    gw_base_tax_amount: Optional[str] = None
    gw_card_base_price: Optional[str] = None
    gw_card_base_tax_amount: Optional[str] = None
    gw_card_price: Optional[str] = None
    gw_card_tax_amount: Optional[str] = None
    gw_items_base_price: Optional[str] = None
    gw_items_base_tax_amount: Optional[str] = None
    gw_items_price: Optional[str] = None
    gw_items_tax_amount: Optional[str] = None
    gw_price: Optional[str] = None
    gw_tax_amount: Optional[str] = None


class SalesDataCreditmemoItemCreationExtensionInterface(BaseModel):
    pass


class SalesDataCreditmemoItemCreationInterface(BaseModel):
    extension_attributes: Optional[
        SalesDataCreditmemoItemCreationExtensionInterface
    ] = None
    order_item_id: int = Field(..., description='Order item ID.')
    qty: float = Field(..., description='Quantity.')


class SalesDataCreditmemoItemExtensionInterface(BaseModel):
    invoice_text_codes: Optional[List[str]] = None
    tax_codes: Optional[List[str]] = None
    vertex_tax_codes: Optional[List[str]] = None


class SalesDataCreditmemoItemInterface(BaseModel):
    additional_data: Optional[str] = Field(None, description='Additional data.')
    base_cost: float = Field(..., description='The base cost for a credit memo item.')
    base_discount_amount: Optional[float] = Field(
        None, description='The base discount amount for a credit memo item.'
    )
    base_discount_tax_compensation_amount: Optional[float] = Field(
        None,
        description='The base discount tax compensation amount for a credit memo item.',
    )
    base_price: float = Field(..., description='The base price for a credit memo item.')
    base_price_incl_tax: Optional[float] = Field(
        None, description='Base price including tax.'
    )
    base_row_total: Optional[float] = Field(None, description='Base row total.')
    base_row_total_incl_tax: Optional[float] = Field(
        None, description='Base row total including tax.'
    )
    base_tax_amount: Optional[float] = Field(None, description='Base tax amount.')
    base_weee_tax_applied_amount: Optional[float] = Field(
        None, description='Base WEEE tax applied amount.'
    )
    base_weee_tax_applied_row_amnt: Optional[float] = Field(
        None, description='Base WEEE tax applied row amount.'
    )
    base_weee_tax_disposition: Optional[float] = Field(
        None, description='Base WEEE tax disposition.'
    )
    base_weee_tax_row_disposition: Optional[float] = Field(
        None, description='Base WEEE tax row disposition.'
    )
    description: Optional[str] = Field(None, description='Description.')
    discount_amount: Optional[float] = Field(None, description='Discount amount.')
    discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Discount tax compensation amount.'
    )
    entity_id: int = Field(..., description='Credit memo item ID.')
    extension_attributes: Optional[SalesDataCreditmemoItemExtensionInterface] = None
    name: Optional[str] = Field(None, description='Name.')
    order_item_id: int = Field(..., description='Order item ID.')
    parent_id: Optional[int] = Field(None, description='Parent ID.')
    price: Optional[float] = Field(None, description='Price.')
    price_incl_tax: Optional[float] = Field(None, description='Price including tax.')
    product_id: Optional[int] = Field(None, description='Product ID.')
    qty: float = Field(..., description='Quantity.')
    row_total: Optional[float] = Field(None, description='Row total.')
    row_total_incl_tax: Optional[float] = Field(
        None, description='Row total including tax.'
    )
    sku: Optional[str] = Field(None, description='SKU.')
    tax_amount: Optional[float] = Field(None, description='Tax amount.')
    weee_tax_applied: Optional[str] = Field(None, description='WEEE tax applied.')
    weee_tax_applied_amount: Optional[float] = Field(
        None, description='WEEE tax applied amount.'
    )
    weee_tax_applied_row_amount: Optional[float] = Field(
        None, description='WEEE tax applied row amount.'
    )
    weee_tax_disposition: Optional[float] = Field(
        None, description='WEEE tax disposition.'
    )
    weee_tax_row_disposition: Optional[float] = Field(
        None, description='WEEE tax row disposition.'
    )


class SalesDataInvoiceCommentCreationExtensionInterface(BaseModel):
    pass


class SalesDataInvoiceCommentCreationInterface(BaseModel):
    comment: str = Field(..., description='Comment.')
    extension_attributes: Optional[
        SalesDataInvoiceCommentCreationExtensionInterface
    ] = None
    is_visible_on_front: int = Field(
        ..., description='Is-visible-on-storefront flag value.'
    )


class SalesDataInvoiceCommentExtensionInterface(BaseModel):
    pass


class SalesDataInvoiceCommentInterface(BaseModel):
    comment: str = Field(..., description='Comment.')
    created_at: Optional[str] = Field(None, description='Created-at timestamp.')
    entity_id: Optional[int] = Field(None, description='Invoice ID.')
    extension_attributes: Optional[SalesDataInvoiceCommentExtensionInterface] = None
    is_customer_notified: int = Field(
        ..., description='Is-customer-notified flag value.'
    )
    is_visible_on_front: int = Field(
        ..., description='Is-visible-on-storefront flag value.'
    )
    parent_id: int = Field(..., description='Parent ID.')


class SalesDataInvoiceCreationArgumentsExtensionInterface(BaseModel):
    pass


class SalesDataInvoiceCreationArgumentsInterface(BaseModel):
    extension_attributes: Optional[
        SalesDataInvoiceCreationArgumentsExtensionInterface
    ] = None


class SalesDataInvoiceItemCreationExtensionInterface(BaseModel):
    pass


class SalesDataInvoiceItemCreationInterface(BaseModel):
    extension_attributes: Optional[SalesDataInvoiceItemCreationExtensionInterface] = (
        None
    )
    order_item_id: int = Field(..., description='Order item ID.')
    qty: float = Field(..., description='Quantity.')


class SalesDataInvoiceItemExtensionInterface(BaseModel):
    invoice_text_codes: Optional[List[str]] = None
    tax_codes: Optional[List[str]] = None
    vertex_tax_codes: Optional[List[str]] = None


class SalesDataInvoiceItemInterface(BaseModel):
    additional_data: Optional[str] = Field(None, description='Additional data.')
    base_cost: Optional[float] = Field(None, description='Base cost.')
    base_discount_amount: Optional[float] = Field(
        None, description='Base discount amount.'
    )
    base_discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Base discount tax compensation amount.'
    )
    base_price: Optional[float] = Field(None, description='Base price.')
    base_price_incl_tax: Optional[float] = Field(
        None, description='Base price including tax.'
    )
    base_row_total: Optional[float] = Field(None, description='Base row total.')
    base_row_total_incl_tax: Optional[float] = Field(
        None, description='Base row total including tax.'
    )
    base_tax_amount: Optional[float] = Field(None, description='Base tax amount.')
    description: Optional[str] = Field(None, description='Description.')
    discount_amount: Optional[float] = Field(None, description='Discount amount.')
    discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Discount tax compensation amount.'
    )
    entity_id: Optional[int] = Field(None, description='Invoice item ID.')
    extension_attributes: Optional[SalesDataInvoiceItemExtensionInterface] = None
    name: Optional[str] = Field(None, description='Name.')
    order_item_id: int = Field(..., description='Order item ID.')
    parent_id: Optional[int] = Field(None, description='Parent ID.')
    price: Optional[float] = Field(None, description='Price.')
    price_incl_tax: Optional[float] = Field(None, description='Price including tax.')
    product_id: Optional[int] = Field(None, description='Product ID.')
    qty: float = Field(..., description='Quantity.')
    row_total: Optional[float] = Field(None, description='Row total.')
    row_total_incl_tax: Optional[float] = Field(
        None, description='Row total including tax.'
    )
    sku: str = Field(..., description='SKU.')
    tax_amount: Optional[float] = Field(None, description='Tax amount.')


class SalesDataOrderAddressExtensionInterface(BaseModel):
    checkout_fields: Optional[List[FrameworkAttributeInterface]] = None


class SalesDataOrderAddressInterface(BaseModel):
    address_type: str = Field(..., description='Address type.')
    city: str = Field(..., description='City.')
    company: Optional[str] = Field(None, description='Company.')
    country_id: str = Field(..., description='Country ID.')
    customer_address_id: Optional[int] = Field(None, description='Country address ID.')
    customer_id: Optional[int] = Field(None, description='Customer ID.')
    email: Optional[str] = Field(None, description='Email address.')
    entity_id: Optional[int] = Field(None, description='Order address ID.')
    extension_attributes: Optional[SalesDataOrderAddressExtensionInterface] = None
    fax: Optional[str] = Field(None, description='Fax number.')
    firstname: str = Field(..., description='First name.')
    lastname: str = Field(..., description='Last name.')
    middlename: Optional[str] = Field(None, description='Middle name.')
    parent_id: Optional[int] = Field(None, description='Parent ID.')
    postcode: str = Field(..., description='Postal code.')
    prefix: Optional[str] = Field(None, description='Prefix.')
    region: Optional[str] = Field(None, description='Region.')
    region_code: Optional[str] = Field(None, description='Region code.')
    region_id: Optional[int] = Field(None, description='Region ID.')
    street: Optional[List[str]] = Field(
        None, description='Array of any street values. Otherwise, null.'
    )
    suffix: Optional[str] = Field(None, description='Suffix.')
    telephone: str = Field(..., description='Telephone number.')
    vat_id: Optional[str] = Field(None, description='VAT ID.')
    vat_is_valid: Optional[int] = Field(None, description='VAT-is-valid flag value.')
    vat_request_date: Optional[str] = Field(None, description='VAT request date.')
    vat_request_id: Optional[str] = Field(None, description='VAT request ID.')
    vat_request_success: Optional[int] = Field(
        None, description='VAT-request-success flag value.'
    )


class SalesDataOrderItemExtensionInterface(BaseModel):
    gift_message: Optional[GiftMessageDataMessageInterface] = None
    gw_base_price: Optional[str] = None
    gw_base_price_invoiced: Optional[str] = None
    gw_base_price_refunded: Optional[str] = None
    gw_base_tax_amount: Optional[str] = None
    gw_base_tax_amount_invoiced: Optional[str] = None
    gw_base_tax_amount_refunded: Optional[str] = None
    gw_id: Optional[str] = None
    gw_price: Optional[str] = None
    gw_price_invoiced: Optional[str] = None
    gw_price_refunded: Optional[str] = None
    gw_tax_amount: Optional[str] = None
    gw_tax_amount_invoiced: Optional[str] = None
    gw_tax_amount_refunded: Optional[str] = None
    invoice_text_codes: Optional[List[str]] = None
    tax_codes: Optional[List[str]] = None
    vertex_tax_codes: Optional[List[str]] = None


class SalesDataOrderStatusHistoryExtensionInterface(BaseModel):
    pass


class SalesDataOrderStatusHistoryInterface(BaseModel):
    comment: str = Field(..., description='Comment.')
    created_at: Optional[str] = Field(None, description='Created-at timestamp.')
    entity_id: Optional[int] = Field(None, description='Order status history ID.')
    entity_name: Optional[str] = Field(None, description='Entity name.')
    extension_attributes: Optional[SalesDataOrderStatusHistoryExtensionInterface] = None
    is_customer_notified: int = Field(
        ..., description='Is-customer-notified flag value.'
    )
    is_visible_on_front: int = Field(
        ..., description='Is-visible-on-storefront flag value.'
    )
    parent_id: int = Field(..., description='Parent ID.')
    status: Optional[str] = Field(None, description='Status.')


class SalesDataShipmentCommentCreationExtensionInterface(BaseModel):
    pass


class SalesDataShipmentCommentCreationInterface(BaseModel):
    comment: str = Field(..., description='Comment.')
    extension_attributes: Optional[
        SalesDataShipmentCommentCreationExtensionInterface
    ] = None
    is_visible_on_front: int = Field(
        ..., description='Is-visible-on-storefront flag value.'
    )


class SalesDataShipmentCommentExtensionInterface(BaseModel):
    pass


class SalesDataShipmentCommentInterface(BaseModel):
    comment: str = Field(..., description='Comment.')
    created_at: Optional[str] = Field(None, description='Created-at timestamp.')
    entity_id: Optional[int] = Field(None, description='Invoice ID.')
    extension_attributes: Optional[SalesDataShipmentCommentExtensionInterface] = None
    is_customer_notified: int = Field(
        ..., description='Is-customer-notified flag value.'
    )
    is_visible_on_front: int = Field(
        ..., description='Is-visible-on-storefront flag value.'
    )
    parent_id: int = Field(..., description='Parent ID.')


class SalesDataShipmentCreationArgumentsExtensionInterface(BaseModel):
    ext_location_id: Optional[str] = None
    ext_return_shipment_id: Optional[str] = None
    ext_shipment_id: Optional[str] = None
    ext_tracking_reference: Optional[str] = None
    ext_tracking_url: Optional[str] = None
    shipping_label: Optional[str] = None


class SalesDataShipmentCreationArgumentsInterface(BaseModel):
    extension_attributes: Optional[
        SalesDataShipmentCreationArgumentsExtensionInterface
    ] = None


class SalesDataShipmentExtensionInterface(BaseModel):
    ext_location_id: Optional[str] = None
    ext_return_shipment_id: Optional[str] = None
    ext_shipment_id: Optional[str] = None
    ext_tracking_reference: Optional[str] = None
    ext_tracking_url: Optional[str] = None


class SalesDataShipmentItemCreationExtensionInterface(BaseModel):
    pass


class SalesDataShipmentItemCreationInterface(BaseModel):
    extension_attributes: Optional[SalesDataShipmentItemCreationExtensionInterface] = (
        None
    )
    order_item_id: int = Field(..., description='Order item ID.')
    qty: float = Field(..., description='Quantity.')


class SalesDataShipmentItemExtensionInterface(BaseModel):
    pass


class SalesDataShipmentItemInterface(BaseModel):
    additional_data: Optional[str] = Field(None, description='Additional data.')
    description: Optional[str] = Field(None, description='Description.')
    entity_id: Optional[int] = Field(None, description='Shipment item ID.')
    extension_attributes: Optional[SalesDataShipmentItemExtensionInterface] = None
    name: Optional[str] = Field(None, description='Name.')
    order_item_id: int = Field(..., description='Order item ID.')
    parent_id: Optional[int] = Field(None, description='Parent ID.')
    price: Optional[float] = Field(None, description='Price.')
    product_id: Optional[int] = Field(None, description='Product ID.')
    qty: float = Field(..., description='Quantity.')
    row_total: Optional[float] = Field(None, description='Row total.')
    sku: Optional[str] = Field(None, description='SKU.')
    weight: Optional[float] = Field(None, description='Weight.')


class SalesDataShipmentPackageCreationExtensionInterface(BaseModel):
    pass


class SalesDataShipmentPackageCreationInterface(BaseModel):
    extension_attributes: Optional[
        SalesDataShipmentPackageCreationExtensionInterface
    ] = None


class SalesDataShipmentPackageExtensionInterface(BaseModel):
    pass


class SalesDataShipmentPackageInterface(BaseModel):
    extension_attributes: Optional[SalesDataShipmentPackageExtensionInterface] = None


class SalesDataShipmentTrackCreationExtensionInterface(BaseModel):
    pass


class SalesDataShipmentTrackCreationInterface(BaseModel):
    carrier_code: str = Field(..., description='Carrier code.')
    extension_attributes: Optional[SalesDataShipmentTrackCreationExtensionInterface] = (
        None
    )
    title: str = Field(..., description='Title.')
    track_number: str = Field(..., description='Track number.')


class SalesDataShipmentTrackExtensionInterface(BaseModel):
    pass


class SalesDataShipmentTrackInterface(BaseModel):
    carrier_code: str = Field(..., description='Carrier code.')
    created_at: Optional[str] = Field(None, description='Created-at timestamp.')
    description: str = Field(..., description='Description.')
    entity_id: Optional[int] = Field(None, description='Shipment package ID.')
    extension_attributes: Optional[SalesDataShipmentTrackExtensionInterface] = None
    order_id: int = Field(..., description='The order_id for the shipment package.')
    parent_id: int = Field(..., description='Parent ID.')
    qty: float = Field(..., description='Quantity.')
    title: str = Field(..., description='Title.')
    track_number: str = Field(..., description='Track number.')
    updated_at: Optional[str] = Field(None, description='Updated-at timestamp.')
    weight: float = Field(..., description='Weight.')


class SalesDataShippingAssignmentExtensionInterface(BaseModel):
    pass


class SalesDataTotalExtensionInterface(BaseModel):
    pass


class SalesDataTotalInterface(BaseModel):
    base_shipping_amount: Optional[float] = Field(
        None, description='Base shipping amount.'
    )
    base_shipping_canceled: Optional[float] = Field(
        None, description='Base shipping canceled.'
    )
    base_shipping_discount_amount: Optional[float] = Field(
        None, description='Base shipping discount amount.'
    )
    base_shipping_discount_tax_compensation_amnt: Optional[float] = Field(
        None, description='Base shipping discount tax compensation amount.'
    )
    base_shipping_incl_tax: Optional[float] = Field(
        None, description='Base shipping including tax.'
    )
    base_shipping_invoiced: Optional[float] = Field(
        None, description='Base shipping invoiced.'
    )
    base_shipping_refunded: Optional[float] = Field(
        None, description='Base shipping refunded.'
    )
    base_shipping_tax_amount: Optional[float] = Field(
        None, description='Base shipping tax amount.'
    )
    base_shipping_tax_refunded: Optional[float] = Field(
        None, description='Base shipping tax refunded.'
    )
    extension_attributes: Optional[SalesDataTotalExtensionInterface] = None
    shipping_amount: Optional[float] = Field(None, description='Shipping amount.')
    shipping_canceled: Optional[float] = Field(
        None, description='Shipping canceled amount.'
    )
    shipping_discount_amount: Optional[float] = Field(
        None, description='Shipping discount amount.'
    )
    shipping_discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Shipping discount tax compensation amount.'
    )
    shipping_incl_tax: Optional[float] = Field(
        None, description='Shipping including tax amount.'
    )
    shipping_invoiced: Optional[float] = Field(
        None, description='Shipping invoiced amount.'
    )
    shipping_refunded: Optional[float] = Field(
        None, description='Shipping refunded amount.'
    )
    shipping_tax_amount: Optional[float] = Field(
        None, description='Shipping tax amount.'
    )
    shipping_tax_refunded: Optional[float] = Field(
        None, description='Shipping tax refunded amount.'
    )


class SalesDataTransactionExtensionInterface(BaseModel):
    pass


class SalesDataTransactionInterface(BaseModel):
    additional_information: Optional[List[str]] = Field(
        None, description='Array of additional information. Otherwise, null.'
    )
    child_transactions: List[SalesDataTransactionInterface] = Field(
        ..., description='Array of child transactions.'
    )
    created_at: str = Field(..., description='Created-at timestamp.')
    extension_attributes: Optional[SalesDataTransactionExtensionInterface] = None
    is_closed: int = Field(..., description='Is-closed flag value.')
    order_id: int = Field(..., description='Order ID.')
    parent_id: Optional[int] = Field(
        None, description='The parent ID for the transaction. Otherwise, null.'
    )
    parent_txn_id: str = Field(..., description='Parent transaction business ID.')
    payment_id: int = Field(..., description='Payment ID.')
    transaction_id: int = Field(..., description='Transaction ID.')
    txn_id: str = Field(..., description='Transaction business ID.')
    txn_type: str = Field(..., description='Transaction type.')


class SalesRuleDataConditionExtensionInterface(BaseModel):
    pass


class SalesRuleDataConditionInterface(BaseModel):
    aggregator_type: Optional[str] = Field(None, description='The aggregator type')
    attribute_name: Optional[str] = Field(
        None, description='The attribute name of the condition'
    )
    condition_type: str = Field(..., description='Condition type')
    conditions: Optional[List[SalesRuleDataConditionInterface]] = Field(
        None, description='List of conditions'
    )
    extension_attributes: Optional[SalesRuleDataConditionExtensionInterface] = None
    operator: str = Field(..., description='The operator of the condition')
    value: str = Field(..., description='The value of the condition')


class SalesRuleDataCouponExtensionInterface(BaseModel):
    pass


class SalesRuleDataCouponGenerationSpecExtensionInterface(BaseModel):
    pass


class SalesRuleDataCouponGenerationSpecInterface(BaseModel):
    delimiter: Optional[str] = Field(None, description='The delimiter')
    delimiter_at_every: Optional[int] = Field(
        None, description='The spacing where the delimiter should exist'
    )
    extension_attributes: Optional[
        SalesRuleDataCouponGenerationSpecExtensionInterface
    ] = None
    format: str = Field(..., description='Format of generated coupon code')
    length: int = Field(..., description='Length of coupon code')
    prefix: Optional[str] = Field(None, description='The prefix')
    quantity: int = Field(..., description='Of coupons to generate')
    rule_id: int = Field(
        ..., description='The id of the rule associated with the coupon'
    )
    suffix: Optional[str] = Field(None, description='The suffix')


class SalesRuleDataCouponInterface(BaseModel):
    code: Optional[str] = Field(None, description='Coupon code')
    coupon_id: Optional[int] = Field(None, description='Coupon id')
    created_at: Optional[str] = Field(None, description='When the coupon is created')
    expiration_date: Optional[str] = Field(None, description='Expiration date')
    extension_attributes: Optional[SalesRuleDataCouponExtensionInterface] = None
    is_primary: bool = Field(
        ...,
        description="The coupon is primary coupon for the rule that it's associated with",
    )
    rule_id: int = Field(
        ..., description='The id of the rule associated with the coupon'
    )
    times_used: int = Field(
        ..., description='The number of times the coupon has been used'
    )
    type: Optional[int] = Field(None, description='Of coupon')
    usage_limit: Optional[int] = Field(None, description='Usage limit')
    usage_per_customer: Optional[int] = Field(
        None, description='Usage limit per customer'
    )


class SalesRuleDataCouponMassDeleteResultInterface(BaseModel):
    failed_items: List[str] = Field(..., description='List of failed items.')
    missing_items: List[str] = Field(..., description='List of missing items.')


class SalesRuleDataRuleExtensionInterface(BaseModel):
    reward_points_delta: Optional[int] = None


class SalesRuleDataRuleLabelExtensionInterface(BaseModel):
    pass


class SalesRuleDataRuleLabelInterface(BaseModel):
    extension_attributes: Optional[SalesRuleDataRuleLabelExtensionInterface] = None
    store_id: int = Field(..., description='StoreId')
    store_label: str = Field(..., description='The label for the store')


class SharedCatalogDataSharedCatalogInterface(BaseModel):
    created_at: str = Field(..., description='Created time for Shared Catalog.')
    created_by: int = Field(..., description='Admin id for Shared Catalog.')
    customer_group_id: int = Field(..., description='Customer Group Id.')
    description: str = Field(..., description='Shared Catalog description.')
    id: Optional[int] = Field(None, description='ID.')
    name: str = Field(..., description='Shared Catalog name.')
    store_id: int = Field(..., description='Store id for Shared Catalog.')
    tax_class_id: int = Field(..., description='Tax class id.')
    type: int = Field(..., description='Shared Catalog type.')


class StoreDataGroupExtensionInterface(BaseModel):
    pass


class StoreDataGroupInterface(BaseModel):
    code: str = Field(..., description='Group code.')
    default_store_id: int
    extension_attributes: Optional[StoreDataGroupExtensionInterface] = None
    id: int
    name: str
    root_category_id: int
    website_id: int


class StoreDataStoreConfigExtensionInterface(BaseModel):
    pass


class StoreDataStoreConfigInterface(BaseModel):
    base_currency_code: str = Field(..., description='Base currency code')
    base_link_url: str = Field(..., description='Base link URL for the store')
    base_media_url: str = Field(..., description='Base media URL for the store')
    base_static_url: str = Field(..., description='Base static URL for the store')
    base_url: str = Field(..., description='Base URL for the store')
    code: str = Field(..., description='Store code')
    default_display_currency_code: str = Field(
        ..., description='Default display currency code'
    )
    extension_attributes: Optional[StoreDataStoreConfigExtensionInterface] = None
    id: int = Field(..., description='Store id')
    locale: str = Field(..., description='Store locale')
    secure_base_link_url: str = Field(
        ..., description='Secure base link URL for the store'
    )
    secure_base_media_url: str = Field(
        ..., description='Secure base media URL for the store'
    )
    secure_base_static_url: str = Field(
        ..., description='Secure base static URL for the store'
    )
    secure_base_url: str = Field(..., description='Secure base URL for the store')
    timezone: str = Field(..., description='Timezone of the store')
    website_id: int = Field(..., description='Website id of the store')
    weight_unit: str = Field(..., description='The unit of weight')


class StoreDataStoreExtensionInterface(BaseModel):
    pass


class StoreDataStoreInterface(BaseModel):
    code: str
    extension_attributes: Optional[StoreDataStoreExtensionInterface] = None
    id: int
    name: str = Field(..., description='Store name')
    store_group_id: int
    website_id: int


class StoreDataWebsiteExtensionInterface(BaseModel):
    pass


class StoreDataWebsiteInterface(BaseModel):
    code: str
    default_group_id: int
    extension_attributes: Optional[StoreDataWebsiteExtensionInterface] = None
    id: int
    name: str = Field(..., description='Website name')


class TaxDataAppliedTaxRateExtensionInterface(BaseModel):
    pass


class TaxDataAppliedTaxRateInterface(BaseModel):
    code: Optional[str] = Field(None, description='Code')
    extension_attributes: Optional[TaxDataAppliedTaxRateExtensionInterface] = None
    percent: Optional[float] = Field(None, description='Tax Percent')
    title: Optional[str] = Field(None, description='Title')


class TaxDataGrandTotalRatesInterface(BaseModel):
    percent: str = Field(..., description='Tax percentage value')
    title: str = Field(..., description='Rate title')


class TaxDataOrderTaxDetailsAppliedTaxExtensionInterface(BaseModel):
    rates: Optional[List[TaxDataAppliedTaxRateInterface]] = None


class TaxDataOrderTaxDetailsAppliedTaxInterface(BaseModel):
    amount: float = Field(..., description='Tax amount')
    base_amount: float = Field(..., description='Tax amount in base currency')
    code: Optional[str] = Field(None, description='Code')
    extension_attributes: Optional[
        TaxDataOrderTaxDetailsAppliedTaxExtensionInterface
    ] = None
    percent: Optional[float] = Field(None, description='Tax Percent')
    title: Optional[str] = Field(None, description='Title')


class TaxDataOrderTaxDetailsItemExtensionInterface(BaseModel):
    pass


class TaxDataOrderTaxDetailsItemInterface(BaseModel):
    applied_taxes: Optional[List[TaxDataOrderTaxDetailsAppliedTaxInterface]] = Field(
        None, description='Applied taxes'
    )
    associated_item_id: Optional[int] = Field(
        None,
        description='Associated item id if this item is associated with another item, null otherwise',
    )
    extension_attributes: Optional[TaxDataOrderTaxDetailsItemExtensionInterface] = None
    item_id: Optional[int] = Field(
        None, description='Item id if this item is a product'
    )
    type: Optional[str] = Field(
        None, description='Type (shipping, product, weee, gift wrapping, etc)'
    )


class TaxDataTaxClassExtensionInterface(BaseModel):
    pass


class TaxDataTaxClassInterface(BaseModel):
    class_id: Optional[int] = Field(None, description='Tax class ID.')
    class_name: str = Field(..., description='Tax class name.')
    class_type: str = Field(..., description='Tax class type.')
    extension_attributes: Optional[TaxDataTaxClassExtensionInterface] = None


class TaxDataTaxRateExtensionInterface(BaseModel):
    pass


class TaxDataTaxRateTitleExtensionInterface(BaseModel):
    pass


class TaxDataTaxRateTitleInterface(BaseModel):
    extension_attributes: Optional[TaxDataTaxRateTitleExtensionInterface] = None
    store_id: str = Field(..., description='Store id')
    value: str = Field(..., description='Title value')


class TaxDataTaxRuleExtensionInterface(BaseModel):
    pass


class TaxDataTaxRuleInterface(BaseModel):
    calculate_subtotal: Optional[bool] = Field(None, description='Calculate subtotal.')
    code: str = Field(..., description='Tax rule code')
    customer_tax_class_ids: List[int] = Field(..., description='Customer tax class id')
    extension_attributes: Optional[TaxDataTaxRuleExtensionInterface] = None
    id: Optional[int] = Field(None, description='Id')
    position: int = Field(..., description='Sort order.')
    priority: int = Field(..., description='Priority')
    product_tax_class_ids: List[int] = Field(..., description='Product tax class id')
    tax_rate_ids: List[int] = Field(..., description='Tax rate ids')


class TemandoShippingDataCollectionPointOrderCollectionPointInterface(BaseModel):
    city: str
    collection_point_id: str
    country: str
    name: str
    postcode: str
    recipient_address_id: int
    region: str
    street: List[str]


class TemandoShippingDataCollectionPointQuoteCollectionPointInterface(BaseModel):
    city: str
    collection_point_id: str
    country: str
    entity_id: int
    name: str
    opening_hours: List[str]
    postcode: str
    recipient_address_id: int
    region: str
    selected: bool
    shipping_experiences: List[str]
    street: List[str]


class TemandoShippingDataCollectionPointSearchRequestInterface(BaseModel):
    country_id: str
    pending: bool
    postcode: str
    shipping_address_id: int


class TemandoShippingDataOrderShippingExperienceInterface(BaseModel):
    code: str
    cost: float
    label: str


class VaultDataPaymentTokenInterface(BaseModel):
    created_at: Optional[str] = Field(None, description='Token creation timestamp')
    customer_id: Optional[int] = Field(None, description='Customer ID.')
    entity_id: Optional[int] = Field(None, description='Entity ID.')
    expires_at: Optional[str] = Field(None, description='Token expiration timestamp')
    gateway_token: str = Field(..., description='Gateway token ID')
    is_active: bool = Field(..., description='Is active.')
    is_visible: bool = Field(..., description='Is visible.')
    payment_method_code: str = Field(..., description='Payment method code')
    public_hash: str = Field(..., description='Public hash')
    token_details: str = Field(..., description='Token details')
    type: str = Field(..., description='Type')


class WeeeDataProductRenderWeeeAdjustmentAttributeExtensionInterface(BaseModel):
    pass


class WeeeDataProductRenderWeeeAdjustmentAttributeInterface(BaseModel):
    amount: str = Field(..., description='Weee attribute amount')
    amount_excl_tax: str = Field(..., description='Product amount exclude tax')
    attribute_code: str = Field(..., description='Weee attribute code')
    extension_attributes: WeeeDataProductRenderWeeeAdjustmentAttributeExtensionInterface
    tax_amount: str = Field(
        ..., description='Tax which is calculated to fixed product tax attribute'
    )
    tax_amount_incl_tax: str = Field(..., description='Tax amount of weee attribute')


class V1AmazonBillingAddressAmazonOrderReferenceIdPutRequest(BaseModel):
    addressConsentToken: str


class V1AmazonShippingAddressAmazonOrderReferenceIdPutRequest(BaseModel):
    addressConsentToken: str


class V1BundleProductsOptionsAddPostRequest(BaseModel):
    option: BundleDataOptionInterface


class V1BundleProductsOptionsTypesGetResponse(
    RootModel[List[BundleDataOptionTypeInterface]]
):
    root: List[BundleDataOptionTypeInterface]


class V1BundleProductsOptionsOptionIdPutRequest(BaseModel):
    option: BundleDataOptionInterface


class V1BundleProductsProductSkuChildrenGetResponse(
    RootModel[List[BundleDataLinkInterface]]
):
    root: List[BundleDataLinkInterface]


class V1BundleProductsSkuLinksIdPutRequest(BaseModel):
    linkedProduct: BundleDataLinkInterface


class V1BundleProductsSkuLinksOptionIdPostRequest(BaseModel):
    linkedProduct: BundleDataLinkInterface


class V1BundleProductsSkuOptionsAllGetResponse(
    RootModel[List[BundleDataOptionInterface]]
):
    root: List[BundleDataOptionInterface]


class V1CartsGuestCartsCartIdGiftCardsPostRequest(BaseModel):
    giftCardAccountData: GiftCardAccountDataGiftCardAccountInterface


class V1CartsLicenceGetResponse(
    RootModel[List[CheckoutAgreementsDataAgreementInterface]]
):
    root: List[CheckoutAgreementsDataAgreementInterface]


class V1CartsMineBillingAddressPostRequest(BaseModel):
    address: QuoteDataAddressInterface
    useForShipping: Optional[bool] = None


class V1CartsMineCheckoutFieldsPostRequest(BaseModel):
    serviceSelection: List[FrameworkAttributeInterface]


class V1CartsMineCollectTotalsPutRequest(BaseModel):
    additionalData: Optional[QuoteDataTotalsAdditionalDataInterface] = None
    paymentMethod: QuoteDataPaymentInterface
    shippingCarrierCode: Optional[str] = Field(None, description='The carrier code.')
    shippingMethodCode: Optional[str] = Field(
        None, description='The shipping method code.'
    )


class V1CartsMineCollectionPointSearchRequestPutRequest(BaseModel):
    countryId: str
    postcode: str


class V1CartsMineCollectionPointSearchResultGetResponse(
    RootModel[List[TemandoShippingDataCollectionPointQuoteCollectionPointInterface]]
):
    root: List[TemandoShippingDataCollectionPointQuoteCollectionPointInterface]


class V1CartsMineCollectionPointSelectPostRequest(BaseModel):
    entityId: int


class V1CartsMineDeliveryOptionPostRequest(BaseModel):
    selectedOption: str


class V1CartsMineEstimateShippingMethodsPostRequest(BaseModel):
    address: QuoteDataAddressInterface


class V1CartsMineEstimateShippingMethodsPostResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods'
    )


class V1CartsMineEstimateShippingMethodsByAddressIdPostRequest(BaseModel):
    addressId: int = Field(..., description='The estimate address id')


class V1CartsMineEstimateShippingMethodsByAddressIdPostResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods.'
    )


class V1CartsMineGiftMessagePostRequest(BaseModel):
    giftMessage: GiftMessageDataMessageInterface


class V1CartsMineGiftMessageItemIdPostRequest(BaseModel):
    giftMessage: GiftMessageDataMessageInterface


class V1CartsMineGiftCardsPostRequest(BaseModel):
    giftCardAccountData: GiftCardAccountDataGiftCardAccountInterface


class V1CartsMineOrderPutRequest(BaseModel):
    paymentMethod: Optional[QuoteDataPaymentInterface] = None


class V1CartsMinePaymentInformationPostRequest(BaseModel):
    billingAddress: Optional[QuoteDataAddressInterface] = None
    paymentMethod: QuoteDataPaymentInterface


class V1CartsMinePaymentMethodsGetResponse(
    RootModel[List[QuoteDataPaymentMethodInterface]]
):
    root: List[QuoteDataPaymentMethodInterface] = Field(
        ..., description='Array of payment methods.'
    )


class V1CartsMineSelectedPaymentMethodPutRequest(BaseModel):
    method: QuoteDataPaymentInterface


class V1CartsMineSetPaymentInformationPostRequest(BaseModel):
    billingAddress: Optional[QuoteDataAddressInterface] = None
    paymentMethod: QuoteDataPaymentInterface


class V1CartsMineShippingMethodsGetResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods.'
    )


class V1CartsCartIdPutRequest(BaseModel):
    customerId: int = Field(..., description='The customer ID.')
    storeId: int


class V1CartsCartIdBillingAddressPostRequest(BaseModel):
    address: QuoteDataAddressInterface
    useForShipping: Optional[bool] = None


class V1CartsCartIdEstimateShippingMethodsPostRequest(BaseModel):
    address: QuoteDataAddressInterface


class V1CartsCartIdEstimateShippingMethodsPostResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods'
    )


class V1CartsCartIdEstimateShippingMethodsByAddressIdPostRequest(BaseModel):
    addressId: int = Field(..., description='The estimate address id')


class V1CartsCartIdEstimateShippingMethodsByAddressIdPostResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods.'
    )


class V1CartsCartIdGiftMessagePostRequest(BaseModel):
    giftMessage: GiftMessageDataMessageInterface


class V1CartsCartIdGiftMessageItemIdPostRequest(BaseModel):
    giftMessage: GiftMessageDataMessageInterface


class V1CartsCartIdGiftCardsPutRequest(BaseModel):
    giftCardAccountData: GiftCardAccountDataGiftCardAccountInterface


class V1CartsCartIdOrderPutRequest(BaseModel):
    paymentMethod: Optional[QuoteDataPaymentInterface] = None


class V1CartsCartIdPaymentMethodsGetResponse(
    RootModel[List[QuoteDataPaymentMethodInterface]]
):
    root: List[QuoteDataPaymentMethodInterface] = Field(
        ..., description='Array of payment methods.'
    )


class V1CartsCartIdSelectedPaymentMethodPutRequest(BaseModel):
    method: QuoteDataPaymentInterface


class V1CartsCartIdShippingMethodsGetResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods.'
    )


class V1CategoriesCategoryIdMovePutRequest(BaseModel):
    afterId: Optional[int] = None
    parentId: int


class V1CategoriesCategoryIdProductsGetResponse(
    RootModel[List[CatalogDataCategoryProductLinkInterface]]
):
    root: List[CatalogDataCategoryProductLinkInterface]


class V1CategoriesCategoryIdProductsPostRequest(BaseModel):
    productLink: CatalogDataCategoryProductLinkInterface


class V1CategoriesCategoryIdProductsPutRequest(BaseModel):
    productLink: CatalogDataCategoryProductLinkInterface


class V1CmsBlockPostRequest(BaseModel):
    block: CmsDataBlockInterface


class V1CmsBlockIdPutRequest(BaseModel):
    block: CmsDataBlockInterface


class V1CmsPagePostRequest(BaseModel):
    page: CmsDataPageInterface


class V1CmsPageIdPutRequest(BaseModel):
    page: CmsDataPageInterface


class V1CompanyAssignRolesPutRequest(BaseModel):
    roles: List[CompanyDataRoleInterface]
    userId: int


class V1CompanyRolePostRequest(BaseModel):
    role: CompanyDataRoleInterface


class V1CompanyRoleIdPutRequest(BaseModel):
    role: CompanyDataRoleInterface


class V1CompanyCreditsHistoryHistoryIdPutRequest(BaseModel):
    comment: Optional[str] = Field(None, description='[optional]')
    purchaseOrder: Optional[str] = Field(None, description='[optional]')


class V1CompanyCreditsCreditIdDecreaseBalancePostRequest(BaseModel):
    comment: Optional[str] = Field(None, description='[optional]')
    currency: str
    operationType: int
    options: Optional[CompanyCreditDataCreditBalanceOptionsInterface] = None
    value: float


class V1CompanyCreditsCreditIdIncreaseBalancePostRequest(BaseModel):
    comment: Optional[str] = Field(None, description='[optional]')
    currency: str
    operationType: int
    options: Optional[CompanyCreditDataCreditBalanceOptionsInterface] = None
    value: float


class V1CompanyCreditsIdPutRequest(BaseModel):
    creditLimit: CompanyCreditDataCreditLimitInterface


class V1ConfigurableProductsSkuChildPostRequest(BaseModel):
    childSku: str


class V1CouponsPostRequest(BaseModel):
    coupon: SalesRuleDataCouponInterface


class V1CouponsDeleteByCodesPostRequest(BaseModel):
    codes: List[str]
    ignoreInvalidCoupons: Optional[bool] = None


class V1CouponsDeleteByIdsPostRequest(BaseModel):
    ids: List[int]
    ignoreInvalidCoupons: Optional[bool] = None


class V1CouponsGeneratePostRequest(BaseModel):
    couponSpec: SalesRuleDataCouponGenerationSpecInterface


class V1CouponsGeneratePostResponse(RootModel[List[str]]):
    root: List[str]


class V1CouponsCouponIdPutRequest(BaseModel):
    coupon: SalesRuleDataCouponInterface


class V1CreditmemoIdCommentsPostRequest(BaseModel):
    entity: SalesDataCreditmemoCommentInterface


class V1CustomerGroupsPostRequest(BaseModel):
    group: CustomerDataGroupInterface


class V1CustomerGroupsIdPutRequest(BaseModel):
    group: CustomerDataGroupInterface


class V1CustomersConfirmPostRequest(BaseModel):
    email: str
    redirectUrl: Optional[str] = None
    websiteId: int


class V1CustomersIsEmailAvailablePostRequest(BaseModel):
    customerEmail: str
    websiteId: Optional[int] = Field(
        None, description='If not set, will use the current websiteId'
    )


class V1CustomersMeActivatePutRequest(BaseModel):
    confirmationKey: str


class V1CustomersMePasswordPutRequest(BaseModel):
    currentPassword: str
    newPassword: str


class V1CustomersPasswordPutRequest(BaseModel):
    email: str
    template: str
    websiteId: Optional[int] = None


class V1CustomersResetPasswordPostRequest(BaseModel):
    email: str = Field(
        ...,
        description='If empty value given then the customer will be matched by the RP token.',
    )
    newPassword: str
    resetToken: str


class V1CustomersEmailActivatePutRequest(BaseModel):
    confirmationKey: str


class V1EavAttributeSetsPostRequest(BaseModel):
    attributeSet: EavDataAttributeSetInterface
    entityTypeCode: str
    skeletonId: int


class V1EavAttributeSetsAttributeSetIdPutRequest(BaseModel):
    attributeSet: EavDataAttributeSetInterface


class V1GiftWrappingsPostRequest(BaseModel):
    data: GiftWrappingDataWrappingInterface
    storeId: Optional[int] = None


class V1GiftWrappingsWrappingIdPutRequest(BaseModel):
    data: GiftWrappingDataWrappingInterface
    storeId: Optional[int] = None


class V1GiftregistryMineEstimateShippingMethodsPostRequest(BaseModel):
    registryId: int = Field(..., description='The estimate registry id')


class V1GiftregistryMineEstimateShippingMethodsPostResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods.'
    )


class V1GuestCartsCartIdPutRequest(BaseModel):
    customerId: int = Field(..., description='The customer ID.')
    storeId: int


class V1GuestCartsCartIdBillingAddressPostRequest(BaseModel):
    address: QuoteDataAddressInterface
    useForShipping: Optional[bool] = None


class V1GuestCartsCartIdCheckoutFieldsPostRequest(BaseModel):
    serviceSelection: List[FrameworkAttributeInterface]


class V1GuestCartsCartIdCollectTotalsPutRequest(BaseModel):
    additionalData: Optional[QuoteDataTotalsAdditionalDataInterface] = None
    paymentMethod: QuoteDataPaymentInterface
    shippingCarrierCode: Optional[str] = Field(None, description='The carrier code.')
    shippingMethodCode: Optional[str] = Field(
        None, description='The shipping method code.'
    )


class V1GuestCartsCartIdCollectionPointSearchRequestPutRequest(BaseModel):
    countryId: str
    postcode: str


class V1GuestCartsCartIdCollectionPointSearchResultGetResponse(
    RootModel[List[TemandoShippingDataCollectionPointQuoteCollectionPointInterface]]
):
    root: List[TemandoShippingDataCollectionPointQuoteCollectionPointInterface]


class V1GuestCartsCartIdCollectionPointSelectPostRequest(BaseModel):
    entityId: int


class V1GuestCartsCartIdDeliveryOptionPostRequest(BaseModel):
    selectedOption: str


class V1GuestCartsCartIdEstimateShippingMethodsPostRequest(BaseModel):
    address: QuoteDataAddressInterface


class V1GuestCartsCartIdEstimateShippingMethodsPostResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods'
    )


class V1GuestCartsCartIdGiftMessagePostRequest(BaseModel):
    giftMessage: GiftMessageDataMessageInterface


class V1GuestCartsCartIdGiftMessageItemIdPostRequest(BaseModel):
    giftMessage: GiftMessageDataMessageInterface


class V1GuestCartsCartIdOrderPutRequest(BaseModel):
    paymentMethod: Optional[QuoteDataPaymentInterface] = None


class V1GuestCartsCartIdPaymentInformationPostRequest(BaseModel):
    billingAddress: Optional[QuoteDataAddressInterface] = None
    email: str
    paymentMethod: QuoteDataPaymentInterface


class V1GuestCartsCartIdPaymentMethodsGetResponse(
    RootModel[List[QuoteDataPaymentMethodInterface]]
):
    root: List[QuoteDataPaymentMethodInterface] = Field(
        ..., description='Array of payment methods.'
    )


class V1GuestCartsCartIdSelectedPaymentMethodPutRequest(BaseModel):
    method: QuoteDataPaymentInterface


class V1GuestCartsCartIdSetPaymentInformationPostRequest(BaseModel):
    billingAddress: Optional[QuoteDataAddressInterface] = None
    email: str
    paymentMethod: QuoteDataPaymentInterface


class V1GuestCartsCartIdShippingMethodsGetResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods.'
    )


class V1GuestGiftregistryCartIdEstimateShippingMethodsPostRequest(BaseModel):
    registryId: int = Field(..., description='The estimate registry id')


class V1GuestGiftregistryCartIdEstimateShippingMethodsPostResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods.'
    )


class V1HierarchyMoveIdPutRequest(BaseModel):
    newParentId: int


class V1HierarchyIdGetResponse(RootModel[List[CompanyDataHierarchyInterface]]):
    root: List[CompanyDataHierarchyInterface]


class V1IntegrationAdminTokenPostRequest(BaseModel):
    password: str
    username: str


class V1IntegrationCustomerTokenPostRequest(BaseModel):
    password: str
    username: str


class V1InvoiceInvoiceIdRefundPostRequest(BaseModel):
    appendComment: Optional[bool] = None
    arguments: Optional[SalesDataCreditmemoCreationArgumentsInterface] = None
    comment: Optional[SalesDataCreditmemoCommentCreationInterface] = None
    isOnline: Optional[bool] = None
    items: Optional[List[SalesDataCreditmemoItemCreationInterface]] = None
    notify: Optional[bool] = None


class V1InvoicesCommentsPostRequest(BaseModel):
    entity: SalesDataInvoiceCommentInterface


class V1ModulesGetResponse(RootModel[List[str]]):
    root: List[str]


class V1NegotiableCartsCartIdBillingAddressPostRequest(BaseModel):
    address: QuoteDataAddressInterface
    useForShipping: Optional[bool] = None


class V1NegotiableCartsCartIdEstimateShippingMethodsPostRequest(BaseModel):
    address: QuoteDataAddressInterface


class V1NegotiableCartsCartIdEstimateShippingMethodsPostResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods'
    )


class V1NegotiableCartsCartIdEstimateShippingMethodsByAddressIdPostRequest(BaseModel):
    addressId: int = Field(..., description='The estimate address id')


class V1NegotiableCartsCartIdEstimateShippingMethodsByAddressIdPostResponse(
    RootModel[List[QuoteDataShippingMethodInterface]]
):
    root: List[QuoteDataShippingMethodInterface] = Field(
        ..., description='An array of shipping methods.'
    )


class V1NegotiableCartsCartIdGiftCardsPostRequest(BaseModel):
    giftCardAccountData: GiftCardAccountDataGiftCardAccountInterface


class V1NegotiableCartsCartIdPaymentInformationPostRequest(BaseModel):
    billingAddress: Optional[QuoteDataAddressInterface] = None
    paymentMethod: QuoteDataPaymentInterface


class V1NegotiableCartsCartIdSetPaymentInformationPostRequest(BaseModel):
    billingAddress: Optional[QuoteDataAddressInterface] = None
    paymentMethod: QuoteDataPaymentInterface


class V1NegotiableQuoteAttachmentContentGetResponse(
    RootModel[List[NegotiableQuoteDataAttachmentContentInterface]]
):
    root: List[NegotiableQuoteDataAttachmentContentInterface]


class AttachmentIds(RootModel[List[int]]):
    root: List[int]


class V1NegotiableQuoteDeclinePostRequest(BaseModel):
    quoteId: int
    reason: str


class V1NegotiableQuotePricesUpdatedPostRequest(BaseModel):
    quoteIds: List[int]


class V1NegotiableQuoteRequestPostRequest(BaseModel):
    comment: Optional[str] = None
    files: Optional[List[NegotiableQuoteDataAttachmentContentInterface]] = None
    quoteId: int
    quoteName: str


class V1NegotiableQuoteSubmitToCustomerPostRequest(BaseModel):
    comment: Optional[str] = None
    files: Optional[List[NegotiableQuoteDataAttachmentContentInterface]] = None
    quoteId: int


class V1NegotiableQuoteQuoteIdCommentsGetResponse(
    RootModel[List[NegotiableQuoteDataCommentInterface]]
):
    root: List[NegotiableQuoteDataCommentInterface] = Field(
        ..., description='An array of quote comments.'
    )


class V1NegotiableQuoteQuoteIdShippingMethodPutRequest(BaseModel):
    shippingMethod: str = Field(..., description='The shipping method code.')


class V1OrderOrderIdInvoicePostRequest(BaseModel):
    appendComment: Optional[bool] = None
    arguments: Optional[SalesDataInvoiceCreationArgumentsInterface] = None
    capture: Optional[bool] = None
    comment: Optional[SalesDataInvoiceCommentCreationInterface] = None
    items: Optional[List[SalesDataInvoiceItemCreationInterface]] = None
    notify: Optional[bool] = None


class V1OrderOrderIdRefundPostRequest(BaseModel):
    appendComment: Optional[bool] = None
    arguments: Optional[SalesDataCreditmemoCreationArgumentsInterface] = None
    comment: Optional[SalesDataCreditmemoCommentCreationInterface] = None
    items: Optional[List[SalesDataCreditmemoItemCreationInterface]] = None
    notify: Optional[bool] = None


class V1OrderOrderIdShipPostRequest(BaseModel):
    appendComment: Optional[bool] = None
    arguments: Optional[SalesDataShipmentCreationArgumentsInterface] = None
    comment: Optional[SalesDataShipmentCommentCreationInterface] = None
    items: Optional[List[SalesDataShipmentItemCreationInterface]] = None
    notify: Optional[bool] = None
    packages: Optional[List[SalesDataShipmentPackageCreationInterface]] = None
    tracks: Optional[List[SalesDataShipmentTrackCreationInterface]] = None


class V1OrdersIdCommentsPostRequest(BaseModel):
    statusHistory: SalesDataOrderStatusHistoryInterface


class V1OrdersParentIdPutRequest(BaseModel):
    entity: SalesDataOrderAddressInterface


class V1ProductsAttributeSetsPostRequest(BaseModel):
    attributeSet: EavDataAttributeSetInterface
    skeletonId: int


class V1ProductsAttributeSetsAttributesPostRequest(BaseModel):
    attributeCode: str
    attributeGroupId: int
    attributeSetId: int
    sortOrder: int


class V1ProductsAttributeSetsGroupsPostRequest(BaseModel):
    group: EavDataAttributeGroupInterface


class V1ProductsAttributeSetsAttributeSetIdPutRequest(BaseModel):
    attributeSet: EavDataAttributeSetInterface


class V1ProductsAttributeSetsAttributeSetIdGroupsPutRequest(BaseModel):
    group: EavDataAttributeGroupInterface


class V1ProductsAttributesTypesGetResponse(
    RootModel[List[CatalogDataProductAttributeTypeInterface]]
):
    root: List[CatalogDataProductAttributeTypeInterface]


class V1ProductsBasePricesPostRequest(BaseModel):
    prices: List[CatalogDataBasePriceInterface]


class V1ProductsBasePricesPostResponse(
    RootModel[List[CatalogDataPriceUpdateResultInterface]]
):
    root: List[CatalogDataPriceUpdateResultInterface]


class V1ProductsBasePricesInformationPostRequest(BaseModel):
    skus: List[str]


class V1ProductsBasePricesInformationPostResponse(
    RootModel[List[CatalogDataBasePriceInterface]]
):
    root: List[CatalogDataBasePriceInterface]


class V1ProductsCostPostRequest(BaseModel):
    prices: List[CatalogDataCostInterface]


class V1ProductsCostPostResponse(
    RootModel[List[CatalogDataPriceUpdateResultInterface]]
):
    root: List[CatalogDataPriceUpdateResultInterface]


class V1ProductsCostDeletePostRequest(BaseModel):
    skus: List[str]


class V1ProductsCostInformationPostRequest(BaseModel):
    skus: List[str]


class V1ProductsCostInformationPostResponse(RootModel[List[CatalogDataCostInterface]]):
    root: List[CatalogDataCostInterface]


class V1ProductsLinksTypesGetResponse(
    RootModel[List[CatalogDataProductLinkTypeInterface]]
):
    root: List[CatalogDataProductLinkTypeInterface]


class V1ProductsLinksTypeAttributesGetResponse(
    RootModel[List[CatalogDataProductLinkAttributeInterface]]
):
    root: List[CatalogDataProductLinkAttributeInterface]


class V1ProductsOptionsTypesGetResponse(
    RootModel[List[CatalogDataProductCustomOptionTypeInterface]]
):
    root: List[CatalogDataProductCustomOptionTypeInterface]


class V1ProductsSpecialPricePostRequest(BaseModel):
    prices: List[CatalogDataSpecialPriceInterface]


class V1ProductsSpecialPricePostResponse(
    RootModel[List[CatalogDataPriceUpdateResultInterface]]
):
    root: List[CatalogDataPriceUpdateResultInterface]


class V1ProductsSpecialPriceDeletePostRequest(BaseModel):
    prices: List[CatalogDataSpecialPriceInterface]


class V1ProductsSpecialPriceDeletePostResponse(
    RootModel[List[CatalogDataPriceUpdateResultInterface]]
):
    root: List[CatalogDataPriceUpdateResultInterface]


class V1ProductsSpecialPriceInformationPostRequest(BaseModel):
    skus: List[str]


class V1ProductsSpecialPriceInformationPostResponse(
    RootModel[List[CatalogDataSpecialPriceInterface]]
):
    root: List[CatalogDataSpecialPriceInterface]


class V1ProductsTierPricesPostRequest(BaseModel):
    prices: List[CatalogDataTierPriceInterface]


class V1ProductsTierPricesPostResponse(
    RootModel[List[CatalogDataPriceUpdateResultInterface]]
):
    root: List[CatalogDataPriceUpdateResultInterface]


class V1ProductsTierPricesPutRequest(BaseModel):
    prices: List[CatalogDataTierPriceInterface]


class V1ProductsTierPricesPutResponse(
    RootModel[List[CatalogDataPriceUpdateResultInterface]]
):
    root: List[CatalogDataPriceUpdateResultInterface]


class V1ProductsTierPricesDeletePostRequest(BaseModel):
    prices: List[CatalogDataTierPriceInterface]


class V1ProductsTierPricesDeletePostResponse(
    RootModel[List[CatalogDataPriceUpdateResultInterface]]
):
    root: List[CatalogDataPriceUpdateResultInterface]


class V1ProductsTierPricesInformationPostRequest(BaseModel):
    skus: List[str]


class V1ProductsTierPricesInformationPostResponse(
    RootModel[List[CatalogDataTierPriceInterface]]
):
    root: List[CatalogDataTierPriceInterface]


class V1ProductsTypesGetResponse(RootModel[List[CatalogDataProductTypeInterface]]):
    root: List[CatalogDataProductTypeInterface]


class V1ProductsProductSkuStockItemsItemIdPutRequest(BaseModel):
    stockItem: CatalogInventoryDataStockItemInterface


class V1ProductsSkuDownloadableLinksGetResponse(
    RootModel[List[DownloadableDataLinkInterface]]
):
    root: List[DownloadableDataLinkInterface]


class V1ProductsSkuDownloadableLinksPostRequest(BaseModel):
    isGlobalScopeContent: Optional[bool] = None
    link: DownloadableDataLinkInterface


class V1ProductsSkuDownloadableLinksSamplesGetResponse(
    RootModel[List[DownloadableDataSampleInterface]]
):
    root: List[DownloadableDataSampleInterface]


class V1ProductsSkuDownloadableLinksSamplesPostRequest(BaseModel):
    isGlobalScopeContent: Optional[bool] = None
    sample: DownloadableDataSampleInterface


class V1ProductsSkuDownloadableLinksSamplesIdPutRequest(BaseModel):
    isGlobalScopeContent: Optional[bool] = None
    sample: DownloadableDataSampleInterface


class V1ProductsSkuDownloadableLinksIdPutRequest(BaseModel):
    isGlobalScopeContent: Optional[bool] = None
    link: DownloadableDataLinkInterface


class V1ProductsSkuGroupPricesCustomerGroupIdTiersGetResponse(
    RootModel[List[CatalogDataProductTierPriceInterface]]
):
    root: List[CatalogDataProductTierPriceInterface]


class V1ProductsSkuLinksPostRequest(BaseModel):
    items: List[CatalogDataProductLinkInterface]


class V1ProductsSkuLinksPutRequest(BaseModel):
    entity: CatalogDataProductLinkInterface


class V1ProductsSkuLinksTypeGetResponse(
    RootModel[List[CatalogDataProductLinkInterface]]
):
    root: List[CatalogDataProductLinkInterface]


class V1ProductsSkuWebsitesPostRequest(BaseModel):
    productWebsiteLink: CatalogDataProductWebsiteLinkInterface


class V1ProductsSkuWebsitesPutRequest(BaseModel):
    productWebsiteLink: CatalogDataProductWebsiteLinkInterface


class V1ReturnsIdCommentsPostRequest(BaseModel):
    data: RmaDataCommentInterface


class V1ReturnsIdTrackingNumbersPostRequest(BaseModel):
    track: RmaDataTrackInterface


class V1ReturnsAttributeMetadataCustomGetResponse(
    RootModel[List[FrameworkMetadataObjectInterface]]
):
    root: List[FrameworkMetadataObjectInterface]


class V1SharedCatalogPostRequest(BaseModel):
    sharedCatalog: SharedCatalogDataSharedCatalogInterface


class V1SharedCatalogIdPutRequest(BaseModel):
    sharedCatalog: SharedCatalogDataSharedCatalogInterface


class V1SharedCatalogIdCategoriesGetResponse(RootModel[List[int]]):
    root: List[int]


class V1SharedCatalogIdProductsGetResponse(RootModel[List[str]]):
    root: List[str]


class V1ShipmentTrackPostRequest(BaseModel):
    entity: SalesDataShipmentTrackInterface


class V1ShipmentIdCommentsPostRequest(BaseModel):
    entity: SalesDataShipmentCommentInterface


class V1StoreStoreConfigsGetResponse(RootModel[List[StoreDataStoreConfigInterface]]):
    root: List[StoreDataStoreConfigInterface]


class StoreCodes(RootModel[List[str]]):
    root: List[str]


class V1StoreStoreGroupsGetResponse(RootModel[List[StoreDataGroupInterface]]):
    root: List[StoreDataGroupInterface]


class V1StoreStoreViewsGetResponse(RootModel[List[StoreDataStoreInterface]]):
    root: List[StoreDataStoreInterface]


class V1StoreWebsitesGetResponse(RootModel[List[StoreDataWebsiteInterface]]):
    root: List[StoreDataWebsiteInterface]


class V1TaxClassesPostRequest(BaseModel):
    taxClass: TaxDataTaxClassInterface


class V1TaxClassesClassIdPutRequest(BaseModel):
    taxClass: TaxDataTaxClassInterface


class V1TaxRulesPostRequest(BaseModel):
    rule: TaxDataTaxRuleInterface


class V1TaxRulesPutRequest(BaseModel):
    rule: TaxDataTaxRuleInterface


class V1TemandoRmaRmaIdShipmentsPutRequest(BaseModel):
    returnShipmentIds: List[str]


class V1WorldpayGuestCartsCartIdPaymentInformationPostRequest(BaseModel):
    billingAddress: Optional[QuoteDataAddressInterface] = None
    email: str
    paymentMethod: QuoteDataPaymentInterface


class AsynchronousOperationsDataBulkOperationsStatusInterface(BaseModel):
    bulk_id: str = Field(..., description='Bulk uuid')
    description: str = Field(..., description='Bulk description')
    extension_attributes: Optional[
        AsynchronousOperationsDataBulkSummaryExtensionInterface
    ] = None
    operation_count: int = Field(
        ..., description='Total number of operations scheduled in scope of this bulk'
    )
    operations_list: List[AsynchronousOperationsDataSummaryOperationStatusInterface] = (
        Field(..., description='List of operation with statuses (short data).')
    )
    start_time: str = Field(..., description='Bulk scheduled time')
    user_id: int = Field(..., description='User id')


class AsynchronousOperationsDataDetailedOperationStatusInterface(BaseModel):
    bulk_uuid: str = Field(..., description='Bulk uuid')
    error_code: int = Field(..., description='Error code')
    extension_attributes: Optional[
        AsynchronousOperationsDataOperationExtensionInterface
    ] = None
    id: int = Field(..., description='Id')
    result_message: str = Field(..., description='Result message')
    result_serialized_data: str = Field(..., description='Serialized Data')
    serialized_data: str = Field(..., description='Data')
    status: int = Field(..., description='Operation status')
    topic_name: str = Field(..., description='Queue Topic')


class CatalogDataCategoryInterface(BaseModel):
    available_sort_by: Optional[List[str]] = None
    children: Optional[str] = None
    created_at: Optional[str] = None
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    extension_attributes: Optional[CatalogDataCategoryExtensionInterface] = None
    id: Optional[int] = None
    include_in_menu: Optional[bool] = None
    is_active: Optional[bool] = Field(None, description='Whether category is active')
    level: Optional[int] = Field(None, description='Category level')
    name: Optional[str] = Field(None, description='Category name')
    parent_id: Optional[int] = Field(None, description='Parent category ID')
    path: Optional[str] = None
    position: Optional[int] = Field(None, description='Category position')
    updated_at: Optional[str] = None


class CatalogDataCustomOptionExtensionInterface(BaseModel):
    file_info: Optional[FrameworkDataImageContentInterface] = None


class CatalogDataCustomOptionInterface(BaseModel):
    extension_attributes: Optional[CatalogDataCustomOptionExtensionInterface] = None
    option_id: str = Field(..., description='Option id')
    option_value: str = Field(..., description='Option value')


class CatalogDataProductAttributeMediaGalleryEntryExtensionInterface(BaseModel):
    video_content: Optional[FrameworkDataVideoContentInterface] = None


class CatalogDataProductAttributeMediaGalleryEntryInterface(BaseModel):
    content: Optional[FrameworkDataImageContentInterface] = None
    disabled: bool = Field(
        ..., description='If gallery entry is hidden from product page'
    )
    extension_attributes: Optional[
        CatalogDataProductAttributeMediaGalleryEntryExtensionInterface
    ] = None
    file: Optional[str] = Field(None, description='File path')
    id: Optional[int] = Field(None, description='Gallery entry ID')
    label: str = Field(..., description='Gallery entry alternative text')
    media_type: str = Field(..., description='Media type')
    position: int = Field(..., description='Gallery entry position (sort order)')
    types: List[str] = Field(
        ..., description='Gallery entry image types (thumbnail, image, small_image etc)'
    )


class CatalogDataProductCustomOptionInterface(BaseModel):
    extension_attributes: Optional[CatalogDataProductCustomOptionExtensionInterface] = (
        None
    )
    file_extension: Optional[str] = None
    image_size_x: Optional[int] = None
    image_size_y: Optional[int] = None
    is_require: bool = Field(..., description='Is require')
    max_characters: Optional[int] = None
    option_id: Optional[int] = Field(None, description='Option id')
    price: Optional[float] = Field(None, description='Price')
    price_type: Optional[str] = Field(None, description='Price type')
    product_sku: str = Field(..., description='Product SKU')
    sku: Optional[str] = Field(None, description='Sku')
    sort_order: int = Field(..., description='Sort order')
    title: str = Field(..., description='Option title')
    type: str = Field(..., description='Option type')
    values: Optional[List[CatalogDataProductCustomOptionValuesInterface]] = None


class CatalogDataProductOptionExtensionInterface(BaseModel):
    bundle_options: Optional[List[BundleDataBundleOptionInterface]] = None
    configurable_item_options: Optional[
        List[ConfigurableProductDataConfigurableItemOptionValueInterface]
    ] = None
    custom_options: Optional[List[CatalogDataCustomOptionInterface]] = None
    downloadable_option: Optional[DownloadableDataDownloadableOptionInterface] = None
    giftcard_item_option: Optional[GiftCardDataGiftCardOptionInterface] = None


class CatalogDataProductOptionInterface(BaseModel):
    extension_attributes: Optional[CatalogDataProductOptionExtensionInterface] = None


class CatalogInventoryStockItemCriteriaInterface(BaseModel):
    criteria_list: List[FrameworkCriteriaInterface] = Field(
        ..., description='Criteria objects added to current Composite Criteria'
    )
    filters: List[str] = Field(..., description='List of filters')
    limit: List[str] = Field(..., description='Limit')
    mapper_interface_name: str = Field(
        ..., description='Associated Mapper Interface name'
    )
    orders: List[str] = Field(..., description='Ordering criteria')


class CheckoutDataShippingInformationInterface(BaseModel):
    billing_address: Optional[QuoteDataAddressInterface] = None
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    extension_attributes: Optional[
        CheckoutDataShippingInformationExtensionInterface
    ] = None
    shipping_address: QuoteDataAddressInterface
    shipping_carrier_code: str = Field(..., description='Carrier code')
    shipping_method_code: str = Field(..., description='Shipping method code')


class CheckoutDataTotalsInformationInterface(BaseModel):
    address: QuoteDataAddressInterface
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    extension_attributes: Optional[CheckoutDataTotalsInformationExtensionInterface] = (
        None
    )
    shipping_carrier_code: Optional[str] = Field(None, description='Carrier code')
    shipping_method_code: Optional[str] = Field(
        None, description='Shipping method code'
    )


class CompanyDataCompanyExtensionInterface(BaseModel):
    applicable_payment_method: Optional[int] = None
    available_payment_methods: Optional[str] = None
    quote_config: Optional[NegotiableQuoteDataCompanyQuoteConfigInterface] = None
    use_config_settings: Optional[int] = None


class CompanyDataCompanyInterface(BaseModel):
    city: Optional[str] = Field(None, description='City.')
    comment: Optional[str] = Field(None, description='Comment.')
    company_email: Optional[str] = Field(None, description='Company email.')
    company_name: Optional[str] = Field(None, description='Company name.')
    country_id: Optional[str] = Field(None, description='Country.')
    customer_group_id: int = Field(..., description='Customer Group Id.')
    extension_attributes: Optional[CompanyDataCompanyExtensionInterface] = None
    id: Optional[int] = Field(None, description='Id.')
    legal_name: Optional[str] = Field(None, description='Legal name.')
    postcode: Optional[str] = Field(None, description='Postcode.')
    region: Optional[str] = Field(None, description='Region.')
    region_id: Optional[str] = Field(None, description='Region Id.')
    reject_reason: str = Field(..., description='Reject Reason.')
    rejected_at: str = Field(..., description='Rejected at time.')
    reseller_id: Optional[str] = Field(None, description='Reseller Id.')
    sales_representative_id: int = Field(..., description='Sales Representative Id.')
    status: Optional[int] = Field(None, description='Status.')
    street: List[str] = Field(..., description='Street.')
    super_user_id: int = Field(..., description='Company admin customer id.')
    telephone: Optional[str] = Field(None, description='Telephone.')
    vat_tax_id: Optional[str] = Field(None, description='Vat tax id.')


class CompanyDataTeamInterface(BaseModel):
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    description: Optional[str] = Field(None, description='Description')
    extension_attributes: Optional[CompanyDataTeamExtensionInterface] = None
    id: Optional[int] = Field(None, description='ID')
    name: Optional[str] = Field(None, description='Name')


class ConfigurableProductDataOptionInterface(BaseModel):
    attribute_id: Optional[str] = None
    extension_attributes: Optional[ConfigurableProductDataOptionExtensionInterface] = (
        None
    )
    id: Optional[int] = None
    is_use_default: Optional[bool] = None
    label: Optional[str] = None
    position: Optional[int] = None
    product_id: Optional[int] = None
    values: Optional[List[ConfigurableProductDataOptionValueInterface]] = None


class CustomerDataAddressInterface(BaseModel):
    city: Optional[str] = Field(None, description='City name')
    company: Optional[str] = Field(None, description='Company')
    country_id: Optional[str] = Field(
        None, description='Country code in ISO_3166-2 format'
    )
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    customer_id: Optional[int] = Field(None, description='Customer ID')
    default_billing: Optional[bool] = Field(
        None, description='If this address is default billing address'
    )
    default_shipping: Optional[bool] = Field(
        None, description='If this address is default shipping address.'
    )
    extension_attributes: Optional[CustomerDataAddressExtensionInterface] = None
    fax: Optional[str] = Field(None, description='Fax number')
    firstname: Optional[str] = Field(None, description='First name')
    id: Optional[int] = Field(None, description='ID')
    lastname: Optional[str] = Field(None, description='Last name')
    middlename: Optional[str] = Field(None, description='Middle name')
    postcode: Optional[str] = Field(None, description='Postcode')
    prefix: Optional[str] = Field(None, description='Prefix')
    region: Optional[CustomerDataRegionInterface] = None
    region_id: Optional[int] = Field(None, description='Region ID')
    street: Optional[List[str]] = Field(None, description='Street')
    suffix: Optional[str] = Field(None, description='Suffix')
    telephone: Optional[str] = Field(None, description='Telephone number')
    vat_id: Optional[str] = Field(None, description='Vat id')


class CustomerDataAttributeMetadataInterface(BaseModel):
    attribute_code: str = Field(..., description='Code of the attribute.')
    backend_type: str = Field(..., description='Backend type.')
    data_model: str = Field(..., description='Data model for attribute.')
    frontend_class: str = Field(
        ..., description='Class which is used to display the attribute on frontend.'
    )
    frontend_input: str = Field(..., description='HTML for input element.')
    frontend_label: str = Field(
        ..., description='Label which supposed to be displayed on frontend.'
    )
    input_filter: str = Field(..., description='Template used for input (e.g. "date")')
    is_filterable_in_grid: Optional[bool] = Field(
        None, description='It is filterable in customer grid'
    )
    is_searchable_in_grid: Optional[bool] = Field(
        None, description='It is searchable in customer grid'
    )
    is_used_in_grid: Optional[bool] = Field(
        None, description='It is used in customer grid'
    )
    is_visible_in_grid: Optional[bool] = Field(
        None, description='It is visible in customer grid'
    )
    multiline_count: int = Field(..., description='Of lines of the attribute value.')
    note: str = Field(..., description='The note attribute for the element.')
    options: List[CustomerDataOptionInterface] = Field(
        ..., description='Options of the attribute (key => value pairs for select)'
    )
    required: bool = Field(..., description='Attribute is required.')
    sort_order: int = Field(..., description='Attributes sort order.')
    store_label: str = Field(..., description='Label of the store.')
    system: bool = Field(..., description='This is a system attribute.')
    user_defined: bool = Field(
        ..., description='Current attribute has been defined by a user.'
    )
    validation_rules: List[CustomerDataValidationRuleInterface] = Field(
        ..., description='Validation rules.'
    )
    visible: bool = Field(..., description='Attribute is visible on frontend.')


class CustomerDataCustomerInterface(BaseModel):
    addresses: Optional[List[CustomerDataAddressInterface]] = Field(
        None, description='Customer addresses.'
    )
    confirmation: Optional[str] = Field(None, description='Confirmation')
    created_at: Optional[str] = Field(None, description='Created at time')
    created_in: Optional[str] = Field(None, description='Created in area')
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    default_billing: Optional[str] = Field(
        None, description='Default billing address id'
    )
    default_shipping: Optional[str] = Field(
        None, description='Default shipping address id'
    )
    disable_auto_group_change: Optional[int] = Field(
        None, description='Disable auto group change flag.'
    )
    dob: Optional[str] = Field(None, description='Date of birth')
    email: str = Field(..., description='Email address')
    extension_attributes: Optional[CustomerDataCustomerExtensionInterface] = None
    firstname: str = Field(..., description='First name')
    gender: Optional[int] = Field(None, description='Gender')
    group_id: Optional[int] = Field(None, description='Group id')
    id: Optional[int] = Field(None, description='Customer id')
    lastname: str = Field(..., description='Last name')
    middlename: Optional[str] = Field(None, description='Middle name')
    prefix: Optional[str] = Field(None, description='Prefix')
    store_id: Optional[int] = Field(None, description='Store id')
    suffix: Optional[str] = Field(None, description='Suffix')
    taxvat: Optional[str] = Field(None, description='Tax Vat')
    updated_at: Optional[str] = Field(None, description='Updated at time')
    website_id: Optional[int] = Field(None, description='Website id')


class DirectoryDataCountryInformationInterface(BaseModel):
    available_regions: Optional[List[DirectoryDataRegionInformationInterface]] = Field(
        None, description='The available regions for the store.'
    )
    extension_attributes: Optional[
        DirectoryDataCountryInformationExtensionInterface
    ] = None
    full_name_english: str = Field(
        ..., description='The country full name (in English) for the store.'
    )
    full_name_locale: str = Field(
        ..., description='The country full name (in store locale) for the store.'
    )
    id: str = Field(..., description='The country id for the store.')
    three_letter_abbreviation: str = Field(
        ..., description='The country 3 letter abbreviation for the store.'
    )
    two_letter_abbreviation: str = Field(
        ..., description='The country 2 letter abbreviation for the store.'
    )


class DirectoryDataCurrencyInformationInterface(BaseModel):
    available_currency_codes: List[str] = Field(
        ..., description='The list of allowed currency codes for the store.'
    )
    base_currency_code: str = Field(
        ..., description='The base currency code for the store.'
    )
    base_currency_symbol: str = Field(
        ..., description='The currency symbol of the base currency for the store.'
    )
    default_display_currency_code: str = Field(
        ..., description='The default display currency code for the store.'
    )
    default_display_currency_symbol: str = Field(
        ...,
        description='The currency symbol of the default display currency for the store.',
    )
    exchange_rates: List[DirectoryDataExchangeRateInterface] = Field(
        ..., description='The list of exchange rate information for the store.'
    )
    extension_attributes: Optional[
        DirectoryDataCurrencyInformationExtensionInterface
    ] = None


class EavDataAttributeOptionInterface(BaseModel):
    is_default: Optional[bool] = Field(None, description='Default')
    label: str = Field(..., description='Option label')
    sort_order: Optional[int] = Field(None, description='Option order')
    store_labels: Optional[List[EavDataAttributeOptionLabelInterface]] = Field(
        None, description='Option label for store scopes'
    )
    value: str = Field(..., description='Option value')


class ErrorParameters(RootModel[List[ErrorParametersItem]]):
    root: List[ErrorParametersItem] = Field(..., description='Error parameters list')


class FrameworkSearchAggregationInterface(BaseModel):
    bucket_names: List[str] = Field(..., description='Document field names')
    buckets: List[FrameworkSearchBucketInterface] = Field(
        ..., description='All Document fields'
    )


class FrameworkSearchCriteriaInterface(BaseModel):
    current_page: Optional[int] = Field(None, description='Current page.')
    filter_groups: List[FrameworkSearchFilterGroup] = Field(
        ..., description='A list of filter groups.'
    )
    page_size: Optional[int] = Field(None, description='Page size.')
    sort_orders: Optional[List[FrameworkSortOrder]] = Field(
        None, description='Sort order.'
    )


class FrameworkSearchSearchCriteriaInterface(BaseModel):
    current_page: Optional[int] = Field(None, description='Current page.')
    filter_groups: List[FrameworkSearchFilterGroup] = Field(
        ..., description='A list of filter groups.'
    )
    page_size: Optional[int] = Field(None, description='Page size.')
    request_name: str
    sort_orders: Optional[List[FrameworkSortOrder]] = Field(
        None, description='Sort order.'
    )


class FrameworkSearchSearchResultInterface(BaseModel):
    aggregations: FrameworkSearchAggregationInterface
    items: List[FrameworkSearchDocumentInterface]
    search_criteria: FrameworkSearchSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class GiftWrappingDataWrappingSearchResultsInterface(BaseModel):
    items: List[GiftWrappingDataWrappingInterface] = Field(..., description='Items')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class QuoteDataProductOptionExtensionInterface(BaseModel):
    bundle_options: Optional[List[BundleDataBundleOptionInterface]] = None
    configurable_item_options: Optional[
        List[ConfigurableProductDataConfigurableItemOptionValueInterface]
    ] = None
    custom_options: Optional[List[CatalogDataCustomOptionInterface]] = None
    downloadable_option: Optional[DownloadableDataDownloadableOptionInterface] = None
    giftcard_item_option: Optional[GiftCardDataGiftCardOptionInterface] = None


class QuoteDataProductOptionInterface(BaseModel):
    extension_attributes: Optional[QuoteDataProductOptionExtensionInterface] = None


class RequisitionListDataRequisitionListInterface(BaseModel):
    customer_id: int = Field(..., description='Customer ID')
    description: str = Field(..., description='Requisition List Description')
    extension_attributes: Optional[
        RequisitionListDataRequisitionListExtensionInterface
    ] = None
    id: int = Field(..., description='Requisition List ID')
    items: List[RequisitionListDataRequisitionListItemInterface] = Field(
        ..., description='Requisition List Items'
    )
    name: str = Field(..., description='Requisition List Name')
    updated_at: str = Field(..., description='Requisition List Update Time')


class RmaDataCommentSearchResultInterface(BaseModel):
    items: List[RmaDataCommentInterface] = Field(
        ..., description='Rma Status History list'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class RmaDataRmaInterface(BaseModel):
    comments: List[RmaDataCommentInterface] = Field(..., description='Comments list')
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    customer_custom_email: str = Field(..., description='Customer_custom_email')
    customer_id: int = Field(..., description='Customer_id')
    date_requested: str = Field(..., description='Date_requested')
    entity_id: int = Field(..., description='Entity_id')
    extension_attributes: Optional[RmaDataRmaExtensionInterface] = None
    increment_id: str = Field(..., description='Entity_id')
    items: List[RmaDataItemInterface] = Field(..., description='Items')
    order_id: int = Field(..., description='Order_id')
    order_increment_id: str = Field(..., description='Order_increment_id')
    status: str = Field(..., description='Status')
    store_id: int = Field(..., description='Store_id')
    tracks: List[RmaDataTrackInterface] = Field(..., description='Tracks list')


class RmaDataRmaSearchResultInterface(BaseModel):
    items: List[RmaDataRmaInterface] = Field(..., description='Rma list')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class RmaDataTrackSearchResultInterface(BaseModel):
    items: List[RmaDataTrackInterface] = Field(..., description='Rma list')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SalesDataCreditmemoCommentSearchResultInterface(BaseModel):
    items: List[SalesDataCreditmemoCommentInterface] = Field(
        ..., description='Array of collection items.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SalesDataCreditmemoInterface(BaseModel):
    adjustment: Optional[float] = Field(None, description='Credit memo adjustment.')
    adjustment_negative: Optional[float] = Field(
        None, description='Credit memo negative adjustment.'
    )
    adjustment_positive: Optional[float] = Field(
        None, description='Credit memo positive adjustment.'
    )
    base_adjustment: Optional[float] = Field(
        None, description='Credit memo base adjustment.'
    )
    base_adjustment_negative: Optional[float] = Field(
        None, description='Credit memo negative base adjustment.'
    )
    base_adjustment_positive: Optional[float] = Field(
        None, description='Credit memo positive base adjustment.'
    )
    base_currency_code: Optional[str] = Field(
        None, description='Credit memo base currency code.'
    )
    base_discount_amount: Optional[float] = Field(
        None, description='Credit memo base discount amount.'
    )
    base_discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Credit memo base discount tax compensation amount.'
    )
    base_grand_total: Optional[float] = Field(
        None, description='Credit memo base grand total.'
    )
    base_shipping_amount: Optional[float] = Field(
        None, description='Credit memo base shipping amount.'
    )
    base_shipping_discount_tax_compensation_amnt: Optional[float] = Field(
        None, description='Credit memo base shipping discount tax compensation amount.'
    )
    base_shipping_incl_tax: Optional[float] = Field(
        None, description='Credit memo base shipping including tax.'
    )
    base_shipping_tax_amount: Optional[float] = Field(
        None, description='Credit memo base shipping tax amount.'
    )
    base_subtotal: Optional[float] = Field(
        None, description='Credit memo base subtotal.'
    )
    base_subtotal_incl_tax: Optional[float] = Field(
        None, description='Credit memo base subtotal including tax.'
    )
    base_tax_amount: Optional[float] = Field(
        None, description='Credit memo base tax amount.'
    )
    base_to_global_rate: Optional[float] = Field(
        None, description='Credit memo base-to-global rate.'
    )
    base_to_order_rate: Optional[float] = Field(
        None, description='Credit memo base-to-order rate.'
    )
    billing_address_id: Optional[int] = Field(
        None, description='Credit memo billing address ID.'
    )
    comments: Optional[List[SalesDataCreditmemoCommentInterface]] = Field(
        None, description='Array of any credit memo comments. Otherwise, null.'
    )
    created_at: Optional[str] = Field(
        None, description='Credit memo created-at timestamp.'
    )
    creditmemo_status: Optional[int] = Field(None, description='Credit memo status.')
    discount_amount: Optional[float] = Field(
        None, description='Credit memo discount amount.'
    )
    discount_description: Optional[str] = Field(
        None, description='Credit memo discount description.'
    )
    discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Credit memo discount tax compensation amount.'
    )
    email_sent: Optional[int] = Field(
        None, description='Credit memo email sent flag value.'
    )
    entity_id: Optional[int] = Field(None, description='Credit memo ID.')
    extension_attributes: Optional[SalesDataCreditmemoExtensionInterface] = None
    global_currency_code: Optional[str] = Field(
        None, description='Credit memo global currency code.'
    )
    grand_total: Optional[float] = Field(None, description='Credit memo grand total.')
    increment_id: Optional[str] = Field(None, description='Credit memo increment ID.')
    invoice_id: Optional[int] = Field(None, description='Credit memo invoice ID.')
    items: List[SalesDataCreditmemoItemInterface] = Field(
        ..., description='Array of credit memo items.'
    )
    order_currency_code: Optional[str] = Field(
        None, description='Credit memo order currency code.'
    )
    order_id: int = Field(..., description='Credit memo order ID.')
    shipping_address_id: Optional[int] = Field(
        None, description='Credit memo shipping address ID.'
    )
    shipping_amount: Optional[float] = Field(
        None, description='Credit memo shipping amount.'
    )
    shipping_discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Credit memo shipping discount tax compensation amount.'
    )
    shipping_incl_tax: Optional[float] = Field(
        None, description='Credit memo shipping including tax.'
    )
    shipping_tax_amount: Optional[float] = Field(
        None, description='Credit memo shipping tax amount.'
    )
    state: Optional[int] = Field(None, description='Credit memo state.')
    store_currency_code: Optional[str] = Field(
        None, description='Credit memo store currency code.'
    )
    store_id: Optional[int] = Field(None, description='Credit memo store ID.')
    store_to_base_rate: Optional[float] = Field(
        None, description='Credit memo store-to-base rate.'
    )
    store_to_order_rate: Optional[float] = Field(
        None, description='Credit memo store-to-order rate.'
    )
    subtotal: Optional[float] = Field(None, description='Credit memo subtotal.')
    subtotal_incl_tax: Optional[float] = Field(
        None, description='Credit memo subtotal including tax.'
    )
    tax_amount: Optional[float] = Field(None, description='Credit memo tax amount.')
    transaction_id: Optional[str] = Field(
        None, description='Credit memo transaction ID.'
    )
    updated_at: Optional[str] = Field(
        None, description='Credit memo updated-at timestamp.'
    )


class SalesDataCreditmemoSearchResultInterface(BaseModel):
    items: List[SalesDataCreditmemoInterface] = Field(
        ..., description='Array of collection items.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SalesDataInvoiceCommentSearchResultInterface(BaseModel):
    items: List[SalesDataInvoiceCommentInterface] = Field(
        ..., description='Array of collection items.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SalesDataOrderItemInterface(BaseModel):
    additional_data: Optional[str] = Field(None, description='Additional data.')
    amount_refunded: Optional[float] = Field(None, description='Amount refunded.')
    applied_rule_ids: Optional[str] = Field(None, description='Applied rule IDs.')
    base_amount_refunded: Optional[float] = Field(
        None, description='Base amount refunded.'
    )
    base_cost: Optional[float] = Field(None, description='Base cost.')
    base_discount_amount: Optional[float] = Field(
        None, description='Base discount amount.'
    )
    base_discount_invoiced: Optional[float] = Field(
        None, description='Base discount invoiced.'
    )
    base_discount_refunded: Optional[float] = Field(
        None, description='Base discount refunded.'
    )
    base_discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Base discount tax compensation amount.'
    )
    base_discount_tax_compensation_invoiced: Optional[float] = Field(
        None, description='Base discount tax compensation invoiced.'
    )
    base_discount_tax_compensation_refunded: Optional[float] = Field(
        None, description='Base discount tax compensation refunded.'
    )
    base_original_price: Optional[float] = Field(
        None, description='Base original price.'
    )
    base_price: Optional[float] = Field(None, description='Base price.')
    base_price_incl_tax: Optional[float] = Field(
        None, description='Base price including tax.'
    )
    base_row_invoiced: Optional[float] = Field(None, description='Base row invoiced.')
    base_row_total: Optional[float] = Field(None, description='Base row total.')
    base_row_total_incl_tax: Optional[float] = Field(
        None, description='Base row total including tax.'
    )
    base_tax_amount: Optional[float] = Field(None, description='Base tax amount.')
    base_tax_before_discount: Optional[float] = Field(
        None, description='Base tax before discount.'
    )
    base_tax_invoiced: Optional[float] = Field(None, description='Base tax invoiced.')
    base_tax_refunded: Optional[float] = Field(None, description='Base tax refunded.')
    base_weee_tax_applied_amount: Optional[float] = Field(
        None, description='Base WEEE tax applied amount.'
    )
    base_weee_tax_applied_row_amnt: Optional[float] = Field(
        None, description='Base WEEE tax applied row amount.'
    )
    base_weee_tax_disposition: Optional[float] = Field(
        None, description='Base WEEE tax disposition.'
    )
    base_weee_tax_row_disposition: Optional[float] = Field(
        None, description='Base WEEE tax row disposition.'
    )
    created_at: Optional[str] = Field(None, description='Created-at timestamp.')
    description: Optional[str] = Field(None, description='Description.')
    discount_amount: Optional[float] = Field(None, description='Discount amount.')
    discount_invoiced: Optional[float] = Field(None, description='Discount invoiced.')
    discount_percent: Optional[float] = Field(None, description='Discount percent.')
    discount_refunded: Optional[float] = Field(None, description='Discount refunded.')
    discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Discount tax compensation amount.'
    )
    discount_tax_compensation_canceled: Optional[float] = Field(
        None, description='Discount tax compensation canceled.'
    )
    discount_tax_compensation_invoiced: Optional[float] = Field(
        None, description='Discount tax compensation invoiced.'
    )
    discount_tax_compensation_refunded: Optional[float] = Field(
        None, description='Discount tax compensation refunded.'
    )
    event_id: Optional[int] = Field(None, description='Event ID.')
    ext_order_item_id: Optional[str] = Field(
        None, description='External order item ID.'
    )
    extension_attributes: Optional[SalesDataOrderItemExtensionInterface] = None
    free_shipping: Optional[int] = Field(None, description='Free-shipping flag value.')
    gw_base_price: Optional[float] = Field(None, description='GW base price.')
    gw_base_price_invoiced: Optional[float] = Field(
        None, description='GW base price invoiced.'
    )
    gw_base_price_refunded: Optional[float] = Field(
        None, description='GW base price refunded.'
    )
    gw_base_tax_amount: Optional[float] = Field(None, description='GW base tax amount.')
    gw_base_tax_amount_invoiced: Optional[float] = Field(
        None, description='GW base tax amount invoiced.'
    )
    gw_base_tax_amount_refunded: Optional[float] = Field(
        None, description='GW base tax amount refunded.'
    )
    gw_id: Optional[int] = Field(None, description='GW ID.')
    gw_price: Optional[float] = Field(None, description='GW price.')
    gw_price_invoiced: Optional[float] = Field(None, description='GW price invoiced.')
    gw_price_refunded: Optional[float] = Field(None, description='GW price refunded.')
    gw_tax_amount: Optional[float] = Field(None, description='GW tax amount.')
    gw_tax_amount_invoiced: Optional[float] = Field(
        None, description='GW tax amount invoiced.'
    )
    gw_tax_amount_refunded: Optional[float] = Field(
        None, description='GW tax amount refunded.'
    )
    is_qty_decimal: Optional[int] = Field(
        None, description='Is-quantity-decimal flag value.'
    )
    is_virtual: Optional[int] = Field(None, description='Is-virtual flag value.')
    item_id: Optional[int] = Field(None, description='Item ID.')
    locked_do_invoice: Optional[int] = Field(
        None, description='Locked DO invoice flag value.'
    )
    locked_do_ship: Optional[int] = Field(
        None, description='Locked DO ship flag value.'
    )
    name: Optional[str] = Field(None, description='Name.')
    no_discount: Optional[int] = Field(None, description='No-discount flag value.')
    order_id: Optional[int] = Field(None, description='Order ID.')
    original_price: Optional[float] = Field(None, description='Original price.')
    parent_item: Optional[SalesDataOrderItemInterface] = None
    parent_item_id: Optional[int] = Field(None, description='Parent item ID.')
    price: Optional[float] = Field(None, description='Price.')
    price_incl_tax: Optional[float] = Field(None, description='Price including tax.')
    product_id: Optional[int] = Field(None, description='Product ID.')
    product_option: Optional[CatalogDataProductOptionInterface] = None
    product_type: Optional[str] = Field(None, description='Product type.')
    qty_backordered: Optional[float] = Field(None, description='Quantity backordered.')
    qty_canceled: Optional[float] = Field(None, description='Quantity canceled.')
    qty_invoiced: Optional[float] = Field(None, description='Quantity invoiced.')
    qty_ordered: Optional[float] = Field(None, description='Quantity ordered.')
    qty_refunded: Optional[float] = Field(None, description='Quantity refunded.')
    qty_returned: Optional[float] = Field(None, description='Quantity returned.')
    qty_shipped: Optional[float] = Field(None, description='Quantity shipped.')
    quote_item_id: Optional[int] = Field(None, description='Quote item ID.')
    row_invoiced: Optional[float] = Field(None, description='Row invoiced.')
    row_total: Optional[float] = Field(None, description='Row total.')
    row_total_incl_tax: Optional[float] = Field(
        None, description='Row total including tax.'
    )
    row_weight: Optional[float] = Field(None, description='Row weight.')
    sku: str = Field(..., description='SKU.')
    store_id: Optional[int] = Field(None, description='Store ID.')
    tax_amount: Optional[float] = Field(None, description='Tax amount.')
    tax_before_discount: Optional[float] = Field(
        None, description='Tax before discount.'
    )
    tax_canceled: Optional[float] = Field(None, description='Tax canceled.')
    tax_invoiced: Optional[float] = Field(None, description='Tax invoiced.')
    tax_percent: Optional[float] = Field(None, description='Tax percent.')
    tax_refunded: Optional[float] = Field(None, description='Tax refunded.')
    updated_at: Optional[str] = Field(None, description='Updated-at timestamp.')
    weee_tax_applied: Optional[str] = Field(None, description='WEEE tax applied.')
    weee_tax_applied_amount: Optional[float] = Field(
        None, description='WEEE tax applied amount.'
    )
    weee_tax_applied_row_amount: Optional[float] = Field(
        None, description='WEEE tax applied row amount.'
    )
    weee_tax_disposition: Optional[float] = Field(
        None, description='WEEE tax disposition.'
    )
    weee_tax_row_disposition: Optional[float] = Field(
        None, description='WEEE tax row disposition.'
    )
    weight: Optional[float] = Field(None, description='Weight.')


class SalesDataOrderItemSearchResultInterface(BaseModel):
    items: List[SalesDataOrderItemInterface] = Field(
        ..., description='Array of collection items.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SalesDataOrderPaymentExtensionInterface(BaseModel):
    vault_payment_token: Optional[VaultDataPaymentTokenInterface] = None


class SalesDataOrderPaymentInterface(BaseModel):
    account_status: str = Field(..., description='Account status.')
    additional_data: Optional[str] = Field(None, description='Additional data.')
    additional_information: List[str] = Field(
        ..., description='Array of additional information.'
    )
    address_status: Optional[str] = Field(None, description='Address status.')
    amount_authorized: Optional[float] = Field(None, description='Amount authorized.')
    amount_canceled: Optional[float] = Field(None, description='Amount canceled.')
    amount_ordered: Optional[float] = Field(None, description='Amount ordered.')
    amount_paid: Optional[float] = Field(None, description='Amount paid.')
    amount_refunded: Optional[float] = Field(None, description='Amount refunded.')
    anet_trans_method: Optional[str] = Field(
        None, description='Anet transaction method.'
    )
    base_amount_authorized: Optional[float] = Field(
        None, description='Base amount authorized.'
    )
    base_amount_canceled: Optional[float] = Field(
        None, description='Base amount canceled.'
    )
    base_amount_ordered: Optional[float] = Field(
        None, description='Base amount ordered.'
    )
    base_amount_paid: Optional[float] = Field(None, description='Base amount paid.')
    base_amount_paid_online: Optional[float] = Field(
        None, description='Base amount paid online.'
    )
    base_amount_refunded: Optional[float] = Field(
        None, description='Base amount refunded.'
    )
    base_amount_refunded_online: Optional[float] = Field(
        None, description='Base amount refunded online.'
    )
    base_shipping_amount: Optional[float] = Field(
        None, description='Base shipping amount.'
    )
    base_shipping_captured: Optional[float] = Field(
        None, description='Base shipping captured amount.'
    )
    base_shipping_refunded: Optional[float] = Field(
        None, description='Base shipping refunded amount.'
    )
    cc_approval: Optional[str] = Field(None, description='Credit card approval.')
    cc_avs_status: Optional[str] = Field(None, description='Credit card avs status.')
    cc_cid_status: Optional[str] = Field(None, description='Credit card CID status.')
    cc_debug_request_body: Optional[str] = Field(
        None, description='Credit card debug request body.'
    )
    cc_debug_response_body: Optional[str] = Field(
        None, description='Credit card debug response body.'
    )
    cc_debug_response_serialized: Optional[str] = Field(
        None, description='Credit card debug response serialized.'
    )
    cc_exp_month: Optional[str] = Field(
        None, description='Credit card expiration month.'
    )
    cc_exp_year: Optional[str] = Field(None, description='Credit card expiration year.')
    cc_last4: str = Field(..., description='Last four digits of the credit card.')
    cc_number_enc: Optional[str] = Field(
        None, description='Encrypted credit card number.'
    )
    cc_owner: Optional[str] = Field(None, description='Credit card number.')
    cc_secure_verify: Optional[str] = Field(
        None, description='Credit card secure verify.'
    )
    cc_ss_issue: Optional[str] = Field(None, description='Credit card SS issue.')
    cc_ss_start_month: Optional[str] = Field(
        None, description='Credit card SS start month.'
    )
    cc_ss_start_year: Optional[str] = Field(
        None, description='Credit card SS start year.'
    )
    cc_status: Optional[str] = Field(None, description='Credit card status.')
    cc_status_description: Optional[str] = Field(
        None, description='Credit card status description.'
    )
    cc_trans_id: Optional[str] = Field(None, description='Credit card transaction ID.')
    cc_type: Optional[str] = Field(None, description='Credit card type.')
    echeck_account_name: Optional[str] = Field(None, description='eCheck account name.')
    echeck_account_type: Optional[str] = Field(None, description='eCheck account type.')
    echeck_bank_name: Optional[str] = Field(None, description='eCheck bank name.')
    echeck_routing_number: Optional[str] = Field(
        None, description='eCheck routing number.'
    )
    echeck_type: Optional[str] = Field(None, description='eCheck type.')
    entity_id: Optional[int] = Field(None, description='Entity ID.')
    extension_attributes: Optional[SalesDataOrderPaymentExtensionInterface] = None
    last_trans_id: Optional[str] = Field(None, description='Last transaction ID.')
    method: str = Field(..., description='Method.')
    parent_id: Optional[int] = Field(None, description='Parent ID.')
    po_number: Optional[str] = Field(None, description='PO number.')
    protection_eligibility: Optional[str] = Field(
        None, description='Protection eligibility.'
    )
    quote_payment_id: Optional[int] = Field(None, description='Quote payment ID.')
    shipping_amount: Optional[float] = Field(None, description='Shipping amount.')
    shipping_captured: Optional[float] = Field(None, description='Shipping captured.')
    shipping_refunded: Optional[float] = Field(None, description='Shipping refunded.')


class SalesDataOrderStatusHistorySearchResultInterface(BaseModel):
    items: List[SalesDataOrderStatusHistoryInterface] = Field(
        ..., description='Array of collection items.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SalesDataShipmentCommentSearchResultInterface(BaseModel):
    items: List[SalesDataShipmentCommentInterface] = Field(
        ..., description='Array of collection items.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SalesDataShipmentInterface(BaseModel):
    billing_address_id: Optional[int] = Field(None, description='Billing address ID.')
    comments: List[SalesDataShipmentCommentInterface] = Field(
        ..., description='Array of comments.'
    )
    created_at: Optional[str] = Field(None, description='Created-at timestamp.')
    customer_id: Optional[int] = Field(None, description='Customer ID.')
    email_sent: Optional[int] = Field(None, description='Email-sent flag value.')
    entity_id: Optional[int] = Field(None, description='Shipment ID.')
    extension_attributes: Optional[SalesDataShipmentExtensionInterface] = None
    increment_id: Optional[str] = Field(None, description='Increment ID.')
    items: List[SalesDataShipmentItemInterface] = Field(
        ..., description='Array of items.'
    )
    order_id: int = Field(..., description='Order ID.')
    packages: Optional[List[SalesDataShipmentPackageInterface]] = Field(
        None, description='Array of packages, if any. Otherwise, null.'
    )
    shipment_status: Optional[int] = Field(None, description='Shipment status.')
    shipping_address_id: Optional[int] = Field(None, description='Shipping address ID.')
    shipping_label: Optional[str] = Field(None, description='Shipping label.')
    store_id: Optional[int] = Field(None, description='Store ID.')
    total_qty: Optional[float] = Field(None, description='Total quantity.')
    total_weight: Optional[float] = Field(None, description='Total weight.')
    tracks: List[SalesDataShipmentTrackInterface] = Field(
        ..., description='Array of tracks.'
    )
    updated_at: Optional[str] = Field(None, description='Updated-at timestamp.')


class SalesDataShipmentSearchResultInterface(BaseModel):
    items: List[SalesDataShipmentInterface] = Field(
        ..., description='Array of collection items.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SalesDataShippingExtensionInterface(BaseModel):
    collection_point: Optional[
        TemandoShippingDataCollectionPointOrderCollectionPointInterface
    ] = None
    ext_order_id: Optional[str] = None
    shipping_experience: Optional[
        TemandoShippingDataOrderShippingExperienceInterface
    ] = None


class SalesDataShippingInterface(BaseModel):
    address: Optional[SalesDataOrderAddressInterface] = None
    extension_attributes: Optional[SalesDataShippingExtensionInterface] = None
    method: Optional[str] = Field(None, description='Shipping method')
    total: Optional[SalesDataTotalInterface] = None


class SalesDataTransactionSearchResultInterface(BaseModel):
    items: List[SalesDataTransactionInterface] = Field(
        ..., description='Array of collection items.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SalesRuleDataCouponSearchResultInterface(BaseModel):
    items: List[SalesRuleDataCouponInterface] = Field(..., description='Rules.')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SalesRuleDataRuleInterface(BaseModel):
    action_condition: Optional[SalesRuleDataConditionInterface] = None
    apply_to_shipping: bool = Field(..., description='The rule applies to shipping')
    condition: Optional[SalesRuleDataConditionInterface] = None
    coupon_type: str = Field(..., description='Coupon type')
    customer_group_ids: List[int] = Field(
        ..., description='Ids of customer groups that the rule applies to'
    )
    description: Optional[str] = Field(None, description='Description')
    discount_amount: float = Field(..., description='Discount amount')
    discount_qty: Optional[float] = Field(
        None, description='Maximum qty discount is applied'
    )
    discount_step: int = Field(..., description='Discount step')
    extension_attributes: Optional[SalesRuleDataRuleExtensionInterface] = None
    from_date: Optional[str] = Field(
        None, description='The start date when the coupon is active'
    )
    is_active: bool = Field(..., description='The coupon is active')
    is_advanced: bool = Field(..., description='Is this field needed')
    is_rss: bool = Field(..., description='Whether the rule is in RSS')
    name: Optional[str] = Field(None, description='Rule name')
    product_ids: Optional[List[int]] = Field(None, description='Product ids')
    rule_id: Optional[int] = Field(None, description='Rule id')
    simple_action: Optional[str] = Field(None, description='Simple action of the rule')
    simple_free_shipping: Optional[str] = Field(
        None, description='To grant free shipping'
    )
    sort_order: int = Field(..., description='Sort order')
    stop_rules_processing: bool = Field(..., description='To stop rule processing')
    store_labels: Optional[List[SalesRuleDataRuleLabelInterface]] = Field(
        None, description='Display label'
    )
    times_used: int = Field(..., description='How many times the rule has been used')
    to_date: Optional[str] = Field(
        None, description='The end date when the coupon is active'
    )
    use_auto_generation: bool = Field(..., description='To auto generate coupon')
    uses_per_coupon: int = Field(..., description='Limit of uses per coupon')
    uses_per_customer: int = Field(..., description='Number of uses per customer')
    website_ids: List[int] = Field(
        ..., description='A list of websites the rule applies to'
    )


class SalesRuleDataRuleSearchResultInterface(BaseModel):
    items: List[SalesRuleDataRuleInterface] = Field(..., description='Rules.')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SharedCatalogDataSearchResultsInterface(BaseModel):
    items: List[SharedCatalogDataSharedCatalogInterface] = Field(
        ..., description='Shared Catalog list.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class TaxDataGrandTotalDetailsInterface(BaseModel):
    amount: float = Field(..., description='Tax amount value')
    group_id: int = Field(..., description='Group identifier')
    rates: List[TaxDataGrandTotalRatesInterface] = Field(
        ..., description='Tax rates info'
    )


class TaxDataTaxClassSearchResultsInterface(BaseModel):
    items: List[TaxDataTaxClassInterface] = Field(..., description='Items')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class TaxDataTaxRateInterface(BaseModel):
    code: str = Field(..., description='Tax rate code')
    extension_attributes: Optional[TaxDataTaxRateExtensionInterface] = None
    id: Optional[int] = Field(None, description='Id')
    rate: float = Field(..., description='Tax rate in percentage')
    region_name: Optional[str] = Field(None, description='Region name')
    tax_country_id: str = Field(..., description='Country id')
    tax_postcode: Optional[str] = Field(None, description='Postcode')
    tax_region_id: Optional[int] = Field(None, description='Region id')
    titles: Optional[List[TaxDataTaxRateTitleInterface]] = Field(
        None, description='Tax rate titles'
    )
    zip_from: Optional[int] = Field(None, description='Zip range from')
    zip_is_range: Optional[int] = Field(None, description='Zip is range')
    zip_to: Optional[int] = Field(None, description='Zip range to')


class TaxDataTaxRateSearchResultsInterface(BaseModel):
    items: List[TaxDataTaxRateInterface] = Field(..., description='Items')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class TaxDataTaxRuleSearchResultsInterface(BaseModel):
    items: List[TaxDataTaxRuleInterface] = Field(..., description='Items')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class V1AttributeMetadataCustomerGetResponse(
    RootModel[List[CustomerDataAttributeMetadataInterface]]
):
    root: List[CustomerDataAttributeMetadataInterface]


class V1AttributeMetadataCustomerCustomGetResponse(
    RootModel[List[CustomerDataAttributeMetadataInterface]]
):
    root: List[CustomerDataAttributeMetadataInterface]


class V1AttributeMetadataCustomerFormFormCodeGetResponse(
    RootModel[List[CustomerDataAttributeMetadataInterface]]
):
    root: List[CustomerDataAttributeMetadataInterface]


class V1AttributeMetadataCustomerAddressGetResponse(
    RootModel[List[CustomerDataAttributeMetadataInterface]]
):
    root: List[CustomerDataAttributeMetadataInterface]


class V1AttributeMetadataCustomerAddressCustomGetResponse(
    RootModel[List[CustomerDataAttributeMetadataInterface]]
):
    root: List[CustomerDataAttributeMetadataInterface]


class V1AttributeMetadataCustomerAddressFormFormCodeGetResponse(
    RootModel[List[CustomerDataAttributeMetadataInterface]]
):
    root: List[CustomerDataAttributeMetadataInterface]


class V1CartsMineShippingInformationPostRequest(BaseModel):
    addressInformation: CheckoutDataShippingInformationInterface


class V1CartsMineTotalsInformationPostRequest(BaseModel):
    addressInformation: CheckoutDataTotalsInformationInterface


class V1CartsCartIdShippingInformationPostRequest(BaseModel):
    addressInformation: CheckoutDataShippingInformationInterface


class V1CartsCartIdTotalsInformationPostRequest(BaseModel):
    addressInformation: CheckoutDataTotalsInformationInterface


class V1CategoriesPostRequest(BaseModel):
    category: CatalogDataCategoryInterface


class V1CategoriesAttributesAttributeCodeOptionsGetResponse(
    RootModel[List[EavDataAttributeOptionInterface]]
):
    root: List[EavDataAttributeOptionInterface]


class V1CategoriesIdPutRequest(BaseModel):
    category: CatalogDataCategoryInterface


class V1CompanyPostRequest(BaseModel):
    company: CompanyDataCompanyInterface


class V1CompanyRoleRoleIdUsersGetResponse(
    RootModel[List[CustomerDataCustomerInterface]]
):
    root: List[CustomerDataCustomerInterface]


class V1CompanyCompanyIdPutRequest(BaseModel):
    company: CompanyDataCompanyInterface


class V1ConfigurableProductsSkuOptionsPostRequest(BaseModel):
    option: ConfigurableProductDataOptionInterface


class V1ConfigurableProductsSkuOptionsAllGetResponse(
    RootModel[List[ConfigurableProductDataOptionInterface]]
):
    root: List[ConfigurableProductDataOptionInterface]


class V1ConfigurableProductsSkuOptionsIdPutRequest(BaseModel):
    option: ConfigurableProductDataOptionInterface


class V1CreditmemoPostRequest(BaseModel):
    entity: SalesDataCreditmemoInterface


class V1CreditmemoRefundPostRequest(BaseModel):
    creditmemo: SalesDataCreditmemoInterface
    offlineRequested: Optional[bool] = None


class V1CustomersPostRequest(BaseModel):
    customer: CustomerDataCustomerInterface
    password: Optional[str] = None
    redirectUrl: Optional[str] = None


class V1CustomersMePutRequest(BaseModel):
    customer: CustomerDataCustomerInterface
    passwordHash: Optional[str] = None


class V1CustomersValidatePutRequest(BaseModel):
    customer: CustomerDataCustomerInterface


class V1CustomersCustomerIdPutRequest(BaseModel):
    customer: CustomerDataCustomerInterface
    passwordHash: Optional[str] = None


class V1DirectoryCountriesGetResponse(
    RootModel[List[DirectoryDataCountryInformationInterface]]
):
    root: List[DirectoryDataCountryInformationInterface]


class V1GuestCartsCartIdShippingInformationPostRequest(BaseModel):
    addressInformation: CheckoutDataShippingInformationInterface


class V1GuestCartsCartIdTotalsInformationPostRequest(BaseModel):
    addressInformation: CheckoutDataTotalsInformationInterface


class V1NegotiableCartsCartIdShippingInformationPostRequest(BaseModel):
    addressInformation: CheckoutDataShippingInformationInterface


class V1ProductsAttributesAttributeCodeOptionsGetResponse(
    RootModel[List[EavDataAttributeOptionInterface]]
):
    root: List[EavDataAttributeOptionInterface]


class V1ProductsAttributesAttributeCodeOptionsPostRequest(BaseModel):
    option: EavDataAttributeOptionInterface


class V1ProductsOptionsPostRequest(BaseModel):
    option: CatalogDataProductCustomOptionInterface


class V1ProductsOptionsOptionIdPutRequest(BaseModel):
    option: CatalogDataProductCustomOptionInterface


class V1ProductsSkuMediaGetResponse(
    RootModel[List[CatalogDataProductAttributeMediaGalleryEntryInterface]]
):
    root: List[CatalogDataProductAttributeMediaGalleryEntryInterface]


class V1ProductsSkuMediaPostRequest(BaseModel):
    entry: CatalogDataProductAttributeMediaGalleryEntryInterface


class V1ProductsSkuMediaEntryIdPutRequest(BaseModel):
    entry: CatalogDataProductAttributeMediaGalleryEntryInterface


class V1ProductsSkuOptionsGetResponse(
    RootModel[List[CatalogDataProductCustomOptionInterface]]
):
    root: List[CatalogDataProductCustomOptionInterface]


class V1RequisitionListsPostRequest(BaseModel):
    requisitionList: RequisitionListDataRequisitionListInterface


class V1ReturnsPostRequest(BaseModel):
    rmaDataObject: RmaDataRmaInterface


class V1ReturnsIdDeleteRequest(BaseModel):
    rmaDataObject: RmaDataRmaInterface


class V1ReturnsIdPutRequest(BaseModel):
    rmaDataObject: RmaDataRmaInterface


class V1ReturnsAttributeMetadataGetResponse(
    RootModel[List[CustomerDataAttributeMetadataInterface]]
):
    root: List[CustomerDataAttributeMetadataInterface]


class V1ReturnsAttributeMetadataFormFormCodeGetResponse(
    RootModel[List[CustomerDataAttributeMetadataInterface]]
):
    root: List[CustomerDataAttributeMetadataInterface]


class V1SalesRulesPostRequest(BaseModel):
    rule: SalesRuleDataRuleInterface


class V1SalesRulesRuleIdPutRequest(BaseModel):
    rule: SalesRuleDataRuleInterface


class V1SharedCatalogIdAssignCategoriesPostRequest(BaseModel):
    categories: List[CatalogDataCategoryInterface]


class V1SharedCatalogIdUnassignCategoriesPostRequest(BaseModel):
    categories: List[CatalogDataCategoryInterface]


class V1SharedCatalogSharedCatalogIdAssignCompaniesPostRequest(BaseModel):
    companies: List[CompanyDataCompanyInterface]


class V1SharedCatalogSharedCatalogIdUnassignCompaniesPostRequest(BaseModel):
    companies: List[CompanyDataCompanyInterface]


class V1ShipmentPostRequest(BaseModel):
    entity: SalesDataShipmentInterface


class V1TaxRatesPostRequest(BaseModel):
    taxRate: TaxDataTaxRateInterface


class V1TaxRatesPutRequest(BaseModel):
    taxRate: TaxDataTaxRateInterface


class V1TeamCompanyIdPostRequest(BaseModel):
    team: CompanyDataTeamInterface


class V1TeamTeamIdPutRequest(BaseModel):
    team: CompanyDataTeamInterface


class AsynchronousOperationsDataDetailedBulkOperationsStatusInterface(BaseModel):
    bulk_id: str = Field(..., description='Bulk uuid')
    description: str = Field(..., description='Bulk description')
    extension_attributes: Optional[
        AsynchronousOperationsDataBulkSummaryExtensionInterface
    ] = None
    operation_count: int = Field(
        ..., description='Total number of operations scheduled in scope of this bulk'
    )
    operations_list: List[
        AsynchronousOperationsDataDetailedOperationStatusInterface
    ] = Field(..., description='Operations list.')
    start_time: str = Field(..., description='Bulk scheduled time')
    user_id: int = Field(..., description='User id')


class CatalogDataCategoryAttributeInterface(BaseModel):
    apply_to: Optional[List[str]] = Field(
        None, description='Apply to value for the element'
    )
    attribute_code: str = Field(..., description='Code of the attribute.')
    attribute_id: Optional[int] = Field(None, description='Id of the attribute.')
    backend_model: Optional[str] = Field(None, description='Backend model')
    backend_type: Optional[str] = Field(None, description='Backend type.')
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    default_frontend_label: Optional[str] = Field(
        None, description='Frontend label for default store'
    )
    default_value: Optional[str] = Field(
        None, description='Default value for the element.'
    )
    entity_type_id: str = Field(..., description='Entity type id')
    extension_attributes: Optional[CatalogDataEavAttributeExtensionInterface] = None
    frontend_class: Optional[str] = Field(
        None, description='Frontend class of attribute'
    )
    frontend_input: str = Field(..., description='HTML for input element.')
    frontend_labels: List[EavDataAttributeFrontendLabelInterface] = Field(
        ..., description='Frontend label for each store'
    )
    is_comparable: Optional[str] = Field(
        None, description='The attribute can be compared on the frontend'
    )
    is_filterable: Optional[bool] = Field(
        None, description='It used in layered navigation'
    )
    is_filterable_in_grid: Optional[bool] = Field(
        None, description='It is filterable in catalog product grid'
    )
    is_filterable_in_search: Optional[bool] = Field(
        None, description='It is used in search results layered navigation'
    )
    is_html_allowed_on_front: Optional[bool] = Field(
        None, description='The HTML tags are allowed on the frontend'
    )
    is_required: bool = Field(..., description='Attribute is required.')
    is_searchable: Optional[str] = Field(
        None, description='The attribute can be used in Quick Search'
    )
    is_unique: Optional[str] = Field(None, description='This is a unique attribute')
    is_used_for_promo_rules: Optional[str] = Field(
        None, description='The attribute can be used for promo rules'
    )
    is_used_in_grid: Optional[bool] = Field(
        None, description='It is used in catalog product grid'
    )
    is_user_defined: Optional[bool] = Field(
        None, description='Current attribute has been defined by a user.'
    )
    is_visible: Optional[bool] = Field(
        None, description='Attribute is visible on frontend.'
    )
    is_visible_in_advanced_search: Optional[str] = Field(
        None, description='The attribute can be used in Advanced Search'
    )
    is_visible_in_grid: Optional[bool] = Field(
        None, description='It is visible in catalog product grid'
    )
    is_visible_on_front: Optional[str] = Field(
        None, description='The attribute is visible on the frontend'
    )
    is_wysiwyg_enabled: Optional[bool] = Field(None, description='WYSIWYG flag')
    note: Optional[str] = Field(None, description='The note attribute for the element.')
    options: Optional[List[EavDataAttributeOptionInterface]] = Field(
        None, description='Options of the attribute (key => value pairs for select)'
    )
    position: Optional[int] = Field(None, description='Position')
    scope: Optional[str] = Field(None, description='Attribute scope')
    source_model: Optional[str] = Field(None, description='Source model')
    used_for_sort_by: Optional[bool] = Field(
        None, description='It is used for sorting in product listing'
    )
    used_in_product_listing: Optional[str] = Field(
        None, description='The attribute can be used in product listing'
    )
    validation_rules: Optional[List[EavDataAttributeValidationRuleInterface]] = Field(
        None, description='Validation rules.'
    )


class CatalogDataCategoryAttributeSearchResultsInterface(BaseModel):
    items: List[CatalogDataCategoryAttributeInterface] = Field(
        ..., description='Attributes list.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CatalogDataCategorySearchResultsInterface(BaseModel):
    items: List[CatalogDataCategoryInterface] = Field(..., description='Categories')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CatalogDataProductAttributeInterface(BaseModel):
    apply_to: Optional[List[str]] = Field(
        None, description='Apply to value for the element'
    )
    attribute_code: str = Field(..., description='Code of the attribute.')
    attribute_id: Optional[int] = Field(None, description='Id of the attribute.')
    backend_model: Optional[str] = Field(None, description='Backend model')
    backend_type: Optional[str] = Field(None, description='Backend type.')
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    default_frontend_label: Optional[str] = Field(
        None, description='Frontend label for default store'
    )
    default_value: Optional[str] = Field(
        None, description='Default value for the element.'
    )
    entity_type_id: str = Field(..., description='Entity type id')
    extension_attributes: Optional[CatalogDataEavAttributeExtensionInterface] = None
    frontend_class: Optional[str] = Field(
        None, description='Frontend class of attribute'
    )
    frontend_input: str = Field(..., description='HTML for input element.')
    frontend_labels: List[EavDataAttributeFrontendLabelInterface] = Field(
        ..., description='Frontend label for each store'
    )
    is_comparable: Optional[str] = Field(
        None, description='The attribute can be compared on the frontend'
    )
    is_filterable: Optional[bool] = Field(
        None, description='It used in layered navigation'
    )
    is_filterable_in_grid: Optional[bool] = Field(
        None, description='It is filterable in catalog product grid'
    )
    is_filterable_in_search: Optional[bool] = Field(
        None, description='It is used in search results layered navigation'
    )
    is_html_allowed_on_front: Optional[bool] = Field(
        None, description='The HTML tags are allowed on the frontend'
    )
    is_required: bool = Field(..., description='Attribute is required.')
    is_searchable: Optional[str] = Field(
        None, description='The attribute can be used in Quick Search'
    )
    is_unique: Optional[str] = Field(None, description='This is a unique attribute')
    is_used_for_promo_rules: Optional[str] = Field(
        None, description='The attribute can be used for promo rules'
    )
    is_used_in_grid: Optional[bool] = Field(
        None, description='It is used in catalog product grid'
    )
    is_user_defined: Optional[bool] = Field(
        None, description='Current attribute has been defined by a user.'
    )
    is_visible: Optional[bool] = Field(
        None, description='Attribute is visible on frontend.'
    )
    is_visible_in_advanced_search: Optional[str] = Field(
        None, description='The attribute can be used in Advanced Search'
    )
    is_visible_in_grid: Optional[bool] = Field(
        None, description='It is visible in catalog product grid'
    )
    is_visible_on_front: Optional[str] = Field(
        None, description='The attribute is visible on the frontend'
    )
    is_wysiwyg_enabled: Optional[bool] = Field(None, description='WYSIWYG flag')
    note: Optional[str] = Field(None, description='The note attribute for the element.')
    options: Optional[List[EavDataAttributeOptionInterface]] = Field(
        None, description='Options of the attribute (key => value pairs for select)'
    )
    position: Optional[int] = Field(None, description='Position')
    scope: Optional[str] = Field(None, description='Attribute scope')
    source_model: Optional[str] = Field(None, description='Source model')
    used_for_sort_by: Optional[bool] = Field(
        None, description='It is used for sorting in product listing'
    )
    used_in_product_listing: Optional[str] = Field(
        None, description='The attribute can be used in product listing'
    )
    validation_rules: Optional[List[EavDataAttributeValidationRuleInterface]] = Field(
        None, description='Validation rules.'
    )


class CatalogDataProductAttributeSearchResultsInterface(BaseModel):
    items: List[CatalogDataProductAttributeInterface] = Field(
        ..., description='Attributes list.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CatalogDataProductExtensionInterface(BaseModel):
    bundle_product_options: Optional[List[BundleDataOptionInterface]] = None
    category_links: Optional[List[CatalogDataCategoryLinkInterface]] = None
    configurable_product_links: Optional[List[int]] = None
    configurable_product_options: Optional[
        List[ConfigurableProductDataOptionInterface]
    ] = None
    downloadable_product_links: Optional[List[DownloadableDataLinkInterface]] = None
    downloadable_product_samples: Optional[List[DownloadableDataSampleInterface]] = None
    giftcard_amounts: Optional[List[GiftCardDataGiftcardAmountInterface]] = None
    stock_item: Optional[CatalogInventoryDataStockItemInterface] = None
    website_ids: Optional[List[int]] = None


class CatalogDataProductInterface(BaseModel):
    attribute_set_id: Optional[int] = Field(None, description='Attribute set id')
    created_at: Optional[str] = Field(None, description='Created date')
    custom_attributes: Optional[List[FrameworkAttributeInterface]] = Field(
        None, description='Custom attributes values.'
    )
    extension_attributes: Optional[CatalogDataProductExtensionInterface] = None
    id: Optional[int] = Field(None, description='Id')
    media_gallery_entries: Optional[
        List[CatalogDataProductAttributeMediaGalleryEntryInterface]
    ] = Field(None, description='Media gallery entries')
    name: Optional[str] = Field(None, description='Name')
    options: Optional[List[CatalogDataProductCustomOptionInterface]] = Field(
        None, description='List of product options'
    )
    price: Optional[float] = Field(None, description='Price')
    product_links: Optional[List[CatalogDataProductLinkInterface]] = Field(
        None, description='Product links info'
    )
    sku: str = Field(..., description='Sku')
    status: Optional[int] = Field(None, description='Status')
    tier_prices: Optional[List[CatalogDataProductTierPriceInterface]] = Field(
        None, description='List of product tier prices'
    )
    type_id: Optional[str] = Field(None, description='Type id')
    updated_at: Optional[str] = Field(None, description='Updated date')
    visibility: Optional[int] = Field(None, description='Visibility')
    weight: Optional[float] = Field(None, description='Weight')


class CatalogDataProductSearchResultsInterface(BaseModel):
    items: List[CatalogDataProductInterface] = Field(
        ..., description='Attributes list.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CatalogInventoryDataStockItemCollectionInterface(BaseModel):
    items: List[CatalogInventoryDataStockItemInterface] = Field(
        ..., description='Items'
    )
    search_criteria: CatalogInventoryStockItemCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CmsDataBlockSearchResultsInterface(BaseModel):
    items: List[CmsDataBlockInterface] = Field(..., description='Blocks list.')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CmsDataPageSearchResultsInterface(BaseModel):
    items: List[CmsDataPageInterface] = Field(..., description='Pages list.')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CompanyCreditDataCreditLimitSearchResultsInterface(BaseModel):
    items: List[CompanyCreditDataCreditDataInterface] = Field(
        ..., description='Credit Limit list.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CompanyCreditDataHistorySearchResultsInterface(BaseModel):
    items: List[CompanyCreditDataHistoryDataInterface] = Field(
        ..., description='History list.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CompanyDataCompanySearchResultsInterface(BaseModel):
    items: List[CompanyDataCompanyInterface] = Field(..., description='Companies list')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CompanyDataRoleSearchResultsInterface(BaseModel):
    items: List[CompanyDataRoleInterface] = Field(..., description='Roles list.')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CompanyDataTeamSearchResultsInterface(BaseModel):
    items: List[CompanyDataTeamInterface] = Field(..., description='Teams list')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CustomerDataCustomerSearchResultsInterface(BaseModel):
    items: List[CustomerDataCustomerInterface] = Field(
        ..., description='Customers list.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class CustomerDataGroupSearchResultsInterface(BaseModel):
    items: List[CustomerDataGroupInterface] = Field(
        ..., description='Customer groups list.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class EavDataAttributeGroupSearchResultsInterface(BaseModel):
    items: List[EavDataAttributeGroupInterface] = Field(
        ..., description='Attribute sets list.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class EavDataAttributeSetSearchResultsInterface(BaseModel):
    items: List[EavDataAttributeSetInterface] = Field(
        ..., description='Attribute sets list.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class ErrorErrorsItem(BaseModel):
    message: Optional[str] = Field(None, description='Error message')
    parameters: Optional[ErrorParameters] = None


class QuoteDataCartItemInterface(BaseModel):
    extension_attributes: Optional[QuoteDataCartItemExtensionInterface] = None
    item_id: Optional[int] = Field(None, description='Item ID. Otherwise, null.')
    name: Optional[str] = Field(None, description='Product name. Otherwise, null.')
    price: Optional[float] = Field(None, description='Product price. Otherwise, null.')
    product_option: Optional[QuoteDataProductOptionInterface] = None
    product_type: Optional[str] = Field(
        None, description='Product type. Otherwise, null.'
    )
    qty: float = Field(..., description='Product quantity.')
    quote_id: str = Field(..., description='Quote id.')
    sku: Optional[str] = Field(None, description='Product SKU. Otherwise, null.')


class QuoteDataShippingAssignmentInterface(BaseModel):
    extension_attributes: Optional[QuoteDataShippingAssignmentExtensionInterface] = None
    items: List[QuoteDataCartItemInterface]
    shipping: QuoteDataShippingInterface


class QuoteDataTotalSegmentExtensionInterface(BaseModel):
    gift_cards: Optional[str] = None
    gw_add_card: Optional[str] = None
    gw_allow_gift_receipt: Optional[str] = None
    gw_base_price: Optional[str] = None
    gw_base_price_incl_tax: Optional[str] = None
    gw_base_tax_amount: Optional[str] = None
    gw_card_base_price: Optional[str] = None
    gw_card_base_price_incl_tax: Optional[str] = None
    gw_card_base_tax_amount: Optional[str] = None
    gw_card_price: Optional[str] = None
    gw_card_price_incl_tax: Optional[str] = None
    gw_card_tax_amount: Optional[str] = None
    gw_item_ids: Optional[List[str]] = None
    gw_items_base_price: Optional[str] = None
    gw_items_base_price_incl_tax: Optional[str] = None
    gw_items_base_tax_amount: Optional[str] = None
    gw_items_price: Optional[str] = None
    gw_items_price_incl_tax: Optional[str] = None
    gw_items_tax_amount: Optional[str] = None
    gw_order_id: Optional[str] = None
    gw_price: Optional[str] = None
    gw_price_incl_tax: Optional[str] = None
    gw_tax_amount: Optional[str] = None
    tax_grandtotal_details: Optional[List[TaxDataGrandTotalDetailsInterface]] = None
    vertex_tax_calculation_messages: Optional[List[str]] = None


class QuoteDataTotalSegmentInterface(BaseModel):
    area: Optional[str] = Field(None, description='Display area code.')
    code: str = Field(..., description='Code')
    extension_attributes: Optional[QuoteDataTotalSegmentExtensionInterface] = None
    title: Optional[str] = Field(None, description='Total title')
    value: float = Field(..., description='Total value')


class QuoteDataTotalsInterface(BaseModel):
    base_currency_code: Optional[str] = Field(None, description='Base currency code')
    base_discount_amount: Optional[float] = Field(
        None, description='Discount amount in base currency'
    )
    base_grand_total: Optional[float] = Field(
        None, description='Grand total in base currency'
    )
    base_shipping_amount: Optional[float] = Field(
        None, description='Shipping amount in base currency'
    )
    base_shipping_discount_amount: Optional[float] = Field(
        None, description='Shipping discount amount in base currency'
    )
    base_shipping_incl_tax: Optional[float] = Field(
        None, description='Shipping including tax in base currency'
    )
    base_shipping_tax_amount: Optional[float] = Field(
        None, description='Shipping tax amount in base currency'
    )
    base_subtotal: Optional[float] = Field(
        None, description='Subtotal in base currency'
    )
    base_subtotal_incl_tax: Optional[float] = Field(
        None, description='Subtotal including tax in base currency'
    )
    base_subtotal_with_discount: Optional[float] = Field(
        None, description='Subtotal in base currency with applied discount'
    )
    base_tax_amount: Optional[float] = Field(
        None, description='Tax amount in base currency'
    )
    coupon_code: Optional[str] = Field(None, description='Applied coupon code')
    discount_amount: Optional[float] = Field(
        None, description='Discount amount in quote currency'
    )
    extension_attributes: Optional[QuoteDataTotalsExtensionInterface] = None
    grand_total: Optional[float] = Field(
        None, description='Grand total in quote currency'
    )
    items: Optional[List[QuoteDataTotalsItemInterface]] = Field(
        None, description='Totals by items'
    )
    items_qty: Optional[int] = Field(None, description='Items qty')
    quote_currency_code: Optional[str] = Field(None, description='Quote currency code')
    shipping_amount: Optional[float] = Field(
        None, description='Shipping amount in quote currency'
    )
    shipping_discount_amount: Optional[float] = Field(
        None, description='Shipping discount amount in quote currency'
    )
    shipping_incl_tax: Optional[float] = Field(
        None, description='Shipping including tax in quote currency'
    )
    shipping_tax_amount: Optional[float] = Field(
        None, description='Shipping tax amount in quote currency'
    )
    subtotal: Optional[float] = Field(None, description='Subtotal in quote currency')
    subtotal_incl_tax: Optional[float] = Field(
        None, description='Subtotal including tax in quote currency'
    )
    subtotal_with_discount: Optional[float] = Field(
        None, description='Subtotal in quote currency with applied discount'
    )
    tax_amount: Optional[float] = Field(
        None, description='Tax amount in quote currency'
    )
    total_segments: List[QuoteDataTotalSegmentInterface] = Field(
        ..., description='Dynamically calculated totals'
    )
    weee_tax_applied_amount: float = Field(
        ..., description='Item weee tax applied amount in quote currency.'
    )


class SalesDataShippingAssignmentInterface(BaseModel):
    extension_attributes: Optional[SalesDataShippingAssignmentExtensionInterface] = None
    items: List[SalesDataOrderItemInterface] = Field(
        ..., description='Order items of shipping assignment'
    )
    shipping: SalesDataShippingInterface
    stock_id: Optional[int] = Field(None, description='Stock id')


class V1CartsMineItemsGetResponse(RootModel[List[QuoteDataCartItemInterface]]):
    root: List[QuoteDataCartItemInterface] = Field(..., description='Array of items.')


class V1CartsMineItemsPostRequest(BaseModel):
    cartItem: QuoteDataCartItemInterface


class V1CartsMineItemsItemIdPutRequest(BaseModel):
    cartItem: QuoteDataCartItemInterface


class V1CartsCartIdItemsGetResponse(RootModel[List[QuoteDataCartItemInterface]]):
    root: List[QuoteDataCartItemInterface] = Field(..., description='Array of items.')


class V1CartsCartIdItemsItemIdPutRequest(BaseModel):
    cartItem: QuoteDataCartItemInterface


class V1CartsQuoteIdItemsPostRequest(BaseModel):
    cartItem: QuoteDataCartItemInterface


class V1ConfigurableProductsVariationPutRequest(BaseModel):
    options: List[ConfigurableProductDataOptionInterface]
    product: CatalogDataProductInterface


class V1ConfigurableProductsVariationPutResponse(
    RootModel[List[CatalogDataProductInterface]]
):
    root: List[CatalogDataProductInterface]


class V1ConfigurableProductsSkuChildrenGetResponse(
    RootModel[List[CatalogDataProductInterface]]
):
    root: List[CatalogDataProductInterface]


class V1GuestCartsCartIdItemsGetResponse(RootModel[List[QuoteDataCartItemInterface]]):
    root: List[QuoteDataCartItemInterface] = Field(..., description='Array of items.')


class V1GuestCartsCartIdItemsPostRequest(BaseModel):
    cartItem: QuoteDataCartItemInterface


class V1GuestCartsCartIdItemsItemIdPutRequest(BaseModel):
    cartItem: QuoteDataCartItemInterface


class V1ProductsPostRequest(BaseModel):
    product: CatalogDataProductInterface
    saveOptions: Optional[bool] = None


class V1ProductsAttributeSetsAttributeSetIdAttributesGetResponse(
    RootModel[List[CatalogDataProductAttributeInterface]]
):
    root: List[CatalogDataProductAttributeInterface]


class V1ProductsAttributesPostRequest(BaseModel):
    attribute: CatalogDataProductAttributeInterface


class V1ProductsAttributesAttributeCodePutRequest(BaseModel):
    attribute: CatalogDataProductAttributeInterface


class V1ProductsMediaTypesAttributeSetNameGetResponse(
    RootModel[List[CatalogDataProductAttributeInterface]]
):
    root: List[CatalogDataProductAttributeInterface] = Field(
        ..., description='list of media attributes'
    )


class V1ProductsSkuPutRequest(BaseModel):
    product: CatalogDataProductInterface
    saveOptions: Optional[bool] = None


class V1SharedCatalogIdAssignProductsPostRequest(BaseModel):
    products: List[CatalogDataProductInterface]


class V1SharedCatalogIdUnassignProductsPostRequest(BaseModel):
    products: List[CatalogDataProductInterface]


class CheckoutDataPaymentDetailsInterface(BaseModel):
    extension_attributes: Optional[CheckoutDataPaymentDetailsExtensionInterface] = None
    payment_methods: List[QuoteDataPaymentMethodInterface]
    totals: QuoteDataTotalsInterface


class ErrorErrors(RootModel[List[ErrorErrorsItem]]):
    root: List[ErrorErrorsItem] = Field(..., description='Errors list')


class ErrorResponse(BaseModel):
    code: Optional[int] = Field(None, description='Error code')
    errors: Optional[ErrorErrors] = None
    message: str = Field(..., description='Error message')
    parameters: Optional[ErrorParameters] = None
    trace: Optional[str] = Field(None, description='Stack trace')


class QuoteDataCartExtensionInterface(BaseModel):
    amazon_order_reference_id: Optional[str] = None
    negotiable_quote: Optional[NegotiableQuoteDataNegotiableQuoteInterface] = None
    shipping_assignments: Optional[List[QuoteDataShippingAssignmentInterface]] = None


class QuoteDataCartInterface(BaseModel):
    billing_address: Optional[QuoteDataAddressInterface] = None
    converted_at: Optional[str] = Field(
        None, description='Cart conversion date and time. Otherwise, null.'
    )
    created_at: Optional[str] = Field(
        None, description='Cart creation date and time. Otherwise, null.'
    )
    currency: Optional[QuoteDataCurrencyInterface] = None
    customer: CustomerDataCustomerInterface
    customer_is_guest: Optional[bool] = Field(
        None, description='For guest customers, false for logged in customers'
    )
    customer_note: Optional[str] = Field(None, description='Notice text')
    customer_note_notify: Optional[bool] = Field(
        None, description='Customer notification flag'
    )
    customer_tax_class_id: Optional[int] = Field(
        None, description='Customer tax class ID.'
    )
    extension_attributes: Optional[QuoteDataCartExtensionInterface] = None
    id: int = Field(..., description='Cart/quote ID.')
    is_active: Optional[bool] = Field(
        None, description='Active status flag value. Otherwise, null.'
    )
    is_virtual: Optional[bool] = Field(
        None, description='Virtual flag value. Otherwise, null.'
    )
    items: Optional[List[QuoteDataCartItemInterface]] = Field(
        None, description='Array of items. Otherwise, null.'
    )
    items_count: Optional[int] = Field(
        None,
        description='Number of different items or products in the cart. Otherwise, null.',
    )
    items_qty: Optional[float] = Field(
        None, description='Total quantity of all cart items. Otherwise, null.'
    )
    orig_order_id: Optional[int] = Field(
        None, description='Original order ID. Otherwise, null.'
    )
    reserved_order_id: Optional[str] = Field(
        None, description='Reserved order ID. Otherwise, null.'
    )
    store_id: int = Field(..., description='Store identifier')
    updated_at: Optional[str] = Field(
        None, description='Cart last update date and time. Otherwise, null.'
    )


class QuoteDataCartSearchResultsInterface(BaseModel):
    items: List[QuoteDataCartInterface] = Field(..., description='Carts list.')
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class SalesDataOrderExtensionInterface(BaseModel):
    amazon_order_reference_id: Optional[str] = None
    applied_taxes: Optional[List[TaxDataOrderTaxDetailsAppliedTaxInterface]] = None
    base_customer_balance_amount: Optional[float] = None
    base_customer_balance_invoiced: Optional[float] = None
    base_customer_balance_refunded: Optional[float] = None
    base_customer_balance_total_refunded: Optional[float] = None
    base_gift_cards_amount: Optional[float] = None
    base_gift_cards_invoiced: Optional[float] = None
    base_gift_cards_refunded: Optional[float] = None
    base_reward_currency_amount: Optional[float] = None
    company_order_attributes: Optional[CompanyDataCompanyOrderInterface] = None
    converting_from_quote: Optional[bool] = None
    customer_balance_amount: Optional[float] = None
    customer_balance_invoiced: Optional[float] = None
    customer_balance_refunded: Optional[float] = None
    customer_balance_total_refunded: Optional[float] = None
    gift_cards: Optional[List[GiftCardAccountDataGiftCardInterface]] = None
    gift_cards_amount: Optional[float] = None
    gift_cards_invoiced: Optional[float] = None
    gift_cards_refunded: Optional[float] = None
    gift_message: Optional[GiftMessageDataMessageInterface] = None
    gw_add_card: Optional[str] = None
    gw_allow_gift_receipt: Optional[str] = None
    gw_base_price: Optional[str] = None
    gw_base_price_incl_tax: Optional[str] = None
    gw_base_price_invoiced: Optional[str] = None
    gw_base_price_refunded: Optional[str] = None
    gw_base_tax_amount: Optional[str] = None
    gw_base_tax_amount_invoiced: Optional[str] = None
    gw_base_tax_amount_refunded: Optional[str] = None
    gw_card_base_price: Optional[str] = None
    gw_card_base_price_incl_tax: Optional[str] = None
    gw_card_base_price_invoiced: Optional[str] = None
    gw_card_base_price_refunded: Optional[str] = None
    gw_card_base_tax_amount: Optional[str] = None
    gw_card_base_tax_invoiced: Optional[str] = None
    gw_card_base_tax_refunded: Optional[str] = None
    gw_card_price: Optional[str] = None
    gw_card_price_incl_tax: Optional[str] = None
    gw_card_price_invoiced: Optional[str] = None
    gw_card_price_refunded: Optional[str] = None
    gw_card_tax_amount: Optional[str] = None
    gw_card_tax_invoiced: Optional[str] = None
    gw_card_tax_refunded: Optional[str] = None
    gw_id: Optional[str] = None
    gw_items_base_price: Optional[str] = None
    gw_items_base_price_incl_tax: Optional[str] = None
    gw_items_base_price_invoiced: Optional[str] = None
    gw_items_base_price_refunded: Optional[str] = None
    gw_items_base_tax_amount: Optional[str] = None
    gw_items_base_tax_invoiced: Optional[str] = None
    gw_items_base_tax_refunded: Optional[str] = None
    gw_items_price: Optional[str] = None
    gw_items_price_incl_tax: Optional[str] = None
    gw_items_price_invoiced: Optional[str] = None
    gw_items_price_refunded: Optional[str] = None
    gw_items_tax_amount: Optional[str] = None
    gw_items_tax_invoiced: Optional[str] = None
    gw_items_tax_refunded: Optional[str] = None
    gw_price: Optional[str] = None
    gw_price_incl_tax: Optional[str] = None
    gw_price_invoiced: Optional[str] = None
    gw_price_refunded: Optional[str] = None
    gw_tax_amount: Optional[str] = None
    gw_tax_amount_invoiced: Optional[str] = None
    gw_tax_amount_refunded: Optional[str] = None
    item_applied_taxes: Optional[List[TaxDataOrderTaxDetailsItemInterface]] = None
    payment_additional_info: Optional[
        List[PaymentDataPaymentAdditionalInfoInterface]
    ] = None
    reward_currency_amount: Optional[float] = None
    reward_points_balance: Optional[int] = None
    shipping_assignments: Optional[List[SalesDataShippingAssignmentInterface]] = None


class SalesDataOrderInterface(BaseModel):
    adjustment_negative: Optional[float] = Field(
        None, description='Negative adjustment value.'
    )
    adjustment_positive: Optional[float] = Field(
        None, description='Positive adjustment value.'
    )
    applied_rule_ids: Optional[str] = Field(None, description='Applied rule IDs.')
    base_adjustment_negative: Optional[float] = Field(
        None, description='Base negative adjustment value.'
    )
    base_adjustment_positive: Optional[float] = Field(
        None, description='Base positive adjustment value.'
    )
    base_currency_code: Optional[str] = Field(None, description='Base currency code.')
    base_discount_amount: Optional[float] = Field(
        None, description='Base discount amount.'
    )
    base_discount_canceled: Optional[float] = Field(
        None, description='Base discount canceled.'
    )
    base_discount_invoiced: Optional[float] = Field(
        None, description='Base discount invoiced.'
    )
    base_discount_refunded: Optional[float] = Field(
        None, description='Base discount refunded.'
    )
    base_discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Base discount tax compensation amount.'
    )
    base_discount_tax_compensation_invoiced: Optional[float] = Field(
        None, description='Base discount tax compensation invoiced.'
    )
    base_discount_tax_compensation_refunded: Optional[float] = Field(
        None, description='Base discount tax compensation refunded.'
    )
    base_grand_total: float = Field(..., description='Base grand total.')
    base_shipping_amount: Optional[float] = Field(
        None, description='Base shipping amount.'
    )
    base_shipping_canceled: Optional[float] = Field(
        None, description='Base shipping canceled.'
    )
    base_shipping_discount_amount: Optional[float] = Field(
        None, description='Base shipping discount amount.'
    )
    base_shipping_discount_tax_compensation_amnt: Optional[float] = Field(
        None, description='Base shipping discount tax compensation amount.'
    )
    base_shipping_incl_tax: Optional[float] = Field(
        None, description='Base shipping including tax.'
    )
    base_shipping_invoiced: Optional[float] = Field(
        None, description='Base shipping invoiced.'
    )
    base_shipping_refunded: Optional[float] = Field(
        None, description='Base shipping refunded.'
    )
    base_shipping_tax_amount: Optional[float] = Field(
        None, description='Base shipping tax amount.'
    )
    base_shipping_tax_refunded: Optional[float] = Field(
        None, description='Base shipping tax refunded.'
    )
    base_subtotal: Optional[float] = Field(None, description='Base subtotal.')
    base_subtotal_canceled: Optional[float] = Field(
        None, description='Base subtotal canceled.'
    )
    base_subtotal_incl_tax: Optional[float] = Field(
        None, description='Base subtotal including tax.'
    )
    base_subtotal_invoiced: Optional[float] = Field(
        None, description='Base subtotal invoiced.'
    )
    base_subtotal_refunded: Optional[float] = Field(
        None, description='Base subtotal refunded.'
    )
    base_tax_amount: Optional[float] = Field(None, description='Base tax amount.')
    base_tax_canceled: Optional[float] = Field(None, description='Base tax canceled.')
    base_tax_invoiced: Optional[float] = Field(None, description='Base tax invoiced.')
    base_tax_refunded: Optional[float] = Field(None, description='Base tax refunded.')
    base_to_global_rate: Optional[float] = Field(
        None, description='Base-to-global rate.'
    )
    base_to_order_rate: Optional[float] = Field(None, description='Base-to-order rate.')
    base_total_canceled: Optional[float] = Field(
        None, description='Base total canceled.'
    )
    base_total_due: Optional[float] = Field(None, description='Base total due.')
    base_total_invoiced: Optional[float] = Field(
        None, description='Base total invoiced.'
    )
    base_total_invoiced_cost: Optional[float] = Field(
        None, description='Base total invoiced cost.'
    )
    base_total_offline_refunded: Optional[float] = Field(
        None, description='Base total offline refunded.'
    )
    base_total_online_refunded: Optional[float] = Field(
        None, description='Base total online refunded.'
    )
    base_total_paid: Optional[float] = Field(None, description='Base total paid.')
    base_total_qty_ordered: Optional[float] = Field(
        None, description='Base total quantity ordered.'
    )
    base_total_refunded: Optional[float] = Field(
        None, description='Base total refunded.'
    )
    billing_address: Optional[SalesDataOrderAddressInterface] = None
    billing_address_id: Optional[int] = Field(None, description='Billing address ID.')
    can_ship_partially: Optional[int] = Field(
        None, description='Can-ship-partially flag value.'
    )
    can_ship_partially_item: Optional[int] = Field(
        None, description='Can-ship-partially-item flag value.'
    )
    coupon_code: Optional[str] = Field(None, description='Coupon code.')
    created_at: Optional[str] = Field(None, description='Created-at timestamp.')
    customer_dob: Optional[str] = Field(
        None, description='Customer date-of-birth (DOB).'
    )
    customer_email: str = Field(..., description='Customer email address.')
    customer_firstname: Optional[str] = Field(None, description='Customer first name.')
    customer_gender: Optional[int] = Field(None, description='Customer gender.')
    customer_group_id: Optional[int] = Field(None, description='Customer group ID.')
    customer_id: Optional[int] = Field(None, description='Customer ID.')
    customer_is_guest: Optional[int] = Field(
        None, description='Customer-is-guest flag value.'
    )
    customer_lastname: Optional[str] = Field(None, description='Customer last name.')
    customer_middlename: Optional[str] = Field(
        None, description='Customer middle name.'
    )
    customer_note: Optional[str] = Field(None, description='Customer note.')
    customer_note_notify: Optional[int] = Field(
        None, description='Customer-note-notify flag value.'
    )
    customer_prefix: Optional[str] = Field(None, description='Customer prefix.')
    customer_suffix: Optional[str] = Field(None, description='Customer suffix.')
    customer_taxvat: Optional[str] = Field(
        None, description='Customer value-added tax (VAT).'
    )
    discount_amount: Optional[float] = Field(None, description='Discount amount.')
    discount_canceled: Optional[float] = Field(None, description='Discount canceled.')
    discount_description: Optional[str] = Field(
        None, description='Discount description.'
    )
    discount_invoiced: Optional[float] = Field(None, description='Discount invoiced.')
    discount_refunded: Optional[float] = Field(
        None, description='Discount refunded amount.'
    )
    discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Discount tax compensation amount.'
    )
    discount_tax_compensation_invoiced: Optional[float] = Field(
        None, description='Discount tax compensation invoiced amount.'
    )
    discount_tax_compensation_refunded: Optional[float] = Field(
        None, description='Discount tax compensation refunded amount.'
    )
    edit_increment: Optional[int] = Field(None, description='Edit increment value.')
    email_sent: Optional[int] = Field(None, description='Email-sent flag value.')
    entity_id: Optional[int] = Field(None, description='Order ID.')
    ext_customer_id: Optional[str] = Field(None, description='External customer ID.')
    ext_order_id: Optional[str] = Field(None, description='External order ID.')
    extension_attributes: Optional[SalesDataOrderExtensionInterface] = None
    forced_shipment_with_invoice: Optional[int] = Field(
        None, description='Forced-shipment-with-invoice flag value.'
    )
    global_currency_code: Optional[str] = Field(
        None, description='Global currency code.'
    )
    grand_total: float = Field(..., description='Grand total.')
    hold_before_state: Optional[str] = Field(None, description='Hold before state.')
    hold_before_status: Optional[str] = Field(None, description='Hold before status.')
    increment_id: Optional[str] = Field(None, description='Increment ID.')
    is_virtual: Optional[int] = Field(None, description='Is-virtual flag value.')
    items: List[SalesDataOrderItemInterface] = Field(..., description='Array of items.')
    order_currency_code: Optional[str] = Field(None, description='Order currency code.')
    original_increment_id: Optional[str] = Field(
        None, description='Original increment ID.'
    )
    payment: Optional[SalesDataOrderPaymentInterface] = None
    payment_auth_expiration: Optional[int] = Field(
        None, description='Payment authorization expiration date.'
    )
    payment_authorization_amount: Optional[float] = Field(
        None, description='Payment authorization amount.'
    )
    protect_code: Optional[str] = Field(None, description='Protect code.')
    quote_address_id: Optional[int] = Field(None, description='Quote address ID.')
    quote_id: Optional[int] = Field(None, description='Quote ID.')
    relation_child_id: Optional[str] = Field(None, description='Relation child ID.')
    relation_child_real_id: Optional[str] = Field(
        None, description='Relation child real ID.'
    )
    relation_parent_id: Optional[str] = Field(None, description='Relation parent ID.')
    relation_parent_real_id: Optional[str] = Field(
        None, description='Relation parent real ID.'
    )
    remote_ip: Optional[str] = Field(None, description='Remote IP address.')
    shipping_amount: Optional[float] = Field(None, description='Shipping amount.')
    shipping_canceled: Optional[float] = Field(
        None, description='Shipping canceled amount.'
    )
    shipping_description: Optional[str] = Field(
        None, description='Shipping description.'
    )
    shipping_discount_amount: Optional[float] = Field(
        None, description='Shipping discount amount.'
    )
    shipping_discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Shipping discount tax compensation amount.'
    )
    shipping_incl_tax: Optional[float] = Field(
        None, description='Shipping including tax amount.'
    )
    shipping_invoiced: Optional[float] = Field(
        None, description='Shipping invoiced amount.'
    )
    shipping_refunded: Optional[float] = Field(
        None, description='Shipping refunded amount.'
    )
    shipping_tax_amount: Optional[float] = Field(
        None, description='Shipping tax amount.'
    )
    shipping_tax_refunded: Optional[float] = Field(
        None, description='Shipping tax refunded amount.'
    )
    state: Optional[str] = Field(None, description='State.')
    status: Optional[str] = Field(None, description='Status.')
    status_histories: Optional[List[SalesDataOrderStatusHistoryInterface]] = Field(
        None, description='Array of status histories.'
    )
    store_currency_code: Optional[str] = Field(None, description='Store currency code.')
    store_id: Optional[int] = Field(None, description='Store ID.')
    store_name: Optional[str] = Field(None, description='Store name.')
    store_to_base_rate: Optional[float] = Field(None, description='Store-to-base rate.')
    store_to_order_rate: Optional[float] = Field(
        None, description='Store-to-order rate.'
    )
    subtotal: Optional[float] = Field(None, description='Subtotal.')
    subtotal_canceled: Optional[float] = Field(
        None, description='Subtotal canceled amount.'
    )
    subtotal_incl_tax: Optional[float] = Field(
        None, description='Subtotal including tax amount.'
    )
    subtotal_invoiced: Optional[float] = Field(
        None, description='Subtotal invoiced amount.'
    )
    subtotal_refunded: Optional[float] = Field(
        None, description='Subtotal refunded amount.'
    )
    tax_amount: Optional[float] = Field(None, description='Tax amount.')
    tax_canceled: Optional[float] = Field(None, description='Tax canceled amount.')
    tax_invoiced: Optional[float] = Field(None, description='Tax invoiced amount.')
    tax_refunded: Optional[float] = Field(None, description='Tax refunded amount.')
    total_canceled: Optional[float] = Field(None, description='Total canceled.')
    total_due: Optional[float] = Field(None, description='Total due.')
    total_invoiced: Optional[float] = Field(None, description='Total invoiced amount.')
    total_item_count: Optional[int] = Field(None, description='Total item count.')
    total_offline_refunded: Optional[float] = Field(
        None, description='Total offline refunded amount.'
    )
    total_online_refunded: Optional[float] = Field(
        None, description='Total online refunded amount.'
    )
    total_paid: Optional[float] = Field(None, description='Total paid.')
    total_qty_ordered: Optional[float] = Field(
        None, description='Total quantity ordered.'
    )
    total_refunded: Optional[float] = Field(None, description='Total amount refunded.')
    updated_at: Optional[str] = Field(None, description='Updated-at timestamp.')
    weight: Optional[float] = Field(None, description='Weight.')
    x_forwarded_for: Optional[str] = Field(
        None, description='X-Forwarded-For field value.'
    )


class SalesDataOrderSearchResultInterface(BaseModel):
    items: List[SalesDataOrderInterface] = Field(
        ..., description='Array of collection items.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class V1CartsMinePutRequest(BaseModel):
    quote: QuoteDataCartInterface


class V1NegotiableQuoteQuoteIdPutRequest(BaseModel):
    quote: QuoteDataCartInterface


class V1OrdersPostRequest(BaseModel):
    entity: SalesDataOrderInterface


class V1OrdersCreatePutRequest(BaseModel):
    entity: SalesDataOrderInterface


class SalesDataInvoiceExtensionInterface(BaseModel):
    base_customer_balance_amount: Optional[float] = None
    base_gift_cards_amount: Optional[float] = None
    customer_balance_amount: Optional[float] = None
    gift_cards_amount: Optional[float] = None
    gw_base_price: Optional[str] = None
    gw_base_tax_amount: Optional[str] = None
    gw_card_base_price: Optional[str] = None
    gw_card_base_tax_amount: Optional[str] = None
    gw_card_price: Optional[str] = None
    gw_card_tax_amount: Optional[str] = None
    gw_items_base_price: Optional[str] = None
    gw_items_base_tax_amount: Optional[str] = None
    gw_items_price: Optional[str] = None
    gw_items_tax_amount: Optional[str] = None
    gw_price: Optional[str] = None
    gw_tax_amount: Optional[str] = None
    vertex_tax_calculation_billing_address: Optional[SalesDataOrderAddressInterface] = (
        None
    )
    vertex_tax_calculation_order: Optional[SalesDataOrderInterface] = None
    vertex_tax_calculation_shipping_address: Optional[
        SalesDataOrderAddressInterface
    ] = None


class SalesDataInvoiceInterface(BaseModel):
    base_currency_code: Optional[str] = Field(None, description='Base currency code.')
    base_discount_amount: Optional[float] = Field(
        None, description='Base discount amount.'
    )
    base_discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Base discount tax compensation amount.'
    )
    base_grand_total: Optional[float] = Field(None, description='Base grand total.')
    base_shipping_amount: Optional[float] = Field(
        None, description='Base shipping amount.'
    )
    base_shipping_discount_tax_compensation_amnt: Optional[float] = Field(
        None, description='Base shipping discount tax compensation amount.'
    )
    base_shipping_incl_tax: Optional[float] = Field(
        None, description='Base shipping including tax.'
    )
    base_shipping_tax_amount: Optional[float] = Field(
        None, description='Base shipping tax amount.'
    )
    base_subtotal: Optional[float] = Field(None, description='Base subtotal.')
    base_subtotal_incl_tax: Optional[float] = Field(
        None, description='Base subtotal including tax.'
    )
    base_tax_amount: Optional[float] = Field(None, description='Base tax amount.')
    base_to_global_rate: Optional[float] = Field(
        None, description='Base-to-global rate.'
    )
    base_to_order_rate: Optional[float] = Field(None, description='Base-to-order rate.')
    base_total_refunded: Optional[float] = Field(
        None, description='Base total refunded.'
    )
    billing_address_id: Optional[int] = Field(None, description='Billing address ID.')
    can_void_flag: Optional[int] = Field(None, description='Can void flag value.')
    comments: Optional[List[SalesDataInvoiceCommentInterface]] = Field(
        None, description='Array of any invoice comments. Otherwise, null.'
    )
    created_at: Optional[str] = Field(None, description='Created-at timestamp.')
    discount_amount: Optional[float] = Field(None, description='Discount amount.')
    discount_description: Optional[str] = Field(
        None, description='Discount description.'
    )
    discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Discount tax compensation amount.'
    )
    email_sent: Optional[int] = Field(None, description='Email-sent flag value.')
    entity_id: Optional[int] = Field(None, description='Invoice ID.')
    extension_attributes: Optional[SalesDataInvoiceExtensionInterface] = None
    global_currency_code: Optional[str] = Field(
        None, description='Global currency code.'
    )
    grand_total: Optional[float] = Field(None, description='Grand total.')
    increment_id: Optional[str] = Field(None, description='Increment ID.')
    is_used_for_refund: Optional[int] = Field(
        None, description='Is-used-for-refund flag value.'
    )
    items: List[SalesDataInvoiceItemInterface] = Field(
        ..., description='Array of invoice items.'
    )
    order_currency_code: Optional[str] = Field(None, description='Order currency code.')
    order_id: int = Field(..., description='Order ID.')
    shipping_address_id: Optional[int] = Field(None, description='Shipping address ID.')
    shipping_amount: Optional[float] = Field(None, description='Shipping amount.')
    shipping_discount_tax_compensation_amount: Optional[float] = Field(
        None, description='Shipping discount tax compensation amount.'
    )
    shipping_incl_tax: Optional[float] = Field(
        None, description='Shipping including tax.'
    )
    shipping_tax_amount: Optional[float] = Field(
        None, description='Shipping tax amount.'
    )
    state: Optional[int] = Field(None, description='State.')
    store_currency_code: Optional[str] = Field(None, description='Store currency code.')
    store_id: Optional[int] = Field(None, description='Store ID.')
    store_to_base_rate: Optional[float] = Field(None, description='Store-to-base rate.')
    store_to_order_rate: Optional[float] = Field(
        None, description='Store-to-order rate.'
    )
    subtotal: Optional[float] = Field(None, description='Subtotal.')
    subtotal_incl_tax: Optional[float] = Field(
        None, description='Subtotal including tax.'
    )
    tax_amount: Optional[float] = Field(None, description='Tax amount.')
    total_qty: float = Field(..., description='Total quantity.')
    transaction_id: Optional[str] = Field(None, description='Transaction ID.')
    updated_at: Optional[str] = Field(None, description='Updated-at timestamp.')


class SalesDataInvoiceSearchResultInterface(BaseModel):
    items: List[SalesDataInvoiceInterface] = Field(
        ..., description='Array of collection items.'
    )
    search_criteria: FrameworkSearchCriteriaInterface
    total_count: int = Field(..., description='Total count.')


class V1InvoicesPostRequest(BaseModel):
    entity: SalesDataInvoiceInterface


class CatalogDataProductRenderInterface(BaseModel):
    add_to_cart_button: CatalogDataProductRenderButtonInterface
    add_to_compare_button: CatalogDataProductRenderButtonInterface
    currency_code: str = Field(
        ..., description='Current or desired currency code to product'
    )
    extension_attributes: CatalogDataProductRenderExtensionInterface
    id: int = Field(..., description='Product identifier')
    images: List[CatalogDataProductRenderImageInterface] = Field(
        ..., description='Enough information, that needed to render image on front'
    )
    is_salable: str = Field(
        ..., description='Information about product saleability (In Stock)'
    )
    name: str = Field(..., description='Product name')
    price_info: CatalogDataProductRenderPriceInfoInterface
    store_id: int = Field(
        ..., description='Information about current store id or requested store id'
    )
    type: str = Field(
        ..., description='Product type. Such as bundle, grouped, simple, etc...'
    )
    url: str = Field(..., description='Product url')


class CatalogDataProductRenderPriceInfoExtensionInterface(BaseModel):
    msrp: Optional[MsrpDataProductRenderMsrpPriceInfoInterface] = None
    tax_adjustments: Optional[CatalogDataProductRenderPriceInfoInterface] = None
    weee_adjustment: Optional[str] = None
    weee_attributes: Optional[
        List[WeeeDataProductRenderWeeeAdjustmentAttributeInterface]
    ] = None


class CatalogDataProductRenderPriceInfoInterface(BaseModel):
    extension_attributes: Optional[
        CatalogDataProductRenderPriceInfoExtensionInterface
    ] = None
    final_price: float = Field(..., description='Final price')
    formatted_prices: CatalogDataProductRenderFormattedPriceInfoInterface
    max_price: float = Field(..., description='Max price of a product')
    max_regular_price: float = Field(..., description='Max regular price')
    minimal_price: float
    minimal_regular_price: float = Field(..., description='Minimal regular price')
    regular_price: float = Field(..., description='Regular price')
    special_price: float = Field(..., description='Special price')


class CatalogDataProductRenderSearchResultsInterface(BaseModel):
    items: List[CatalogDataProductRenderInterface] = Field(
        ..., description='List of products rendered information'
    )


CatalogDataCategoryTreeInterface.model_rebuild()
CustomerDataOptionInterface.model_rebuild()
FrameworkCriteriaInterface.model_rebuild()
SalesDataTransactionInterface.model_rebuild()
SalesRuleDataConditionInterface.model_rebuild()
SalesDataOrderItemInterface.model_rebuild()
CatalogDataProductRenderInterface.model_rebuild()
CatalogDataProductRenderPriceInfoExtensionInterface.model_rebuild()
